
STM32F103RET6_MassStorage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f3c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000000  0800521c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ba4  20000100  0800531c  00020100  2**3
                  ALLOC
  7 ._user_heap_stack 00006000  20000ca4  0800531c  00020ca4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002475c  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000047b1  00000000  00000000  00044885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009240  00000000  00000000  00049036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000de0  00000000  00000000  00052278  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d80  00000000  00000000  00053058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008774  00000000  00000000  00053dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004637  00000000  00000000  0005c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00060b83  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002190  00000000  00000000  00060c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000100 	.word	0x20000100
 8000200:	00000000 	.word	0x00000000
 8000204:	08005108 	.word	0x08005108

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000104 	.word	0x20000104
 8000220:	08005108 	.word	0x08005108

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000228:	f001 fa8c 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <HAL_InitTick+0x24>)
 800022e:	fba3 3000 	umull	r3, r0, r3, r0
 8000232:	0980      	lsrs	r0, r0, #6
 8000234:	f000 f888 	bl	8000348 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000238:	2200      	movs	r2, #0
 800023a:	4621      	mov	r1, r4
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 f844 	bl	80002cc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000244:	2000      	movs	r0, #0
 8000246:	bd10      	pop	{r4, pc}
 8000248:	10624dd3 	.word	0x10624dd3

0800024c <HAL_Init>:
{
 800024c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <HAL_Init+0x20>)
 8000250:	6813      	ldr	r3, [r2, #0]
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000258:	2003      	movs	r0, #3
 800025a:	f000 f825 	bl	80002a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800025e:	2000      	movs	r0, #0
 8000260:	f7ff ffe0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000264:	f004 fc3e 	bl	8004ae4 <HAL_MspInit>
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd08      	pop	{r3, pc}
 800026c:	40022000 	.word	0x40022000

08000270 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000270:	4a02      	ldr	r2, [pc, #8]	; (800027c <HAL_IncTick+0xc>)
 8000272:	6813      	ldr	r3, [r2, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000011c 	.word	0x2000011c

08000280 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000280:	4b01      	ldr	r3, [pc, #4]	; (8000288 <HAL_GetTick+0x8>)
 8000282:	6818      	ldr	r0, [r3, #0]
}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000011c 	.word	0x2000011c

0800028c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800028c:	b510      	push	{r4, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000292:	f7ff fff5 	bl	8000280 <HAL_GetTick>
 8000296:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000298:	f7ff fff2 	bl	8000280 <HAL_GetTick>
 800029c:	1b00      	subs	r0, r0, r4
 800029e:	9b01      	ldr	r3, [sp, #4]
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d3f9      	bcc.n	8000298 <HAL_Delay+0xc>
  {
  }
}
 80002a4:	b002      	add	sp, #8
 80002a6:	bd10      	pop	{r4, pc}

080002a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002b0:	041b      	lsls	r3, r3, #16
 80002b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	0200      	lsls	r0, r0, #8
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002ba:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80002bc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80002c0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80002c4:	60d0      	str	r0, [r2, #12]
 80002c6:	4770      	bx	lr
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <HAL_NVIC_SetPriority+0x5c>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d6:	f1c3 0407 	rsb	r4, r3, #7
 80002da:	2c04      	cmp	r4, #4
 80002dc:	bf28      	it	cs
 80002de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e0:	1d1d      	adds	r5, r3, #4
 80002e2:	2d06      	cmp	r5, #6
 80002e4:	d917      	bls.n	8000316 <HAL_NVIC_SetPriority+0x4a>
 80002e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	2501      	movs	r5, #1
 80002ea:	fa05 f404 	lsl.w	r4, r5, r4
 80002ee:	3c01      	subs	r4, #1
 80002f0:	4021      	ands	r1, r4
 80002f2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002f4:	fa05 f303 	lsl.w	r3, r5, r3
 80002f8:	3b01      	subs	r3, #1
 80002fa:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80002fe:	2800      	cmp	r0, #0
 8000300:	db0b      	blt.n	800031a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	0109      	lsls	r1, r1, #4
 8000304:	b2c9      	uxtb	r1, r1
 8000306:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800030a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800030e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000312:	bc30      	pop	{r4, r5}
 8000314:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000316:	2300      	movs	r3, #0
 8000318:	e7e6      	b.n	80002e8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	f000 000f 	and.w	r0, r0, #15
 800031e:	0109      	lsls	r1, r1, #4
 8000320:	b2c9      	uxtb	r1, r1
 8000322:	4b02      	ldr	r3, [pc, #8]	; (800032c <HAL_NVIC_SetPriority+0x60>)
 8000324:	5419      	strb	r1, [r3, r0]
 8000326:	e7f4      	b.n	8000312 <HAL_NVIC_SetPriority+0x46>
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	e000ed14 	.word	0xe000ed14

08000330 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000330:	0942      	lsrs	r2, r0, #5
 8000332:	f000 001f 	and.w	r0, r0, #31
 8000336:	2301      	movs	r3, #1
 8000338:	fa03 f000 	lsl.w	r0, r3, r0
 800033c:	4b01      	ldr	r3, [pc, #4]	; (8000344 <HAL_NVIC_EnableIRQ+0x14>)
 800033e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100

08000348 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000348:	3801      	subs	r0, #1
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d20a      	bcs.n	8000366 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_SYSTICK_Config+0x24>)
 8000352:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	21f0      	movs	r1, #240	; 0xf0
 8000356:	4a06      	ldr	r2, [pc, #24]	; (8000370 <HAL_SYSTICK_Config+0x28>)
 8000358:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	2000      	movs	r0, #0
 800035e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000360:	2207      	movs	r2, #7
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000366:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000374:	2804      	cmp	r0, #4
 8000376:	d005      	beq.n	8000384 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800037a:	6813      	ldr	r3, [r2, #0]
 800037c:	f023 0304 	bic.w	r3, r3, #4
 8000380:	6013      	str	r3, [r2, #0]
 8000382:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000384:	4a02      	ldr	r2, [pc, #8]	; (8000390 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000386:	6813      	ldr	r3, [r2, #0]
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	4770      	bx	lr
 8000390:	e000e010 	.word	0xe000e010

08000394 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000394:	4770      	bx	lr

08000396 <HAL_SYSTICK_IRQHandler>:
{
 8000396:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000398:	f7ff fffc 	bl	8000394 <HAL_SYSTICK_Callback>
 800039c:	bd08      	pop	{r3, pc}
	...

080003a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003a2:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80003a4:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80003a6:	4634      	mov	r4, r6
 80003a8:	e079      	b.n	800049e <HAL_GPIO_Init+0xfe>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	f000 80a9 	beq.w	8000502 <HAL_GPIO_Init+0x162>
 80003b0:	2d01      	cmp	r5, #1
 80003b2:	d100      	bne.n	80003b6 <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003b4:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003b6:	2bff      	cmp	r3, #255	; 0xff
 80003b8:	f200 80b7 	bhi.w	800052a <HAL_GPIO_Init+0x18a>
 80003bc:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003be:	2bff      	cmp	r3, #255	; 0xff
 80003c0:	f200 80b6 	bhi.w	8000530 <HAL_GPIO_Init+0x190>
 80003c4:	00a5      	lsls	r5, r4, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003c6:	f8de 2000 	ldr.w	r2, [lr]
 80003ca:	270f      	movs	r7, #15
 80003cc:	40af      	lsls	r7, r5
 80003ce:	ea22 0207 	bic.w	r2, r2, r7
 80003d2:	fa06 f505 	lsl.w	r5, r6, r5
 80003d6:	432a      	orrs	r2, r5
 80003d8:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003dc:	684a      	ldr	r2, [r1, #4]
 80003de:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80003e2:	d05b      	beq.n	800049c <HAL_GPIO_Init+0xfc>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e4:	4a67      	ldr	r2, [pc, #412]	; (8000584 <HAL_GPIO_Init+0x1e4>)
 80003e6:	6995      	ldr	r5, [r2, #24]
 80003e8:	f045 0501 	orr.w	r5, r5, #1
 80003ec:	6195      	str	r5, [r2, #24]
 80003ee:	6992      	ldr	r2, [r2, #24]
 80003f0:	f002 0201 	and.w	r2, r2, #1
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2];
 80003f8:	08a2      	lsrs	r2, r4, #2
 80003fa:	1c97      	adds	r7, r2, #2
 80003fc:	4d62      	ldr	r5, [pc, #392]	; (8000588 <HAL_GPIO_Init+0x1e8>)
 80003fe:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000402:	f004 0703 	and.w	r7, r4, #3
 8000406:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 800040a:	270f      	movs	r7, #15
 800040c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000410:	ea25 0507 	bic.w	r5, r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000414:	4f5d      	ldr	r7, [pc, #372]	; (800058c <HAL_GPIO_Init+0x1ec>)
 8000416:	42b8      	cmp	r0, r7
 8000418:	f000 8090 	beq.w	800053c <HAL_GPIO_Init+0x19c>
 800041c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000420:	42b8      	cmp	r0, r7
 8000422:	f000 808d 	beq.w	8000540 <HAL_GPIO_Init+0x1a0>
 8000426:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800042a:	42b8      	cmp	r0, r7
 800042c:	f000 808a 	beq.w	8000544 <HAL_GPIO_Init+0x1a4>
 8000430:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000434:	42b8      	cmp	r0, r7
 8000436:	f000 8087 	beq.w	8000548 <HAL_GPIO_Init+0x1a8>
 800043a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800043e:	42b8      	cmp	r0, r7
 8000440:	f000 8084 	beq.w	800054c <HAL_GPIO_Init+0x1ac>
 8000444:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000448:	42b8      	cmp	r0, r7
 800044a:	d075      	beq.n	8000538 <HAL_GPIO_Init+0x198>
 800044c:	2706      	movs	r7, #6
 800044e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000452:	433d      	orrs	r5, r7
        AFIO->EXTICR[position >> 2] = temp;
 8000454:	3202      	adds	r2, #2
 8000456:	4f4c      	ldr	r7, [pc, #304]	; (8000588 <HAL_GPIO_Init+0x1e8>)
 8000458:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	684a      	ldr	r2, [r1, #4]
 800045e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000462:	d075      	beq.n	8000550 <HAL_GPIO_Init+0x1b0>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000464:	4d4a      	ldr	r5, [pc, #296]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000466:	682a      	ldr	r2, [r5, #0]
 8000468:	431a      	orrs	r2, r3
 800046a:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046c:	684a      	ldr	r2, [r1, #4]
 800046e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000472:	d073      	beq.n	800055c <HAL_GPIO_Init+0x1bc>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000474:	4d46      	ldr	r5, [pc, #280]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000476:	686a      	ldr	r2, [r5, #4]
 8000478:	431a      	orrs	r2, r3
 800047a:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800047c:	684a      	ldr	r2, [r1, #4]
 800047e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000482:	d071      	beq.n	8000568 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000484:	4d42      	ldr	r5, [pc, #264]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000486:	68aa      	ldr	r2, [r5, #8]
 8000488:	431a      	orrs	r2, r3
 800048a:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800048c:	684a      	ldr	r2, [r1, #4]
 800048e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000492:	d06f      	beq.n	8000574 <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000494:	4d3e      	ldr	r5, [pc, #248]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000496:	68ea      	ldr	r2, [r5, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	60eb      	str	r3, [r5, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 800049c:	3401      	adds	r4, #1
 800049e:	2c0f      	cmp	r4, #15
 80004a0:	d86e      	bhi.n	8000580 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 80004a2:	2201      	movs	r2, #1
 80004a4:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004a6:	680b      	ldr	r3, [r1, #0]
 80004a8:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d1f6      	bne.n	800049c <HAL_GPIO_Init+0xfc>
      switch (GPIO_Init->Mode)
 80004ae:	684d      	ldr	r5, [r1, #4]
 80004b0:	2d12      	cmp	r5, #18
 80004b2:	d030      	beq.n	8000516 <HAL_GPIO_Init+0x176>
 80004b4:	d80b      	bhi.n	80004ce <HAL_GPIO_Init+0x12e>
 80004b6:	2d02      	cmp	r5, #2
 80004b8:	d02a      	beq.n	8000510 <HAL_GPIO_Init+0x170>
 80004ba:	f67f af76 	bls.w	80003aa <HAL_GPIO_Init+0xa>
 80004be:	2d03      	cmp	r5, #3
 80004c0:	d02f      	beq.n	8000522 <HAL_GPIO_Init+0x182>
 80004c2:	2d11      	cmp	r5, #17
 80004c4:	f47f af77 	bne.w	80003b6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c8:	68ce      	ldr	r6, [r1, #12]
 80004ca:	3604      	adds	r6, #4
          break;
 80004cc:	e773      	b.n	80003b6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80004ce:	4f31      	ldr	r7, [pc, #196]	; (8000594 <HAL_GPIO_Init+0x1f4>)
 80004d0:	42bd      	cmp	r5, r7
 80004d2:	d016      	beq.n	8000502 <HAL_GPIO_Init+0x162>
 80004d4:	d90c      	bls.n	80004f0 <HAL_GPIO_Init+0x150>
 80004d6:	4f30      	ldr	r7, [pc, #192]	; (8000598 <HAL_GPIO_Init+0x1f8>)
 80004d8:	42bd      	cmp	r5, r7
 80004da:	d012      	beq.n	8000502 <HAL_GPIO_Init+0x162>
 80004dc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80004e0:	42bd      	cmp	r5, r7
 80004e2:	d00e      	beq.n	8000502 <HAL_GPIO_Init+0x162>
 80004e4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80004e8:	42bd      	cmp	r5, r7
 80004ea:	f47f af64 	bne.w	80003b6 <HAL_GPIO_Init+0x16>
 80004ee:	e008      	b.n	8000502 <HAL_GPIO_Init+0x162>
 80004f0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80004f4:	42bd      	cmp	r5, r7
 80004f6:	d004      	beq.n	8000502 <HAL_GPIO_Init+0x162>
 80004f8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80004fc:	42bd      	cmp	r5, r7
 80004fe:	f47f af5a 	bne.w	80003b6 <HAL_GPIO_Init+0x16>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000502:	688d      	ldr	r5, [r1, #8]
 8000504:	b17d      	cbz	r5, 8000526 <HAL_GPIO_Init+0x186>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000506:	2d01      	cmp	r5, #1
 8000508:	d008      	beq.n	800051c <HAL_GPIO_Init+0x17c>
            GPIOx->BRR = ioposition;
 800050a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800050c:	2608      	movs	r6, #8
 800050e:	e752      	b.n	80003b6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000510:	68ce      	ldr	r6, [r1, #12]
 8000512:	3608      	adds	r6, #8
          break;
 8000514:	e74f      	b.n	80003b6 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000516:	68ce      	ldr	r6, [r1, #12]
 8000518:	360c      	adds	r6, #12
          break;
 800051a:	e74c      	b.n	80003b6 <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 800051c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800051e:	2608      	movs	r6, #8
 8000520:	e749      	b.n	80003b6 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000522:	2600      	movs	r6, #0
 8000524:	e747      	b.n	80003b6 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2604      	movs	r6, #4
 8000528:	e745      	b.n	80003b6 <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800052a:	f100 0e04 	add.w	lr, r0, #4
 800052e:	e746      	b.n	80003be <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000530:	f1a4 0508 	sub.w	r5, r4, #8
 8000534:	00ad      	lsls	r5, r5, #2
 8000536:	e746      	b.n	80003c6 <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000538:	2705      	movs	r7, #5
 800053a:	e788      	b.n	800044e <HAL_GPIO_Init+0xae>
 800053c:	2700      	movs	r7, #0
 800053e:	e786      	b.n	800044e <HAL_GPIO_Init+0xae>
 8000540:	2701      	movs	r7, #1
 8000542:	e784      	b.n	800044e <HAL_GPIO_Init+0xae>
 8000544:	2702      	movs	r7, #2
 8000546:	e782      	b.n	800044e <HAL_GPIO_Init+0xae>
 8000548:	2703      	movs	r7, #3
 800054a:	e780      	b.n	800044e <HAL_GPIO_Init+0xae>
 800054c:	2704      	movs	r7, #4
 800054e:	e77e      	b.n	800044e <HAL_GPIO_Init+0xae>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000550:	4d0f      	ldr	r5, [pc, #60]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000552:	682a      	ldr	r2, [r5, #0]
 8000554:	ea22 0203 	bic.w	r2, r2, r3
 8000558:	602a      	str	r2, [r5, #0]
 800055a:	e787      	b.n	800046c <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800055c:	4d0c      	ldr	r5, [pc, #48]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 800055e:	686a      	ldr	r2, [r5, #4]
 8000560:	ea22 0203 	bic.w	r2, r2, r3
 8000564:	606a      	str	r2, [r5, #4]
 8000566:	e789      	b.n	800047c <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000568:	4d09      	ldr	r5, [pc, #36]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 800056a:	68aa      	ldr	r2, [r5, #8]
 800056c:	ea22 0203 	bic.w	r2, r2, r3
 8000570:	60aa      	str	r2, [r5, #8]
 8000572:	e78b      	b.n	800048c <HAL_GPIO_Init+0xec>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000574:	4d06      	ldr	r5, [pc, #24]	; (8000590 <HAL_GPIO_Init+0x1f0>)
 8000576:	68ea      	ldr	r2, [r5, #12]
 8000578:	ea22 0303 	bic.w	r3, r2, r3
 800057c:	60eb      	str	r3, [r5, #12]
 800057e:	e78d      	b.n	800049c <HAL_GPIO_Init+0xfc>
        }
      }
    }
  }
}
 8000580:	b003      	add	sp, #12
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000
 800058c:	40010800 	.word	0x40010800
 8000590:	40010400 	.word	0x40010400
 8000594:	10210000 	.word	0x10210000
 8000598:	10310000 	.word	0x10310000

0800059c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800059c:	b912      	cbnz	r2, 80005a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800059e:	0409      	lsls	r1, r1, #16
 80005a0:	6101      	str	r1, [r0, #16]
 80005a2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80005a4:	6101      	str	r1, [r0, #16]
 80005a6:	4770      	bx	lr

080005a8 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d066      	beq.n	800067a <HAL_PCD_Init+0xd2>
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80005b2:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 80005b6:	b1c3      	cbz	r3, 80005ea <HAL_PCD_Init+0x42>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80005be:	6820      	ldr	r0, [r4, #0]
 80005c0:	f002 fadc 	bl	8002b7c <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80005c4:	4625      	mov	r5, r4
 80005c6:	f855 7b10 	ldr.w	r7, [r5], #16
 80005ca:	466e      	mov	r6, sp
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005d0:	682b      	ldr	r3, [r5, #0]
 80005d2:	6033      	str	r3, [r6, #0]
 80005d4:	1d23      	adds	r3, r4, #4
 80005d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005d8:	4638      	mov	r0, r7
 80005da:	f002 fabf 	bl	8002b5c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80005de:	2100      	movs	r1, #0
 80005e0:	6820      	ldr	r0, [r4, #0]
 80005e2:	f002 fad5 	bl	8002b90 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	e015      	b.n	8000616 <HAL_PCD_Init+0x6e>
    hpcd->Lock = HAL_UNLOCKED;
 80005ea:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
    HAL_PCD_MspInit(hpcd);
 80005ee:	f004 fb57 	bl	8004ca0 <HAL_PCD_MspInit>
 80005f2:	e7e1      	b.n	80005b8 <HAL_PCD_Init+0x10>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80005f4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80005f8:	2101      	movs	r1, #1
 80005fa:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 80005fe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000602:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000604:	2100      	movs	r1, #0
 8000606:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 800060a:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 800060c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 800060e:	1c9a      	adds	r2, r3, #2
 8000610:	0152      	lsls	r2, r2, #5
 8000612:	50a1      	str	r1, [r4, r2]
  for (index = 0; index < 15 ; index++)
 8000614:	3301      	adds	r3, #1
 8000616:	2b0e      	cmp	r3, #14
 8000618:	d9ec      	bls.n	80005f4 <HAL_PCD_Init+0x4c>
 800061a:	2300      	movs	r3, #0
 800061c:	e012      	b.n	8000644 <HAL_PCD_Init+0x9c>
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 800061e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000622:	2100      	movs	r1, #0
 8000624:	f882 1209 	strb.w	r1, [r2, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
 8000628:	f882 3208 	strb.w	r3, [r2, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 800062c:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800062e:	f882 120b 	strb.w	r1, [r2, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 8000632:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000636:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 800063a:	f103 0211 	add.w	r2, r3, #17
 800063e:	0152      	lsls	r2, r2, #5
 8000640:	50a1      	str	r1, [r4, r2]
  for (index = 0; index < 15 ; index++)
 8000642:	3301      	adds	r3, #1
 8000644:	2b0e      	cmp	r3, #14
 8000646:	d9ea      	bls.n	800061e <HAL_PCD_Init+0x76>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000648:	4625      	mov	r5, r4
 800064a:	f855 7b10 	ldr.w	r7, [r5], #16
 800064e:	466e      	mov	r6, sp
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000654:	682b      	ldr	r3, [r5, #0]
 8000656:	6033      	str	r3, [r6, #0]
 8000658:	1d23      	adds	r3, r4, #4
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	4638      	mov	r0, r7
 800065e:	f002 fa99 	bl	8002b94 <USB_DevInit>
  
  hpcd->USB_Address = 0;
 8000662:	2500      	movs	r5, #0
 8000664:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000668:	2301      	movs	r3, #1
 800066a:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 800066e:	6820      	ldr	r0, [r4, #0]
 8000670:	f002 fdaa 	bl	80031c8 <USB_DevDisconnect>
  return HAL_OK;
 8000674:	4628      	mov	r0, r5
}
 8000676:	b007      	add	sp, #28
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800067a:	2001      	movs	r0, #1
 800067c:	4770      	bx	lr

0800067e <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800067e:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8000682:	2b01      	cmp	r3, #1
 8000684:	d101      	bne.n	800068a <HAL_PCD_Start+0xc>
 8000686:	2002      	movs	r0, #2
 8000688:	4770      	bx	lr
{
 800068a:	b510      	push	{r4, lr}
 800068c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800068e:	2101      	movs	r1, #1
 8000690:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000694:	f004 fc47 	bl	8004f26 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000698:	6820      	ldr	r0, [r4, #0]
 800069a:	f002 fd93 	bl	80031c4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800069e:	6820      	ldr	r0, [r4, #0]
 80006a0:	f002 fa63 	bl	8002b6a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 80006aa:	bd10      	pop	{r4, pc}

080006ac <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80006ac:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d101      	bne.n	80006b8 <HAL_PCD_SetAddress+0xc>
 80006b4:	2002      	movs	r0, #2
 80006b6:	4770      	bx	lr
{
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80006bc:	2301      	movs	r3, #1
 80006be:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 80006c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80006c6:	6800      	ldr	r0, [r0, #0]
 80006c8:	f002 fd76 	bl	80031b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 80006d2:	bd10      	pop	{r4, pc}

080006d4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80006d4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80006d6:	b24d      	sxtb	r5, r1
 80006d8:	2d00      	cmp	r5, #0
 80006da:	db12      	blt.n	8000702 <HAL_PCD_EP_Open+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80006dc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80006e0:	0164      	lsls	r4, r4, #5
 80006e2:	f504 7402 	add.w	r4, r4, #520	; 0x208
 80006e6:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
 80006e8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80006ec:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80006ee:	0fed      	lsrs	r5, r5, #31
 80006f0:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 80006f2:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80006f4:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 80006f6:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d107      	bne.n	800070e <HAL_PCD_EP_Open+0x3a>
 80006fe:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8000700:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000702:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000706:	0164      	lsls	r4, r4, #5
 8000708:	3428      	adds	r4, #40	; 0x28
 800070a:	4404      	add	r4, r0
 800070c:	e7ec      	b.n	80006e8 <HAL_PCD_EP_Open+0x14>
 800070e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8000710:	2301      	movs	r3, #1
 8000712:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000716:	4621      	mov	r1, r4
 8000718:	6800      	ldr	r0, [r0, #0]
 800071a:	f002 fa52 	bl	8002bc2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800071e:	2000      	movs	r0, #0
 8000720:	f885 03e8 	strb.w	r0, [r5, #1000]	; 0x3e8
  return ret;
 8000724:	bd38      	pop	{r3, r4, r5, pc}

08000726 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000726:	b24a      	sxtb	r2, r1
 8000728:	2a00      	cmp	r2, #0
 800072a:	db10      	blt.n	800074e <HAL_PCD_EP_Close+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800072c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000730:	015b      	lsls	r3, r3, #5
 8000732:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000736:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7F;
 8000738:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800073c:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800073e:	0fd2      	lsrs	r2, r2, #31
 8000740:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000742:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8000746:	2a01      	cmp	r2, #1
 8000748:	d107      	bne.n	800075a <HAL_PCD_EP_Close+0x34>
 800074a:	2002      	movs	r0, #2
 800074c:	4770      	bx	lr
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800074e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000752:	015b      	lsls	r3, r3, #5
 8000754:	3328      	adds	r3, #40	; 0x28
 8000756:	4403      	add	r3, r0
 8000758:	e7ee      	b.n	8000738 <HAL_PCD_EP_Close+0x12>
{  
 800075a:	b510      	push	{r4, lr}
 800075c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800075e:	2201      	movs	r2, #1
 8000760:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000764:	4619      	mov	r1, r3
 8000766:	6800      	ldr	r0, [r0, #0]
 8000768:	f002 fbc4 	bl	8002ef4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800076c:	2000      	movs	r0, #0
 800076e:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000772:	bd10      	pop	{r4, pc}

08000774 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800077a:	016c      	lsls	r4, r5, #5
 800077c:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8000780:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000782:	4404      	add	r4, r0
 8000784:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
  ep->xfer_len = len;
 8000788:	f105 0211 	add.w	r2, r5, #17
 800078c:	0152      	lsls	r2, r2, #5
 800078e:	1886      	adds	r6, r0, r2
 8000790:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	6073      	str	r3, [r6, #4]
  ep->is_in = 0;
 8000796:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 800079a:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 800079e:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d00f      	beq.n	80007c6 <HAL_PCD_EP_Receive+0x52>
 80007a6:	4604      	mov	r4, r0
 80007a8:	2301      	movs	r3, #1
 80007aa:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 80007ae:	b935      	cbnz	r5, 80007be <HAL_PCD_EP_Receive+0x4a>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80007b0:	6800      	ldr	r0, [r0, #0]
 80007b2:	f002 fd26 	bl	8003202 <USB_EPStartXfer>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance , ep);
 80007be:	6800      	ldr	r0, [r0, #0]
 80007c0:	f002 fd1f 	bl	8003202 <USB_EPStartXfer>
 80007c4:	e7f7      	b.n	80007b6 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80007c6:	2002      	movs	r0, #2
}
 80007c8:	bd70      	pop	{r4, r5, r6, pc}

080007ca <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80007ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80007ce:	3111      	adds	r1, #17
 80007d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80007d4:	8888      	ldrh	r0, [r1, #4]
 80007d6:	4770      	bx	lr

080007d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80007de:	016c      	lsls	r4, r5, #5
 80007e0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80007e4:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80007e6:	4404      	add	r4, r0
 80007e8:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80007ea:	1caa      	adds	r2, r5, #2
 80007ec:	0152      	lsls	r2, r2, #5
 80007ee:	1886      	adds	r6, r0, r2
 80007f0:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	6073      	str	r3, [r6, #4]
  ep->is_in = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 80007fc:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8000800:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8000804:	2b01      	cmp	r3, #1
 8000806:	d00f      	beq.n	8000828 <HAL_PCD_EP_Transmit+0x50>
 8000808:	4604      	mov	r4, r0
 800080a:	2301      	movs	r3, #1
 800080c:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 8000810:	b935      	cbnz	r5, 8000820 <HAL_PCD_EP_Transmit+0x48>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000812:	6800      	ldr	r0, [r0, #0]
 8000814:	f002 fcf5 	bl	8003202 <USB_EPStartXfer>
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  
  __HAL_UNLOCK(hpcd);
 8000818:	2000      	movs	r0, #0
 800081a:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 800081e:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance , ep);
 8000820:	6800      	ldr	r0, [r0, #0]
 8000822:	f002 fcee 	bl	8003202 <USB_EPStartXfer>
 8000826:	e7f7      	b.n	8000818 <HAL_PCD_EP_Transmit+0x40>
  __HAL_LOCK(hpcd);
 8000828:	2002      	movs	r0, #2
}
 800082a:	bd70      	pop	{r4, r5, r6, pc}

0800082c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	4605      	mov	r5, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000832:	2300      	movs	r3, #0
 8000834:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8000838:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800083c:	e195      	b.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800083e:	8803      	ldrh	r3, [r0, #0]
 8000840:	b29b      	uxth	r3, r3
 8000842:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800084a:	b29b      	uxth	r3, r3
 800084c:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800084e:	682a      	ldr	r2, [r5, #0]
 8000850:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000854:	b29b      	uxth	r3, r3
 8000856:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800085a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800085e:	3302      	adds	r3, #2
 8000860:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000864:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800086c:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800086e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000870:	4413      	add	r3, r2
 8000872:	63eb      	str	r3, [r5, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	4628      	mov	r0, r5
 8000878:	f004 fa44 	bl	8004d04 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800087c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000880:	2b00      	cmp	r3, #0
 8000882:	f000 8172 	beq.w	8000b6a <PCD_EP_ISR_Handler+0x33e>
 8000886:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000888:	2b00      	cmp	r3, #0
 800088a:	f040 816e 	bne.w	8000b6a <PCD_EP_ISR_Handler+0x33e>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800088e:	682a      	ldr	r2, [r5, #0]
 8000890:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80008a2:	e162      	b.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f895 2208 	ldrb.w	r2, [r5, #520]	; 0x208
 80008ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008b2:	3306      	adds	r3, #6
 80008b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80008bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008c0:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008c4:	f8b5 220c 	ldrh.w	r2, [r5, #524]	; 0x20c
 80008c8:	f505 717b 	add.w	r1, r5, #1004	; 0x3ec
 80008cc:	f002 fdff 	bl	80034ce <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008d0:	682a      	ldr	r2, [r5, #0]
 80008d2:	8813      	ldrh	r3, [r2, #0]
 80008d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d8:	051b      	lsls	r3, r3, #20
 80008da:	0d1b      	lsrs	r3, r3, #20
 80008dc:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80008de:	4628      	mov	r0, r5
 80008e0:	f004 f9fe 	bl	8004ce0 <HAL_PCD_SetupStageCallback>
 80008e4:	e141      	b.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0)
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80008e6:	f8b5 220c 	ldrh.w	r2, [r5, #524]	; 0x20c
 80008ea:	f8d5 121c 	ldr.w	r1, [r5, #540]	; 0x21c
 80008ee:	f002 fdee 	bl	80034ce <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80008f2:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 80008f6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80008fa:	4413      	add	r3, r2
 80008fc:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 8000900:	e172      	b.n	8000be8 <PCD_EP_ISR_Handler+0x3bc>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000902:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8000906:	f011 0f01 	tst.w	r1, #1
 800090a:	d001      	beq.n	8000910 <PCD_EP_ISR_Handler+0xe4>
 800090c:	3201      	adds	r2, #1
 800090e:	b292      	uxth	r2, r2
 8000910:	0292      	lsls	r2, r2, #10
 8000912:	b292      	uxth	r2, r2
 8000914:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8000918:	e184      	b.n	8000c24 <PCD_EP_ISR_Handler+0x3f8>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800091a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800091e:	b29b      	uxth	r3, r3
 8000920:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000924:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000928:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800092c:	d136      	bne.n	800099c <PCD_EP_ISR_Handler+0x170>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800092e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000932:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000936:	f000 8118 	beq.w	8000b6a <PCD_EP_ISR_Handler+0x33e>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800093a:	682a      	ldr	r2, [r5, #0]
 800093c:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8000940:	b29b      	uxth	r3, r3
 8000942:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800094a:	b29b      	uxth	r3, r3
 800094c:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8000950:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000954:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000958:	2b00      	cmp	r3, #0
 800095a:	f040 80b6 	bne.w	8000aca <PCD_EP_ISR_Handler+0x29e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800095e:	6828      	ldr	r0, [r5, #0]
 8000960:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000964:	b29b      	uxth	r3, r3
 8000966:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 800096a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800096e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000972:	3302      	adds	r3, #2
 8000974:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000978:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800097c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000980:	1ca2      	adds	r2, r4, #2
 8000982:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8000986:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0)
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80cd 	beq.w	8000b28 <PCD_EP_ISR_Handler+0x2fc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800098e:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000992:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000994:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000996:	f002 fc1f 	bl	80031d8 <USB_WritePMA>
 800099a:	e0c5      	b.n	8000b28 <PCD_EP_ISR_Handler+0x2fc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800099c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80009a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a4:	051b      	lsls	r3, r3, #20
 80009a6:	0d1b      	lsrs	r3, r3, #20
 80009a8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0)
 80009ac:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80009b0:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 80009b4:	b9db      	cbnz	r3, 80009ee <PCD_EP_ISR_Handler+0x1c2>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009b6:	6828      	ldr	r0, [r5, #0]
 80009b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009bc:	b29b      	uxth	r3, r3
 80009be:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 80009c2:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 80009c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009ca:	3306      	adds	r3, #6
 80009cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009d0:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80009d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80009d8:	b38e      	cbz	r6, 8000a3e <PCD_EP_ISR_Handler+0x212>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009da:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80009de:	4633      	mov	r3, r6
 80009e0:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 80009e4:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80009e8:	f002 fd71 	bl	80034ce <USB_ReadPMA>
 80009ec:	e027      	b.n	8000a3e <PCD_EP_ISR_Handler+0x212>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80009ee:	6828      	ldr	r0, [r5, #0]
 80009f0:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80009f4:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 80009f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80009fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000a00:	d043      	beq.n	8000a8a <PCD_EP_ISR_Handler+0x25e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a02:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a12:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8000a16:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000a1a:	bb66      	cbnz	r6, 8000a76 <PCD_EP_ISR_Handler+0x24a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000a1c:	682a      	ldr	r2, [r5, #0]
 8000a1e:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000a22:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8000a26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2e:	051b      	lsls	r3, r3, #20
 8000a30:	0d1b      	lsrs	r3, r3, #20
 8000a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a3a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 8000a3e:	f104 0311 	add.w	r3, r4, #17
 8000a42:	015b      	lsls	r3, r3, #5
 8000a44:	18e9      	adds	r1, r5, r3
 8000a46:	684a      	ldr	r2, [r1, #4]
 8000a48:	4432      	add	r2, r6
 8000a4a:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 8000a4c:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000a50:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
 8000a54:	4432      	add	r2, r6
 8000a56:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000a5a:	58eb      	ldr	r3, [r5, r3]
 8000a5c:	b11b      	cbz	r3, 8000a66 <PCD_EP_ISR_Handler+0x23a>
 8000a5e:	f8d1 1218 	ldr.w	r1, [r1, #536]	; 0x218
 8000a62:	428e      	cmp	r6, r1
 8000a64:	d229      	bcs.n	8000aba <PCD_EP_ISR_Handler+0x28e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a66:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000a6a:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f004 f93e 	bl	8004cf0 <HAL_PCD_DataOutStageCallback>
 8000a74:	e75b      	b.n	800092e <PCD_EP_ISR_Handler+0x102>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000a76:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000a7a:	4633      	mov	r3, r6
 8000a7c:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 8000a80:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000a84:	f002 fd23 	bl	80034ce <USB_ReadPMA>
 8000a88:	e7c8      	b.n	8000a1c <PCD_EP_ISR_Handler+0x1f0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000a8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a94:	3306      	adds	r3, #6
 8000a96:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a9a:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8000a9e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d0ba      	beq.n	8000a1c <PCD_EP_ISR_Handler+0x1f0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000aa6:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000aaa:	4633      	mov	r3, r6
 8000aac:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8000ab0:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000ab4:	f002 fd0b 	bl	80034ce <USB_ReadPMA>
 8000ab8:	e7b0      	b.n	8000a1c <PCD_EP_ISR_Handler+0x1f0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000aba:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000abe:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f7ff fe56 	bl	8000774 <HAL_PCD_EP_Receive>
 8000ac8:	e731      	b.n	800092e <PCD_EP_ISR_Handler+0x102>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000aca:	6828      	ldr	r0, [r5, #0]
 8000acc:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000ad0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000ad4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000ad8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000adc:	f000 80b8 	beq.w	8000c50 <PCD_EP_ISR_Handler+0x424>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ae0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000aea:	3302      	adds	r3, #2
 8000aec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000af8:	1ca2      	adds	r2, r4, #2
 8000afa:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8000afe:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0)
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	f040 809e 	bne.w	8000c42 <PCD_EP_ISR_Handler+0x416>
            if (ep->xfer_count != 0)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b06:	682a      	ldr	r2, [r5, #0]
 8000b08:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000b0c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b10:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b18:	051b      	lsls	r3, r3, #20
 8000b1a:	0d1b      	lsrs	r3, r3, #20
 8000b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b28:	682a      	ldr	r2, [r5, #0]
 8000b2a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 8000b34:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000b38:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000b46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b4a:	1ca3      	adds	r3, r4, #2
 8000b4c:	015b      	lsls	r3, r3, #5
 8000b4e:	18e9      	adds	r1, r5, r3
 8000b50:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8000b52:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000b54:	440a      	add	r2, r1
 8000b56:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000b58:	58eb      	ldr	r3, [r5, r3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8092 	bne.w	8000c84 <PCD_EP_ISR_Handler+0x458>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b60:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8000b64:	4628      	mov	r0, r5
 8000b66:	f004 f8cd 	bl	8004d04 <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000b6a:	6828      	ldr	r0, [r5, #0]
 8000b6c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000b76:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b7a:	f000 808b 	beq.w	8000c94 <PCD_EP_ISR_Handler+0x468>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000b7e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    if (epindex == 0)
 8000b82:	f014 040f 	ands.w	r4, r4, #15
 8000b86:	f47f aec8 	bne.w	800091a <PCD_EP_ISR_Handler+0xee>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000b8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b8e:	f013 0f10 	tst.w	r3, #16
 8000b92:	f43f ae54 	beq.w	800083e <PCD_EP_ISR_Handler+0x12>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000b96:	8803      	ldrh	r3, [r0, #0]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f8ad 3004 	strh.w	r3, [sp, #4]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000b9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000ba2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000ba6:	f47f ae7d 	bne.w	80008a4 <PCD_EP_ISR_Handler+0x78>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000baa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000bae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000bb2:	d0da      	beq.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bb4:	8803      	ldrh	r3, [r0, #0]
 8000bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bba:	051b      	lsls	r3, r3, #20
 8000bbc:	0d1b      	lsrs	r3, r3, #20
 8000bbe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bc0:	6828      	ldr	r0, [r5, #0]
 8000bc2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f895 2208 	ldrb.w	r2, [r5, #520]	; 0x208
 8000bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bd6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bde:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
          if (ep->xfer_count != 0)
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f ae7f 	bne.w	80008e6 <PCD_EP_ISR_Handler+0xba>
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	4628      	mov	r0, r5
 8000bec:	f004 f880 	bl	8004cf0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000bf0:	682a      	ldr	r2, [r5, #0]
 8000bf2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3306      	adds	r3, #6
 8000bfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bfe:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8000c02:	293e      	cmp	r1, #62	; 0x3e
 8000c04:	f67f ae7d 	bls.w	8000902 <PCD_EP_ISR_Handler+0xd6>
 8000c08:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8000c0c:	f011 0f1f 	tst.w	r1, #31
 8000c10:	d101      	bne.n	8000c16 <PCD_EP_ISR_Handler+0x3ea>
 8000c12:	3a01      	subs	r2, #1
 8000c14:	b292      	uxth	r2, r2
 8000c16:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8000c1a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c24:	682a      	ldr	r2, [r5, #0]
 8000c26:	8813      	ldrh	r3, [r2, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c32:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3e:	8013      	strh	r3, [r2, #0]
 8000c40:	e793      	b.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000c42:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000c46:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8000c48:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c4a:	f002 fac5 	bl	80031d8 <USB_WritePMA>
 8000c4e:	e75a      	b.n	8000b06 <PCD_EP_ISR_Handler+0x2da>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c5a:	3306      	adds	r3, #6
 8000c5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c60:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c68:	1ca2      	adds	r2, r4, #2
 8000c6a:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8000c6e:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0)
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f43f af48 	beq.w	8000b06 <PCD_EP_ISR_Handler+0x2da>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000c76:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8000c7a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000c7c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c7e:	f002 faab 	bl	80031d8 <USB_WritePMA>
 8000c82:	e740      	b.n	8000b06 <PCD_EP_ISR_Handler+0x2da>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c84:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8000c88:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f7ff fda3 	bl	80007d8 <HAL_PCD_EP_Transmit>
 8000c92:	e76a      	b.n	8000b6a <PCD_EP_ISR_Handler+0x33e>
        }
      } 
    }
  }
  return HAL_OK;
}
 8000c94:	2000      	movs	r0, #0
 8000c96:	b002      	add	sp, #8
 8000c98:	bd70      	pop	{r4, r5, r6, pc}

08000c9a <HAL_PCD_IRQHandler>:
{
 8000c9a:	b510      	push	{r4, lr}
 8000c9c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000c9e:	6800      	ldr	r0, [r0, #0]
 8000ca0:	f002 fa94 	bl	80031cc <USB_ReadInterrupts>
 8000ca4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000ca8:	d145      	bne.n	8000d36 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000caa:	6820      	ldr	r0, [r4, #0]
 8000cac:	f002 fa8e 	bl	80031cc <USB_ReadInterrupts>
 8000cb0:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8000cb4:	d143      	bne.n	8000d3e <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000cb6:	6820      	ldr	r0, [r4, #0]
 8000cb8:	f002 fa88 	bl	80031cc <USB_ReadInterrupts>
 8000cbc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000cc0:	d008      	beq.n	8000cd4 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000cd4:	6820      	ldr	r0, [r4, #0]
 8000cd6:	f002 fa79 	bl	80031cc <USB_ReadInterrupts>
 8000cda:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000cde:	d008      	beq.n	8000cf2 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000cf2:	6820      	ldr	r0, [r4, #0]
 8000cf4:	f002 fa6a 	bl	80031cc <USB_ReadInterrupts>
 8000cf8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000cfc:	d130      	bne.n	8000d60 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000cfe:	6820      	ldr	r0, [r4, #0]
 8000d00:	f002 fa64 	bl	80031cc <USB_ReadInterrupts>
 8000d04:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8000d08:	d145      	bne.n	8000d96 <HAL_PCD_IRQHandler+0xfc>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000d0a:	6820      	ldr	r0, [r4, #0]
 8000d0c:	f002 fa5e 	bl	80031cc <USB_ReadInterrupts>
 8000d10:	f410 7f00 	tst.w	r0, #512	; 0x200
 8000d14:	d162      	bne.n	8000ddc <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000d16:	6820      	ldr	r0, [r4, #0]
 8000d18:	f002 fa58 	bl	80031cc <USB_ReadInterrupts>
 8000d1c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8000d20:	d008      	beq.n	8000d34 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000d22:	6822      	ldr	r2, [r4, #0]
 8000d24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000d34:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff fd78 	bl	800082c <PCD_EP_ISR_Handler>
 8000d3c:	e7b5      	b.n	8000caa <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d50:	4620      	mov	r0, r4
 8000d52:	f003 ffe6 	bl	8004d22 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fca7 	bl	80006ac <HAL_PCD_SetAddress>
 8000d5e:	e7aa      	b.n	8000cb6 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000d60:	6822      	ldr	r2, [r4, #0]
 8000d62:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f023 0304 	bic.w	r3, r3, #4
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8000d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f003 ffed 	bl	8004d5c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000d94:	e7b3      	b.n	8000cfe <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000d96:	6822      	ldr	r2, [r4, #0]
 8000d98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000da8:	6822      	ldr	r2, [r4, #0]
 8000daa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	f002 f9ff 	bl	80031cc <USB_ReadInterrupts>
 8000dce:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000dd2:	d19a      	bne.n	8000d0a <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f003 ffb1 	bl	8004d3c <HAL_PCD_SuspendCallback>
 8000dda:	e796      	b.n	8000d0a <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000dee:	4620      	mov	r0, r4
 8000df0:	f003 ff91 	bl	8004d16 <HAL_PCD_SOFCallback>
 8000df4:	e78f      	b.n	8000d16 <HAL_PCD_IRQHandler+0x7c>

08000df6 <HAL_PCD_EP_SetStall>:
{
 8000df6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8000df8:	b24a      	sxtb	r2, r1
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	db10      	blt.n	8000e20 <HAL_PCD_EP_SetStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 8000dfe:	014b      	lsls	r3, r1, #5
 8000e00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e04:	4403      	add	r3, r0
  ep->is_stall = 1;
 8000e06:	2401      	movs	r4, #1
 8000e08:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8000e0a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000e0e:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000e10:	0fd2      	lsrs	r2, r2, #31
 8000e12:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8000e14:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d107      	bne.n	8000e2c <HAL_PCD_EP_SetStall+0x36>
 8000e1c:	2002      	movs	r0, #2
}
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000e20:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000e24:	015b      	lsls	r3, r3, #5
 8000e26:	3328      	adds	r3, #40	; 0x28
 8000e28:	4403      	add	r3, r0
 8000e2a:	e7ec      	b.n	8000e06 <HAL_PCD_EP_SetStall+0x10>
 8000e2c:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8000e34:	4619      	mov	r1, r3
 8000e36:	6800      	ldr	r0, [r0, #0]
 8000e38:	f002 f93e 	bl	80030b8 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000e3c:	b11c      	cbz	r4, 8000e46 <HAL_PCD_EP_SetStall+0x50>
  __HAL_UNLOCK(hpcd); 
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f885 03e8 	strb.w	r0, [r5, #1000]	; 0x3e8
  return HAL_OK;
 8000e44:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e46:	f505 717b 	add.w	r1, r5, #1004	; 0x3ec
 8000e4a:	6828      	ldr	r0, [r5, #0]
 8000e4c:	f002 f9c2 	bl	80031d4 <USB_EP0_OutStart>
 8000e50:	e7f5      	b.n	8000e3e <HAL_PCD_EP_SetStall+0x48>

08000e52 <HAL_PCD_EP_ClrStall>:
{
 8000e52:	b510      	push	{r4, lr}
  if ((0x80 & ep_addr) == 0x80)
 8000e54:	b24a      	sxtb	r2, r1
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	db10      	blt.n	8000e7c <HAL_PCD_EP_ClrStall+0x2a>
    ep = &hpcd->OUT_ep[ep_addr];
 8000e5a:	014b      	lsls	r3, r1, #5
 8000e5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e60:	4403      	add	r3, r0
  ep->is_stall = 0;
 8000e62:	2400      	movs	r4, #0
 8000e64:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8000e66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e6a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000e6c:	0fd2      	lsrs	r2, r2, #31
 8000e6e:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8000e70:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d107      	bne.n	8000e88 <HAL_PCD_EP_ClrStall+0x36>
 8000e78:	2002      	movs	r0, #2
}
 8000e7a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000e7c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8000e80:	015b      	lsls	r3, r3, #5
 8000e82:	3328      	adds	r3, #40	; 0x28
 8000e84:	4403      	add	r3, r0
 8000e86:	e7ec      	b.n	8000e62 <HAL_PCD_EP_ClrStall+0x10>
 8000e88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8000e90:	4619      	mov	r1, r3
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	f002 f947 	bl	8003126 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000e9e:	bd10      	pop	{r4, pc}

08000ea0 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8000ea0:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d014      	beq.n	8000ed2 <HAL_PCD_EP_Flush+0x32>
{
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000eac:	2301      	movs	r3, #1
 8000eae:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  if ((ep_addr & 0x80) == 0x80)
 8000eb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000eb6:	d106      	bne.n	8000ec6 <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 8000eb8:	6800      	ldr	r0, [r0, #0]
 8000eba:	f001 fe80 	bl	8002bbe <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd); 
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8000ec4:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8000ec6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000eca:	6800      	ldr	r0, [r0, #0]
 8000ecc:	f001 fe75 	bl	8002bba <USB_FlushTxFifo>
 8000ed0:	e7f5      	b.n	8000ebe <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8000ed6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000eda:	d00c      	beq.n	8000ef6 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000edc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000ee0:	0149      	lsls	r1, r1, #5
 8000ee2:	3128      	adds	r1, #40	; 0x28
 8000ee4:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000ee6:	b15a      	cbz	r2, 8000f00 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8000eec:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8000ef6:	0149      	lsls	r1, r1, #5
 8000ef8:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8000efc:	4401      	add	r1, r0
 8000efe:	e7f2      	b.n	8000ee6 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0;
 8000f00:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000f02:	808b      	strh	r3, [r1, #4]
 8000f04:	e7f5      	b.n	8000ef2 <HAL_PCDEx_PMAConfig+0x1c>
	...

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b530      	push	{r4, r5, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0e:	6803      	ldr	r3, [r0, #0]
 8000f10:	f013 0f01 	tst.w	r3, #1
 8000f14:	d05c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f16:	4bb0      	ldr	r3, [pc, #704]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d03f      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f22:	4bad      	ldr	r3, [pc, #692]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d034      	beq.n	8000f98 <HAL_RCC_OscConfig+0x90>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	f000 8087 	beq.w	8001046 <HAL_RCC_OscConfig+0x13e>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f040 808a 	bne.w	8001052 <HAL_RCC_OscConfig+0x14a>
 8000f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f54:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 8094 	beq.w	8001086 <HAL_RCC_OscConfig+0x17e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff f98f 	bl	8000280 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f68:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6c:	4b9a      	ldr	r3, [pc, #616]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	f013 0f01 	tst.w	r3, #1
 8000f88:	d122      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xc8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8a:	f7ff f979 	bl	8000280 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	2864      	cmp	r0, #100	; 0x64
 8000f92:	d9e7      	bls.n	8000f64 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
 8000f96:	e29c      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fa0:	d0c5      	beq.n	8000f2e <HAL_RCC_OscConfig+0x26>
 8000fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	f013 0f01 	tst.w	r3, #1
 8000fc6:	d003      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xc8>
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 827a 	beq.w	80014c4 <HAL_RCC_OscConfig+0x5bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	f013 0f02 	tst.w	r3, #2
 8000fd6:	f000 809c 	beq.w	8001112 <HAL_RCC_OscConfig+0x20a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f013 0f0c 	tst.w	r3, #12
 8000fe2:	d072      	beq.n	80010ca <HAL_RCC_OscConfig+0x1c2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fe4:	4b7c      	ldr	r3, [pc, #496]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d067      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff0:	6923      	ldr	r3, [r4, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80c8 	beq.w	8001188 <HAL_RCC_OscConfig+0x280>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001008:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800100c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff f937 	bl	8000280 <HAL_GetTick>
 8001012:	4605      	mov	r5, r0
 8001014:	2302      	movs	r3, #2
 8001016:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2302      	movs	r3, #2
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	f013 0f01 	tst.w	r3, #1
 8001034:	f040 8099 	bne.w	800116a <HAL_RCC_OscConfig+0x262>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff f922 	bl	8000280 <HAL_GetTick>
 800103c:	1b40      	subs	r0, r0, r5
 800103e:	2802      	cmp	r0, #2
 8001040:	d9e8      	bls.n	8001014 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e245      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	4a64      	ldr	r2, [pc, #400]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e781      	b.n	8000f56 <HAL_RCC_OscConfig+0x4e>
 8001052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001056:	d009      	beq.n	800106c <HAL_RCC_OscConfig+0x164>
 8001058:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e774      	b.n	8000f56 <HAL_RCC_OscConfig+0x4e>
 800106c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001070:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e767      	b.n	8000f56 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001086:	f7ff f8fb 	bl	8000280 <HAL_GetTick>
 800108a:	4605      	mov	r5, r0
 800108c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001090:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001094:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	f013 0f01 	tst.w	r3, #1
 80010b0:	d08e      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xc8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b2:	f7ff f8e5 	bl	8000280 <HAL_GetTick>
 80010b6:	1b40      	subs	r0, r0, r5
 80010b8:	2864      	cmp	r0, #100	; 0x64
 80010ba:	d9e7      	bls.n	800108c <HAL_RCC_OscConfig+0x184>
            return HAL_TIMEOUT;
 80010bc:	2003      	movs	r0, #3
 80010be:	e208      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c0:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010c8:	d192      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xe8>
 80010ca:	2302      	movs	r3, #2
 80010cc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2302      	movs	r3, #2
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	fa22 f303 	lsr.w	r3, r2, r3
 80010e6:	f013 0f01 	tst.w	r3, #1
 80010ea:	d004      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1ee>
 80010ec:	6923      	ldr	r3, [r4, #16]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1ee>
        return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e1ed      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4838      	ldr	r0, [pc, #224]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 80010f8:	6803      	ldr	r3, [r0, #0]
 80010fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010fe:	6961      	ldr	r1, [r4, #20]
 8001100:	22f8      	movs	r2, #248	; 0xf8
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	fab2 f282 	clz	r2, r2
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	4313      	orrs	r3, r2
 8001110:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f013 0f08 	tst.w	r3, #8
 8001118:	d065      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111a:	69a3      	ldr	r3, [r4, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 809f 	beq.w	8001260 <HAL_RCC_OscConfig+0x358>
 8001122:	2201      	movs	r2, #1
 8001124:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	492b      	ldr	r1, [pc, #172]	; (80011dc <HAL_RCC_OscConfig+0x2d4>)
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff f8a5 	bl	8000280 <HAL_GetTick>
 8001136:	4605      	mov	r5, r0
 8001138:	2302      	movs	r3, #2
 800113a:	fa93 f2a3 	rbit	r2, r3
 800113e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 8001144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	f013 0f01 	tst.w	r3, #1
 800115a:	d141      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff f890 	bl	8000280 <HAL_GetTick>
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	2802      	cmp	r0, #2
 8001164:	d9e8      	bls.n	8001138 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
 8001168:	e1b3      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	481b      	ldr	r0, [pc, #108]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 800116c:	6803      	ldr	r3, [r0, #0]
 800116e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001172:	6961      	ldr	r1, [r4, #20]
 8001174:	22f8      	movs	r2, #248	; 0xf8
 8001176:	fa92 f2a2 	rbit	r2, r2
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4313      	orrs	r3, r2
 8001184:	6003      	str	r3, [r0, #0]
 8001186:	e7c4      	b.n	8001112 <HAL_RCC_OscConfig+0x20a>
 8001188:	2301      	movs	r3, #1
 800118a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001198:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011a0:	f7ff f86e 	bl	8000280 <HAL_GetTick>
 80011a4:	4605      	mov	r5, r0
 80011a6:	2302      	movs	r3, #2
 80011a8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_OscConfig+0x2d0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2302      	movs	r3, #2
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	f013 0f01 	tst.w	r3, #1
 80011c6:	d0a4      	beq.n	8001112 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff f85a 	bl	8000280 <HAL_GetTick>
 80011cc:	1b40      	subs	r0, r0, r5
 80011ce:	2802      	cmp	r0, #2
 80011d0:	d9e9      	bls.n	80011a6 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 80011d2:	2003      	movs	r0, #3
 80011d4:	e17d      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42420480 	.word	0x42420480
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff f853 	bl	800028c <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f013 0f04 	tst.w	r3, #4
 80011ec:	d15d      	bne.n	80012aa <HAL_RCC_OscConfig+0x3a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ee:	69e3      	ldr	r3, [r4, #28]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 816d 	beq.w	80014d0 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f6:	4ab9      	ldr	r2, [pc, #740]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 80011f8:	6852      	ldr	r2, [r2, #4]
 80011fa:	f002 020c 	and.w	r2, r2, #12
 80011fe:	2a08      	cmp	r2, #8
 8001200:	f000 8169 	beq.w	80014d6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001204:	2b02      	cmp	r3, #2
 8001206:	f000 80f0 	beq.w	80013ea <HAL_RCC_OscConfig+0x4e2>
 800120a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800121c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff f82c 	bl	8000280 <HAL_GetTick>
 8001228:	4604      	mov	r4, r0
 800122a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001232:	4baa      	ldr	r3, [pc, #680]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	f013 0f01 	tst.w	r3, #1
 800124e:	f000 8137 	beq.w	80014c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff f815 	bl	8000280 <HAL_GetTick>
 8001256:	1b00      	subs	r0, r0, r4
 8001258:	2802      	cmp	r0, #2
 800125a:	d9e6      	bls.n	800122a <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 800125c:	2003      	movs	r0, #3
 800125e:	e138      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
 8001260:	2301      	movs	r3, #1
 8001262:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	2100      	movs	r1, #0
 800126c:	4a9c      	ldr	r2, [pc, #624]	; (80014e0 <HAL_RCC_OscConfig+0x5d8>)
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      tickstart = HAL_GetTick();
 8001272:	f7ff f805 	bl	8000280 <HAL_GetTick>
 8001276:	4605      	mov	r5, r0
 8001278:	2302      	movs	r3, #2
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	fa93 f2a3 	rbit	r2, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	4a96      	ldr	r2, [pc, #600]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	f013 0f01 	tst.w	r3, #1
 800129a:	d0a4      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7fe fff0 	bl	8000280 <HAL_GetTick>
 80012a0:	1b40      	subs	r0, r0, r5
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d9e8      	bls.n	8001278 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 80012a6:	2003      	movs	r0, #3
 80012a8:	e113      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b8c      	ldr	r3, [pc, #560]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b2:	61da      	str	r2, [r3, #28]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012be:	4a89      	ldr	r2, [pc, #548]	; (80014e4 <HAL_RCC_OscConfig+0x5dc>)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012c8:	f7fe ffda 	bl	8000280 <HAL_GetTick>
 80012cc:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x5dc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d8:	f7fe ffd2 	bl	8000280 <HAL_GetTick>
 80012dc:	1b40      	subs	r0, r0, r5
 80012de:	2864      	cmp	r0, #100	; 0x64
 80012e0:	d9f5      	bls.n	80012ce <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e0f5      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	68e3      	ldr	r3, [r4, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0x40c>
 80012ec:	b9c3      	cbnz	r3, 8001320 <HAL_RCC_OscConfig+0x418>
 80012ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	f022 0204 	bic.w	r2, r2, #4
 8001304:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d045      	beq.n	8001398 <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 800130c:	f7fe ffb8 	bl	8000280 <HAL_GetTick>
 8001310:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	e032      	b.n	800137a <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	4a71      	ldr	r2, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001316:	6a13      	ldr	r3, [r2, #32]
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	e7f2      	b.n	8001306 <HAL_RCC_OscConfig+0x3fe>
 8001320:	2b05      	cmp	r3, #5
 8001322:	d009      	beq.n	8001338 <HAL_RCC_OscConfig+0x430>
 8001324:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	f022 0204 	bic.w	r2, r2, #4
 8001334:	621a      	str	r2, [r3, #32]
 8001336:	e7e6      	b.n	8001306 <HAL_RCC_OscConfig+0x3fe>
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	f042 0204 	orr.w	r2, r2, #4
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	621a      	str	r2, [r3, #32]
 800134a:	e7dc      	b.n	8001306 <HAL_RCC_OscConfig+0x3fe>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	2302      	movs	r3, #2
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	f013 0f01 	tst.w	r3, #1
 8001366:	f47f af42 	bne.w	80011ee <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7fe ff89 	bl	8000280 <HAL_GetTick>
 800136e:	1b40      	subs	r0, r0, r5
 8001370:	f241 3388 	movw	r3, #5000	; 0x1388
 8001374:	4298      	cmp	r0, r3
 8001376:	f200 80a7 	bhi.w	80014c8 <HAL_RCC_OscConfig+0x5c0>
 800137a:	2302      	movs	r3, #2
 800137c:	fa93 f2a3 	rbit	r2, r3
 8001380:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	2b02      	cmp	r3, #2
 8001390:	d0dc      	beq.n	800134c <HAL_RCC_OscConfig+0x444>
 8001392:	4b52      	ldr	r3, [pc, #328]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001396:	e7db      	b.n	8001350 <HAL_RCC_OscConfig+0x448>
      tickstart = HAL_GetTick();
 8001398:	f7fe ff72 	bl	8000280 <HAL_GetTick>
 800139c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x4c4>
 80013a0:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	2302      	movs	r3, #2
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	f013 0f01 	tst.w	r3, #1
 80013ba:	f43f af18 	beq.w	80011ee <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7fe ff5f 	bl	8000280 <HAL_GetTick>
 80013c2:	1b40      	subs	r0, r0, r5
 80013c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d87f      	bhi.n	80014cc <HAL_RCC_OscConfig+0x5c4>
 80013cc:	2302      	movs	r3, #2
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d0dd      	beq.n	80013a0 <HAL_RCC_OscConfig+0x498>
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 80013e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e8:	e7dc      	b.n	80013a4 <HAL_RCC_OscConfig+0x49c>
 80013ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80013fc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001404:	f7fe ff3c 	bl	8000280 <HAL_GetTick>
 8001408:	4605      	mov	r5, r0
 800140a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	f013 0f01 	tst.w	r3, #1
 800142e:	d006      	beq.n	800143e <HAL_RCC_OscConfig+0x536>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7fe ff26 	bl	8000280 <HAL_GetTick>
 8001434:	1b40      	subs	r0, r0, r5
 8001436:	2802      	cmp	r0, #2
 8001438:	d9e7      	bls.n	800140a <HAL_RCC_OscConfig+0x502>
            return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e049      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143e:	6a23      	ldr	r3, [r4, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d032      	beq.n	80014ac <HAL_RCC_OscConfig+0x5a4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001446:	4925      	ldr	r1, [pc, #148]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001448:	684b      	ldr	r3, [r1, #4]
 800144a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800144e:	6a22      	ldr	r2, [r4, #32]
 8001450:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001452:	4302      	orrs	r2, r0
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800146a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001472:	f7fe ff05 	bl	8000280 <HAL_GetTick>
 8001476:	4604      	mov	r4, r0
 8001478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	f013 0f01 	tst.w	r3, #1
 800149c:	d10e      	bne.n	80014bc <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7fe feef 	bl	8000280 <HAL_GetTick>
 80014a2:	1b00      	subs	r0, r0, r4
 80014a4:	2802      	cmp	r0, #2
 80014a6:	d9e7      	bls.n	8001478 <HAL_RCC_OscConfig+0x570>
            return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
 80014aa:	e012      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_RCC_OscConfig+0x5d4>)
 80014ae:	6853      	ldr	r3, [r2, #4]
 80014b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014b4:	68a1      	ldr	r1, [r4, #8]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6053      	str	r3, [r2, #4]
 80014ba:	e7c4      	b.n	8001446 <HAL_RCC_OscConfig+0x53e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80014bc:	2000      	movs	r0, #0
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
 80014c0:	2000      	movs	r0, #0
 80014c2:	e006      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	e004      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
          return HAL_TIMEOUT;
 80014c8:	2003      	movs	r0, #3
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
          return HAL_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
}
 80014d2:	b003      	add	sp, #12
 80014d4:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e7fb      	b.n	80014d2 <HAL_RCC_OscConfig+0x5ca>
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	42420480 	.word	0x42420480
 80014e4:	40007000 	.word	0x40007000

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ec:	4c1c      	ldr	r4, [pc, #112]	; (8001560 <HAL_RCC_GetSysClockFreq+0x78>)
 80014ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014f2:	f10d 0e18 	add.w	lr, sp, #24
 80014f6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80014fa:	8a23      	ldrh	r3, [r4, #16]
 80014fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001502:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	f003 020c 	and.w	r2, r3, #12
 8001508:	2a08      	cmp	r2, #8
 800150a:	d126      	bne.n	800155a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800150c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001510:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001514:	fa91 f1a1 	rbit	r1, r1
 8001518:	fab1 f181 	clz	r1, r1
 800151c:	40ca      	lsrs	r2, r1
 800151e:	4472      	add	r2, lr
 8001520:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001524:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001528:	d103      	bne.n	8001532 <HAL_RCC_GetSysClockFreq+0x4a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_RCC_GetSysClockFreq+0x80>)
 800152c:	fb03 f000 	mul.w	r0, r3, r0
 8001530:	e014      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x74>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	fa92 f2a2 	rbit	r2, r2
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	40d3      	lsrs	r3, r2
 8001548:	4473      	add	r3, lr
 800154a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
 8001550:	fbb3 f3f2 	udiv	r3, r3, r2
 8001554:	fb03 f000 	mul.w	r0, r3, r0
 8001558:	e000      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800155c:	b006      	add	sp, #24
 800155e:	bd10      	pop	{r4, pc}
 8001560:	08005120 	.word	0x08005120
 8001564:	40021000 	.word	0x40021000
 8001568:	003d0900 	.word	0x003d0900
 800156c:	007a1200 	.word	0x007a1200

08001570 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001570:	4b70      	ldr	r3, [pc, #448]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	428b      	cmp	r3, r1
 800157a:	d20c      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157c:	4a6d      	ldr	r2, [pc, #436]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0307 	bic.w	r3, r3, #7
 8001584:	430b      	orrs	r3, r1
 8001586:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	4299      	cmp	r1, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	4770      	bx	lr
{
 8001596:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	6803      	ldr	r3, [r0, #0]
 800159a:	f013 0f02 	tst.w	r3, #2
 800159e:	d006      	beq.n	80015ae <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 80015a2:	6853      	ldr	r3, [r2, #4]
 80015a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a8:	6884      	ldr	r4, [r0, #8]
 80015aa:	4323      	orrs	r3, r4
 80015ac:	6053      	str	r3, [r2, #4]
 80015ae:	460d      	mov	r5, r1
 80015b0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	6803      	ldr	r3, [r0, #0]
 80015b4:	f013 0f01 	tst.w	r3, #1
 80015b8:	d07a      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	6843      	ldr	r3, [r0, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d02f      	beq.n	8001620 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d042      	beq.n	800164a <HAL_RCC_ClockConfig+0xda>
 80015c4:	2202      	movs	r2, #2
 80015c6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	fa92 f2a2 	rbit	r2, r2
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	f002 021f 	and.w	r2, r2, #31
 80015dc:	fa21 f202 	lsr.w	r2, r1, r2
 80015e0:	f012 0f01 	tst.w	r2, #1
 80015e4:	f000 80a4 	beq.w	8001730 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e8:	4953      	ldr	r1, [pc, #332]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 80015ea:	684a      	ldr	r2, [r1, #4]
 80015ec:	f022 0203 	bic.w	r2, r2, #3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015f4:	f7fe fe44 	bl	8000280 <HAL_GetTick>
 80015f8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d039      	beq.n	8001674 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001600:	2b02      	cmp	r3, #2
 8001602:	d046      	beq.n	8001692 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f013 0f0c 	tst.w	r3, #12
 800160c:	d050      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7fe fe37 	bl	8000280 <HAL_GetTick>
 8001612:	1b80      	subs	r0, r0, r6
 8001614:	f241 3388 	movw	r3, #5000	; 0x1388
 8001618:	4298      	cmp	r0, r3
 800161a:	d9f3      	bls.n	8001604 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800161c:	2003      	movs	r0, #3
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001624:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 800162a:	6811      	ldr	r1, [r2, #0]
 800162c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001630:	fa92 f2a2 	rbit	r2, r2
 8001634:	fab2 f282 	clz	r2, r2
 8001638:	f002 021f 	and.w	r2, r2, #31
 800163c:	fa21 f202 	lsr.w	r2, r1, r2
 8001640:	f012 0f01 	tst.w	r2, #1
 8001644:	d1d0      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4a39      	ldr	r2, [pc, #228]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001654:	6811      	ldr	r1, [r2, #0]
 8001656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165a:	fa92 f2a2 	rbit	r2, r2
 800165e:	fab2 f282 	clz	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	fa21 f202 	lsr.w	r2, r1, r2
 800166a:	f012 0f01 	tst.w	r2, #1
 800166e:	d1bb      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
 8001672:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b04      	cmp	r3, #4
 800167e:	d017      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7fe fdfe 	bl	8000280 <HAL_GetTick>
 8001684:	1b80      	subs	r0, r0, r6
 8001686:	f241 3388 	movw	r3, #5000	; 0x1388
 800168a:	4298      	cmp	r0, r3
 800168c:	d9f2      	bls.n	8001674 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 800168e:	2003      	movs	r0, #3
 8001690:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d008      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169e:	f7fe fdef 	bl	8000280 <HAL_GetTick>
 80016a2:	1b80      	subs	r0, r0, r6
 80016a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016a8:	4298      	cmp	r0, r3
 80016aa:	d9f2      	bls.n	8001692 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	429d      	cmp	r5, r3
 80016ba:	d20c      	bcs.n	80016d6 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f023 0307 	bic.w	r3, r3, #7
 80016c4:	432b      	orrs	r3, r5
 80016c6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c8:	6813      	ldr	r3, [r2, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	429d      	cmp	r5, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
}
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f013 0f04 	tst.w	r3, #4
 80016dc:	d006      	beq.n	80016ec <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016de:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	6853      	ldr	r3, [r2, #4]
 80016e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016e6:	68e1      	ldr	r1, [r4, #12]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	f013 0f08 	tst.w	r3, #8
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 80016f6:	6853      	ldr	r3, [r2, #4]
 80016f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80016fc:	6921      	ldr	r1, [r4, #16]
 80016fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001702:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001704:	f7ff fef0 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001710:	22f0      	movs	r2, #240	; 0xf0
 8001712:	fa92 f2a2 	rbit	r2, r2
 8001716:	fab2 f282 	clz	r2, r2
 800171a:	40d3      	lsrs	r3, r2
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_RCC_ClockConfig+0x1cc>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	40d8      	lsrs	r0, r3
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_ClockConfig+0x1d0>)
 8001724:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001726:	2000      	movs	r0, #0
 8001728:	f7fe fd7c 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 800172c:	2000      	movs	r0, #0
 800172e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	40022000 	.word	0x40022000
 8001738:	40021000 	.word	0x40021000
 800173c:	08005170 	.word	0x08005170
 8001740:	200000a8 	.word	0x200000a8

08001744 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001744:	4b01      	ldr	r3, [pc, #4]	; (800174c <HAL_RCC_GetHCLKFreq+0x8>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200000a8 	.word	0x200000a8

08001750 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001756:	6803      	ldr	r3, [r0, #0]
 8001758:	f013 0f01 	tst.w	r3, #1
 800175c:	d118      	bne.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	f013 0f02 	tst.w	r3, #2
 8001764:	d006      	beq.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001766:	4a45      	ldr	r2, [pc, #276]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001768:	6853      	ldr	r3, [r2, #4]
 800176a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800176e:	68a1      	ldr	r1, [r4, #8]
 8001770:	430b      	orrs	r3, r1
 8001772:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	f013 0f10 	tst.w	r3, #16
 800177a:	d07c      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800177c:	4a3f      	ldr	r2, [pc, #252]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800177e:	6853      	ldr	r3, [r2, #4]
 8001780:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001784:	6961      	ldr	r1, [r4, #20]
 8001786:	430b      	orrs	r3, r1
 8001788:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800178a:	2000      	movs	r0, #0
}
 800178c:	b003      	add	sp, #12
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	4b3a      	ldr	r3, [pc, #232]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001798:	61da      	str	r2, [r3, #28]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80017ae:	f7fe fd67 	bl	8000280 <HAL_GetTick>
 80017b2:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017bc:	d106      	bne.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7fe fd5f 	bl	8000280 <HAL_GetTick>
 80017c2:	1b40      	subs	r0, r0, r5
 80017c4:	2864      	cmp	r0, #100	; 0x64
 80017c6:	d9f5      	bls.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
        return HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
 80017ca:	e7df      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80017d4:	d01d      	beq.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80017d6:	6862      	ldr	r2, [r4, #4]
 80017d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017dc:	4293      	cmp	r3, r2
 80017de:	d018      	beq.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80017e2:	6a01      	ldr	r1, [r0, #32]
 80017e4:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	4d23      	ldr	r5, [pc, #140]	; (8001884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80017f6:	2701      	movs	r7, #1
 80017f8:	f845 7022 	str.w	r7, [r5, r2, lsl #2]
 80017fc:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	2200      	movs	r2, #0
 8001806:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
      RCC->BDCR = temp_reg;
 800180a:	6206      	str	r6, [r0, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800180c:	f011 0f01 	tst.w	r1, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001814:	6a13      	ldr	r3, [r2, #32]
 8001816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800181a:	6861      	ldr	r1, [r4, #4]
 800181c:	430b      	orrs	r3, r1
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	e79d      	b.n	800175e <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8001822:	f7fe fd2d 	bl	8000280 <HAL_GetTick>
 8001826:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e014      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	2302      	movs	r3, #2
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	f013 0f01 	tst.w	r3, #1
 8001844:	d1e5      	bne.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7fe fd1b 	bl	8000280 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001850:	4298      	cmp	r0, r3
 8001852:	d80e      	bhi.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001854:	2302      	movs	r3, #2
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	2b02      	cmp	r3, #2
 800186a:	d0de      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800186e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001870:	e7dd      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e78a      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x3c>
  return HAL_OK;
 8001876:	2000      	movs	r0, #0
 8001878:	e788      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	42420400 	.word	0x42420400

08001888 <SD_CmdError>:
static HAL_SD_ErrorTypedef SD_CmdError(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8001888:	6801      	ldr	r1, [r0, #0]
 800188a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800188c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 8001890:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    
  while((timeout > 0) && (!tmp))
 8001894:	e003      	b.n	800189e <SD_CmdError+0x16>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 8001896:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001898:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    timeout--;
 800189c:	3a01      	subs	r2, #1
  while((timeout > 0) && (!tmp))
 800189e:	b10a      	cbz	r2, 80018a4 <SD_CmdError+0x1c>
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f8      	beq.n	8001896 <SD_CmdError+0xe>
  }
  
  if(timeout == 0)
 80018a4:	b90a      	cbnz	r2, 80018aa <SD_CmdError+0x22>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    return errorstate;
 80018a6:	2003      	movs	r0, #3
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
  
  return errorstate;
}
 80018a8:	4770      	bx	lr
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018aa:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80018ae:	638b      	str	r3, [r1, #56]	; 0x38
  return errorstate;
 80018b0:	2000      	movs	r0, #0
 80018b2:	4770      	bx	lr

080018b4 <SD_CmdResp7Error>:
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 80018b4:	6801      	ldr	r1, [r0, #0]
 80018b6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80018b8:	f013 0f45 	tst.w	r3, #69	; 0x45
 80018bc:	bf14      	ite	ne
 80018be:	2201      	movne	r2, #1
 80018c0:	2200      	moveq	r2, #0
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 80018c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  while((!tmp) && (timeout > 0))
 80018c6:	e006      	b.n	80018d6 <SD_CmdResp7Error+0x22>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 80018c8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80018ca:	f012 0f45 	tst.w	r2, #69	; 0x45
 80018ce:	bf14      	ite	ne
 80018d0:	2201      	movne	r2, #1
 80018d2:	2200      	moveq	r2, #0
    timeout--;
 80018d4:	3b01      	subs	r3, #1
  while((!tmp) && (timeout > 0))
 80018d6:	b90a      	cbnz	r2, 80018dc <SD_CmdResp7Error+0x28>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f5      	bne.n	80018c8 <SD_CmdResp7Error+0x14>
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 80018dc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80018de:	f002 0204 	and.w	r2, r2, #4
  
  if((timeout == 0) || tmp)
 80018e2:	b91b      	cbnz	r3, 80018ec <SD_CmdResp7Error+0x38>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 80018e4:	2304      	movs	r3, #4
 80018e6:	638b      	str	r3, [r1, #56]	; 0x38
    
    return errorstate;
 80018e8:	2003      	movs	r0, #3
 80018ea:	4770      	bx	lr
  if((timeout == 0) || tmp)
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d1f9      	bne.n	80018e4 <SD_CmdResp7Error+0x30>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 80018f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80018f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018f6:	d101      	bne.n	80018fc <SD_CmdResp7Error+0x48>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
    
    return errorstate;
  }
  
  return errorstate;
 80018f8:	2029      	movs	r0, #41	; 0x29
}
 80018fa:	4770      	bx	lr
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 80018fc:	2340      	movs	r3, #64	; 0x40
 80018fe:	638b      	str	r3, [r1, #56]	; 0x38
    return errorstate;
 8001900:	2000      	movs	r0, #0
 8001902:	4770      	bx	lr

08001904 <SD_CmdResp3Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8001904:	6803      	ldr	r3, [r0, #0]
 8001906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001908:	f012 0f45 	tst.w	r2, #69	; 0x45
 800190c:	d0fa      	beq.n	8001904 <SD_CmdResp3Error>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800190e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001910:	f012 0f04 	tst.w	r2, #4
 8001914:	d003      	beq.n	800191e <SD_CmdResp3Error+0x1a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8001916:	2204      	movs	r2, #4
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800191a:	2003      	movs	r0, #3
 800191c:	4770      	bx	lr
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800191e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8001924:	2000      	movs	r0, #0
}
 8001926:	4770      	bx	lr

08001928 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8001928:	6803      	ldr	r3, [r0, #0]
 800192a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001930:	d0fa      	beq.n	8001928 <SD_CmdResp2Error>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8001932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001934:	f012 0f04 	tst.w	r2, #4
 8001938:	d003      	beq.n	8001942 <SD_CmdResp2Error+0x1a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800193a:	2204      	movs	r2, #4
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800193e:	2003      	movs	r0, #3
 8001940:	4770      	bx	lr
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8001942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001944:	f012 0f01 	tst.w	r2, #1
 8001948:	d104      	bne.n	8001954 <SD_CmdResp2Error+0x2c>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800194a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 8001950:	2000      	movs	r0, #0
}
 8001952:	4770      	bx	lr
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8001954:	2001      	movs	r0, #1
 8001956:	6398      	str	r0, [r3, #56]	; 0x38
    return errorstate;
 8001958:	4770      	bx	lr
	...

0800195c <SD_CmdResp1Error>:
{
 800195c:	b538      	push	{r3, r4, r5, lr}
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800195e:	6803      	ldr	r3, [r0, #0]
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001962:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001966:	d0fa      	beq.n	800195e <SD_CmdResp1Error+0x2>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8001968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196a:	f012 0f04 	tst.w	r2, #4
 800196e:	d003      	beq.n	8001978 <SD_CmdResp1Error+0x1c>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8001970:	2204      	movs	r2, #4
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8001974:	2003      	movs	r0, #3
 8001976:	bd38      	pop	{r3, r4, r5, pc}
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	f012 0f01 	tst.w	r2, #1
 800197e:	d002      	beq.n	8001986 <SD_CmdResp1Error+0x2a>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8001980:	2001      	movs	r0, #1
 8001982:	6398      	str	r0, [r3, #56]	; 0x38
    return errorstate;
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	460d      	mov	r5, r1
 8001988:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 800198a:	4618      	mov	r0, r3
 800198c:	f001 f8c2 	bl	8002b14 <SDIO_GetCommandResponse>
 8001990:	42a8      	cmp	r0, r5
 8001992:	d001      	beq.n	8001998 <SD_CmdResp1Error+0x3c>
    return errorstate;
 8001994:	2010      	movs	r0, #16
 8001996:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800199e:	639a      	str	r2, [r3, #56]	; 0x38
  response_r1 = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80019a0:	2100      	movs	r1, #0
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	f001 f8ba 	bl	8002b1c <SDIO_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <SD_CmdResp1Error+0x118>)
 80019aa:	4003      	ands	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03d      	beq.n	8001a2c <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 80019b0:	2800      	cmp	r0, #0
 80019b2:	db3d      	blt.n	8001a30 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 80019b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80019b8:	d001      	beq.n	80019be <SD_CmdResp1Error+0x62>
    return(SD_ADDR_MISALIGNED);
 80019ba:	2009      	movs	r0, #9
 80019bc:	bd38      	pop	{r3, r4, r5, pc}
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 80019be:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80019c2:	d001      	beq.n	80019c8 <SD_CmdResp1Error+0x6c>
    return(SD_BLOCK_LEN_ERR);
 80019c4:	200a      	movs	r0, #10
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 80019c8:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80019cc:	d132      	bne.n	8001a34 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 80019ce:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80019d2:	d131      	bne.n	8001a38 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 80019d4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80019d8:	d130      	bne.n	8001a3c <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 80019da:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80019de:	d12f      	bne.n	8001a40 <SD_CmdResp1Error+0xe4>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 80019e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80019e4:	d12e      	bne.n	8001a44 <SD_CmdResp1Error+0xe8>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 80019e6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80019ea:	d12d      	bne.n	8001a48 <SD_CmdResp1Error+0xec>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 80019ec:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80019f0:	d12c      	bne.n	8001a4c <SD_CmdResp1Error+0xf0>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 80019f2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80019f6:	d12b      	bne.n	8001a50 <SD_CmdResp1Error+0xf4>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80019f8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80019fc:	d12a      	bne.n	8001a54 <SD_CmdResp1Error+0xf8>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80019fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001a02:	d129      	bne.n	8001a58 <SD_CmdResp1Error+0xfc>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8001a04:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8001a08:	d128      	bne.n	8001a5c <SD_CmdResp1Error+0x100>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8001a0a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8001a0e:	d127      	bne.n	8001a60 <SD_CmdResp1Error+0x104>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8001a10:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001a14:	d126      	bne.n	8001a64 <SD_CmdResp1Error+0x108>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8001a16:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001a1a:	d125      	bne.n	8001a68 <SD_CmdResp1Error+0x10c>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8001a1c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001a20:	d124      	bne.n	8001a6c <SD_CmdResp1Error+0x110>
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 8001a22:	f010 0f08 	tst.w	r0, #8
 8001a26:	d023      	beq.n	8001a70 <SD_CmdResp1Error+0x114>
    return(SD_AKE_SEQ_ERROR);
 8001a28:	201a      	movs	r0, #26
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
    return errorstate;
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8001a30:	201c      	movs	r0, #28
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ERASE_SEQ_ERR);
 8001a34:	200b      	movs	r0, #11
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_BAD_ERASE_PARAM);
 8001a38:	200c      	movs	r0, #12
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8001a3c:	200d      	movs	r0, #13
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8001a40:	200e      	movs	r0, #14
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_COM_CRC_FAILED);
 8001a44:	200f      	movs	r0, #15
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ILLEGAL_CMD);
 8001a48:	2010      	movs	r0, #16
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CARD_ECC_FAILED);
 8001a4c:	2011      	movs	r0, #17
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CC_ERROR);
 8001a50:	2012      	movs	r0, #18
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8001a54:	2013      	movs	r0, #19
 8001a56:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8001a58:	2014      	movs	r0, #20
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8001a5c:	2015      	movs	r0, #21
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CID_CSD_OVERWRITE);
 8001a60:	2016      	movs	r0, #22
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_WP_ERASE_SKIP);
 8001a64:	2017      	movs	r0, #23
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CARD_ECC_DISABLED);
 8001a68:	2018      	movs	r0, #24
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ERASE_RESET);
 8001a6c:	2019      	movs	r0, #25
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
  return errorstate;
 8001a70:	2000      	movs	r0, #0
}
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	fdffe008 	.word	0xfdffe008

08001a78 <SD_PowerON>:
{
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0}; 
 8001a7e:	2500      	movs	r5, #0
 8001a80:	9501      	str	r5, [sp, #4]
 8001a82:	9502      	str	r5, [sp, #8]
 8001a84:	9503      	str	r5, [sp, #12]
 8001a86:	9504      	str	r5, [sp, #16]
 8001a88:	9505      	str	r5, [sp, #20]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8001a8a:	f88d 5003 	strb.w	r5, [sp, #3]
  __HAL_SD_SDIO_DISABLE(hsd); 
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6853      	ldr	r3, [r2, #4]
 8001a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a96:	6053      	str	r3, [r2, #4]
  SDIO_PowerState_ON(hsd->Instance);
 8001a98:	6800      	ldr	r0, [r0, #0]
 8001a9a:	f001 f81f 	bl	8002adc <SDIO_PowerState_ON>
  HAL_Delay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7fe fbf4 	bl	800028c <HAL_Delay>
  __HAL_SD_SDIO_ENABLE(hsd);
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	6853      	ldr	r3, [r2, #4]
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6053      	str	r3, [r2, #4]
  sdio_cmdinitstructure.Argument         = 0;
 8001aae:	9501      	str	r5, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8001ab0:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 8001ab2:	9503      	str	r5, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8001ab4:	9504      	str	r5, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	6820      	ldr	r0, [r4, #0]
 8001ac0:	f001 f814 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdError(hsd);
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff fedf 	bl	8001888 <SD_CmdError>
 8001aca:	f88d 0003 	strb.w	r0, [sp, #3]
  if(errorstate != SD_OK)
 8001ace:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ad2:	b123      	cbz	r3, 8001ade <SD_PowerON+0x66>
    return errorstate;
 8001ad4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001ad8:	b2c0      	uxtb	r0, r0
}
 8001ada:	b007      	add	sp, #28
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8001ade:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8001ae2:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	9302      	str	r3, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	9303      	str	r3, [sp, #12]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001aec:	a901      	add	r1, sp, #4
 8001aee:	6820      	ldr	r0, [r4, #0]
 8001af0:	f000 fffc 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp7Error(hsd);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff fedd 	bl	80018b4 <SD_CmdResp7Error>
 8001afa:	f88d 0003 	strb.w	r0, [sp, #3]
  if (errorstate == SD_OK)
 8001afe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b02:	b923      	cbnz	r3, 8001b0e <SD_PowerON+0x96>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8001b04:	2301      	movs	r3, #1
 8001b06:	6223      	str	r3, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8001b08:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001b0c:	e000      	b.n	8001b10 <SD_PowerON+0x98>
  uint32_t sdtype = SD_STD_CAPACITY;
 8001b0e:	2700      	movs	r7, #0
  sdio_cmdinitstructure.Argument         = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8001b14:	2537      	movs	r5, #55	; 0x37
 8001b16:	9502      	str	r5, [sp, #8]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001b18:	a901      	add	r1, sp, #4
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	f000 ffe6 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8001b20:	4629      	mov	r1, r5
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff ff1a 	bl	800195c <SD_CmdResp1Error>
 8001b28:	f88d 0003 	strb.w	r0, [sp, #3]
  if(errorstate == SD_OK)
 8001b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b30:	b15b      	cbz	r3, 8001b4a <SD_PowerON+0xd2>
  return errorstate;
 8001b32:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001b36:	b2c0      	uxtb	r0, r0
 8001b38:	e7cf      	b.n	8001ada <SD_PowerON+0x62>
        return errorstate;
 8001b3a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001b3e:	b2c0      	uxtb	r0, r0
 8001b40:	e7cb      	b.n	8001ada <SD_PowerON+0x62>
        return errorstate;
 8001b42:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001b46:	b2c0      	uxtb	r0, r0
 8001b48:	e7c7      	b.n	8001ada <SD_PowerON+0x62>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	4602      	mov	r2, r0
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d13e      	bne.n	8001bd2 <SD_PowerON+0x15a>
 8001b54:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	d83a      	bhi.n	8001bd2 <SD_PowerON+0x15a>
      sdio_cmdinitstructure.Argument         = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8001b60:	2637      	movs	r6, #55	; 0x37
 8001b62:	9602      	str	r6, [sp, #8]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	9203      	str	r2, [sp, #12]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8001b68:	9304      	str	r3, [sp, #16]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6e:	9305      	str	r3, [sp, #20]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001b70:	a901      	add	r1, sp, #4
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	f000 ffba 	bl	8002aec <SDIO_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8001b78:	4631      	mov	r1, r6
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff feee 	bl	800195c <SD_CmdResp1Error>
 8001b80:	f88d 0003 	strb.w	r0, [sp, #3]
      if(errorstate != SD_OK)
 8001b84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1d6      	bne.n	8001b3a <SD_PowerON+0xc2>
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8001b8c:	f047 4300 	orr.w	r3, r7, #2147483648	; 0x80000000
 8001b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b94:	9301      	str	r3, [sp, #4]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8001b96:	2329      	movs	r3, #41	; 0x29
 8001b98:	9302      	str	r3, [sp, #8]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	9303      	str	r3, [sp, #12]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9304      	str	r3, [sp, #16]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba6:	9305      	str	r3, [sp, #20]
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001ba8:	a901      	add	r1, sp, #4
 8001baa:	6820      	ldr	r0, [r4, #0]
 8001bac:	f000 ff9e 	bl	8002aec <SDIO_SendCommand>
      errorstate = SD_CmdResp3Error(hsd);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff fea7 	bl	8001904 <SD_CmdResp3Error>
 8001bb6:	f88d 0003 	strb.w	r0, [sp, #3]
      if(errorstate != SD_OK)
 8001bba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1bf      	bne.n	8001b42 <SD_PowerON+0xca>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	f000 ffa9 	bl	8002b1c <SDIO_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8001bca:	4602      	mov	r2, r0
 8001bcc:	0fc0      	lsrs	r0, r0, #31
      count++;
 8001bce:	3501      	adds	r5, #1
 8001bd0:	e7be      	b.n	8001b50 <SD_PowerON+0xd8>
    if(count >= SD_MAX_VOLT_TRIAL)
 8001bd2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001bd6:	429d      	cmp	r5, r3
 8001bd8:	d805      	bhi.n	8001be6 <SD_PowerON+0x16e>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001bda:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 8001bde:	d0a8      	beq.n	8001b32 <SD_PowerON+0xba>
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8001be0:	2302      	movs	r3, #2
 8001be2:	6223      	str	r3, [r4, #32]
 8001be4:	e7a5      	b.n	8001b32 <SD_PowerON+0xba>
      errorstate = SD_INVALID_VOLTRANGE;
 8001be6:	231b      	movs	r3, #27
 8001be8:	f88d 3003 	strb.w	r3, [sp, #3]
      return errorstate;
 8001bec:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001bf0:	b2c0      	uxtb	r0, r0
 8001bf2:	e772      	b.n	8001ada <SD_PowerON+0x62>

08001bf4 <SD_Select_Deselect>:
{
 8001bf4:	b530      	push	{r4, r5, lr}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.Argument         = (uint32_t)Addr;
 8001bfe:	9201      	str	r2, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8001c00:	2507      	movs	r5, #7
 8001c02:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001c04:	2340      	movs	r3, #64	; 0x40
 8001c06:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001c0e:	a901      	add	r1, sp, #4
 8001c10:	6800      	ldr	r0, [r0, #0]
 8001c12:	f000 ff6b 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8001c16:	4629      	mov	r1, r5
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff fe9f 	bl	800195c <SD_CmdResp1Error>
}
 8001c1e:	b007      	add	sp, #28
 8001c20:	bd30      	pop	{r4, r5, pc}

08001c22 <SD_SendStatus>:
{
 8001c22:	b570      	push	{r4, r5, r6, lr}
 8001c24:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 8001c26:	2300      	movs	r3, #0
 8001c28:	9304      	str	r3, [sp, #16]
  if(pCardStatus == NULL)
 8001c2a:	b1d9      	cbz	r1, 8001c64 <SD_SendStatus+0x42>
 8001c2c:	460e      	mov	r6, r1
 8001c2e:	4604      	mov	r4, r0
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8001c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8001c36:	250d      	movs	r5, #13
 8001c38:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001c44:	a901      	add	r1, sp, #4
 8001c46:	6800      	ldr	r0, [r0, #0]
 8001c48:	f000 ff50 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff fe84 	bl	800195c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8001c54:	4605      	mov	r5, r0
 8001c56:	b930      	cbnz	r0, 8001c66 <SD_SendStatus+0x44>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	f000 ff5e 	bl	8002b1c <SDIO_GetResponse>
 8001c60:	6030      	str	r0, [r6, #0]
  return errorstate;
 8001c62:	e000      	b.n	8001c66 <SD_SendStatus+0x44>
    return errorstate;
 8001c64:	2526      	movs	r5, #38	; 0x26
}
 8001c66:	4628      	mov	r0, r5
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}

08001c6c <SD_GetState>:
{
 8001c6c:	b500      	push	{lr}
 8001c6e:	b083      	sub	sp, #12
  uint32_t resp1 = 0;
 8001c70:	a902      	add	r1, sp, #8
 8001c72:	2300      	movs	r3, #0
 8001c74:	f841 3d04 	str.w	r3, [r1, #-4]!
  if (SD_SendStatus(hsd, &resp1) != SD_OK)
 8001c78:	f7ff ffd3 	bl	8001c22 <SD_SendStatus>
 8001c7c:	b118      	cbz	r0, 8001c86 <SD_GetState+0x1a>
    return SD_CARD_ERROR;
 8001c7e:	20ff      	movs	r0, #255	; 0xff
}
 8001c80:	b003      	add	sp, #12
 8001c82:	f85d fb04 	ldr.w	pc, [sp], #4
    return (HAL_SD_CardStateTypedef)((resp1 >> 9) & 0x0F);
 8001c86:	9801      	ldr	r0, [sp, #4]
 8001c88:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001c8c:	e7f8      	b.n	8001c80 <SD_GetState+0x14>

08001c8e <SD_CmdResp6Error>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
 8001c8e:	b570      	push	{r4, r5, r6, lr}
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1 = 0;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001c94:	f014 0f45 	tst.w	r4, #69	; 0x45
 8001c98:	d0fa      	beq.n	8001c90 <SD_CmdResp6Error+0x2>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8001c9a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001c9c:	f014 0f04 	tst.w	r4, #4
 8001ca0:	d003      	beq.n	8001caa <SD_CmdResp6Error+0x1c>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8001caa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001cac:	f014 0f01 	tst.w	r4, #1
 8001cb0:	d002      	beq.n	8001cb8 <SD_CmdResp6Error+0x2a>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	6398      	str	r0, [r3, #56]	; 0x38
    
    return errorstate;
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	4616      	mov	r6, r2
 8001cba:	460d      	mov	r5, r1
 8001cbc:	4604      	mov	r4, r0
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 ff28 	bl	8002b14 <SDIO_GetCommandResponse>
 8001cc4:	42a8      	cmp	r0, r5
 8001cc6:	d001      	beq.n	8001ccc <SD_CmdResp6Error+0x3e>
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 8001cc8:	2010      	movs	r0, #16
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f000 ff20 	bl	8002b1c <SDIO_GetResponse>
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8001cdc:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8001ce0:	d004      	beq.n	8001cec <SD_CmdResp6Error+0x5e>
    *pRCA = (uint16_t) (response_r1 >> 16);
    
    return errorstate;
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8001ce2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001ce6:	d005      	beq.n	8001cf4 <SD_CmdResp6Error+0x66>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8001ce8:	2013      	movs	r0, #19
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
    *pRCA = (uint16_t) (response_r1 >> 16);
 8001cec:	0c00      	lsrs	r0, r0, #16
 8001cee:	8030      	strh	r0, [r6, #0]
    return errorstate;
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8001cf4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001cf8:	d104      	bne.n	8001d04 <SD_CmdResp6Error+0x76>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8001cfa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001cfe:	d003      	beq.n	8001d08 <SD_CmdResp6Error+0x7a>
  {
    return(SD_COM_CRC_FAILED);
 8001d00:	200f      	movs	r0, #15
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ILLEGAL_CMD);
 8001d04:	2010      	movs	r0, #16
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  return errorstate;
 8001d08:	2000      	movs	r0, #0
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}

08001d0c <SD_IsCardProgramming>:
  * @param  hsd: SD handle
  * @param  pStatus: pointer to the variable that will contain the SD card state  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_IsCardProgramming(SD_HandleTypeDef *hsd, uint8_t *pStatus)
{
 8001d0c:	b530      	push	{r4, r5, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	4604      	mov	r4, r0
 8001d12:	460d      	mov	r5, r1
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 8001d14:	2300      	movs	r3, #0
 8001d16:	9304      	str	r3, [sp, #16]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
 8001d18:	9300      	str	r3, [sp, #0]
  
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8001d1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8001d20:	230d      	movs	r3, #13
 8001d22:	9302      	str	r3, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001d2e:	a901      	add	r1, sp, #4
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	f000 fedb 	bl	8002aec <SDIO_SendCommand>
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8001d36:	6820      	ldr	r0, [r4, #0]
 8001d38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d3a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8001d3e:	d0fa      	beq.n	8001d36 <SD_IsCardProgramming+0x2a>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8001d40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d42:	f013 0f04 	tst.w	r3, #4
 8001d46:	d004      	beq.n	8001d52 <SD_IsCardProgramming+0x46>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8001d48:	2304      	movs	r3, #4
 8001d4a:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8001d4c:	2003      	movs	r0, #3
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}   
 8001d4e:	b007      	add	sp, #28
 8001d50:	bd30      	pop	{r4, r5, pc}
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8001d52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d54:	f013 0f01 	tst.w	r3, #1
 8001d58:	d003      	beq.n	8001d62 <SD_IsCardProgramming+0x56>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8001d5e:	4618      	mov	r0, r3
 8001d60:	e7f5      	b.n	8001d4e <SD_IsCardProgramming+0x42>
  if((uint32_t)SDIO_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 8001d62:	f000 fed7 	bl	8002b14 <SDIO_GetCommandResponse>
 8001d66:	280d      	cmp	r0, #13
 8001d68:	d001      	beq.n	8001d6e <SD_IsCardProgramming+0x62>
    return errorstate;
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	e7ef      	b.n	8001d4e <SD_IsCardProgramming+0x42>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
  responseR1 = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001d76:	2100      	movs	r1, #0
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	f000 fecf 	bl	8002b1c <SDIO_GetResponse>
 8001d7e:	9000      	str	r0, [sp, #0]
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 8001d80:	9b00      	ldr	r3, [sp, #0]
 8001d82:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8001d86:	702b      	strb	r3, [r5, #0]
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8001d88:	9a00      	ldr	r2, [sp, #0]
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <SD_IsCardProgramming+0x170>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d050      	beq.n	8001e34 <SD_IsCardProgramming+0x128>
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8001d92:	9b00      	ldr	r3, [sp, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db4f      	blt.n	8001e38 <SD_IsCardProgramming+0x12c>
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8001d98:	9b00      	ldr	r3, [sp, #0]
 8001d9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8001d9e:	d001      	beq.n	8001da4 <SD_IsCardProgramming+0x98>
    return(SD_ADDR_MISALIGNED);
 8001da0:	2009      	movs	r0, #9
 8001da2:	e7d4      	b.n	8001d4e <SD_IsCardProgramming+0x42>
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8001da4:	9b00      	ldr	r3, [sp, #0]
 8001da6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001daa:	d001      	beq.n	8001db0 <SD_IsCardProgramming+0xa4>
    return(SD_BLOCK_LEN_ERR);
 8001dac:	200a      	movs	r0, #10
 8001dae:	e7ce      	b.n	8001d4e <SD_IsCardProgramming+0x42>
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8001db0:	9b00      	ldr	r3, [sp, #0]
 8001db2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001db6:	d141      	bne.n	8001e3c <SD_IsCardProgramming+0x130>
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8001db8:	9b00      	ldr	r3, [sp, #0]
 8001dba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001dbe:	d13f      	bne.n	8001e40 <SD_IsCardProgramming+0x134>
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8001dc0:	9b00      	ldr	r3, [sp, #0]
 8001dc2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001dc6:	d13d      	bne.n	8001e44 <SD_IsCardProgramming+0x138>
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8001dc8:	9b00      	ldr	r3, [sp, #0]
 8001dca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001dce:	d13b      	bne.n	8001e48 <SD_IsCardProgramming+0x13c>
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8001dd0:	9b00      	ldr	r3, [sp, #0]
 8001dd2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001dd6:	d139      	bne.n	8001e4c <SD_IsCardProgramming+0x140>
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8001dd8:	9b00      	ldr	r3, [sp, #0]
 8001dda:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dde:	d137      	bne.n	8001e50 <SD_IsCardProgramming+0x144>
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8001de0:	9b00      	ldr	r3, [sp, #0]
 8001de2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001de6:	d135      	bne.n	8001e54 <SD_IsCardProgramming+0x148>
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8001de8:	9b00      	ldr	r3, [sp, #0]
 8001dea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001dee:	d133      	bne.n	8001e58 <SD_IsCardProgramming+0x14c>
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8001df0:	9b00      	ldr	r3, [sp, #0]
 8001df2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001df6:	d131      	bne.n	8001e5c <SD_IsCardProgramming+0x150>
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8001df8:	9b00      	ldr	r3, [sp, #0]
 8001dfa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001dfe:	d12f      	bne.n	8001e60 <SD_IsCardProgramming+0x154>
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8001e00:	9b00      	ldr	r3, [sp, #0]
 8001e02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e06:	d12d      	bne.n	8001e64 <SD_IsCardProgramming+0x158>
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8001e08:	9b00      	ldr	r3, [sp, #0]
 8001e0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e0e:	d12b      	bne.n	8001e68 <SD_IsCardProgramming+0x15c>
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8001e10:	9b00      	ldr	r3, [sp, #0]
 8001e12:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001e16:	d129      	bne.n	8001e6c <SD_IsCardProgramming+0x160>
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8001e18:	9b00      	ldr	r3, [sp, #0]
 8001e1a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001e1e:	d127      	bne.n	8001e70 <SD_IsCardProgramming+0x164>
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8001e20:	9b00      	ldr	r3, [sp, #0]
 8001e22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001e26:	d125      	bne.n	8001e74 <SD_IsCardProgramming+0x168>
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	f013 0f08 	tst.w	r3, #8
 8001e2e:	d023      	beq.n	8001e78 <SD_IsCardProgramming+0x16c>
    return(SD_AKE_SEQ_ERROR);
 8001e30:	201a      	movs	r0, #26
 8001e32:	e78c      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return errorstate;
 8001e34:	2000      	movs	r0, #0
 8001e36:	e78a      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_ADDR_OUT_OF_RANGE);
 8001e38:	201c      	movs	r0, #28
 8001e3a:	e788      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_ERASE_SEQ_ERR);
 8001e3c:	200b      	movs	r0, #11
 8001e3e:	e786      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_BAD_ERASE_PARAM);
 8001e40:	200c      	movs	r0, #12
 8001e42:	e784      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_WRITE_PROT_VIOLATION);
 8001e44:	200d      	movs	r0, #13
 8001e46:	e782      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_LOCK_UNLOCK_FAILED);
 8001e48:	200e      	movs	r0, #14
 8001e4a:	e780      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_COM_CRC_FAILED);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	e77e      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_ILLEGAL_CMD);
 8001e50:	2010      	movs	r0, #16
 8001e52:	e77c      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_CARD_ECC_FAILED);
 8001e54:	2011      	movs	r0, #17
 8001e56:	e77a      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_CC_ERROR);
 8001e58:	2012      	movs	r0, #18
 8001e5a:	e778      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8001e5c:	2013      	movs	r0, #19
 8001e5e:	e776      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_STREAM_READ_UNDERRUN);
 8001e60:	2014      	movs	r0, #20
 8001e62:	e774      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_STREAM_WRITE_OVERRUN);
 8001e64:	2015      	movs	r0, #21
 8001e66:	e772      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_CID_CSD_OVERWRITE);
 8001e68:	2016      	movs	r0, #22
 8001e6a:	e770      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_WP_ERASE_SKIP);
 8001e6c:	2017      	movs	r0, #23
 8001e6e:	e76e      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_CARD_ECC_DISABLED);
 8001e70:	2018      	movs	r0, #24
 8001e72:	e76c      	b.n	8001d4e <SD_IsCardProgramming+0x42>
    return(SD_ERASE_RESET);
 8001e74:	2019      	movs	r0, #25
 8001e76:	e76a      	b.n	8001d4e <SD_IsCardProgramming+0x42>
  return errorstate;
 8001e78:	2000      	movs	r0, #0
 8001e7a:	e768      	b.n	8001d4e <SD_IsCardProgramming+0x42>
 8001e7c:	fdffe008 	.word	0xfdffe008

08001e80 <SD_Initialize_Cards>:
{
 8001e80:	b530      	push	{r4, r5, lr}
 8001e82:	b087      	sub	sp, #28
 8001e84:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0}; 
 8001e86:	2300      	movs	r3, #0
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	9303      	str	r3, [sp, #12]
 8001e8e:	9304      	str	r3, [sp, #16]
 8001e90:	9305      	str	r3, [sp, #20]
  uint16_t sd_rca = 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	f000 fe23 	bl	8002ae4 <SDIO_GetPowerState>
 8001e9e:	b918      	cbnz	r0, 8001ea8 <SD_Initialize_Cards+0x28>
    return errorstate;
 8001ea0:	2525      	movs	r5, #37	; 0x25
}
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	b007      	add	sp, #28
 8001ea6:	bd30      	pop	{r4, r5, pc}
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8001ea8:	6a23      	ldr	r3, [r4, #32]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d028      	beq.n	8001f00 <SD_Initialize_Cards+0x80>
    sdio_cmdinitstructure.Argument         = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9301      	str	r3, [sp, #4]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	9202      	str	r2, [sp, #8]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8001eb6:	22c0      	movs	r2, #192	; 0xc0
 8001eb8:	9203      	str	r2, [sp, #12]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8001eba:	9304      	str	r3, [sp, #16]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec0:	9305      	str	r3, [sp, #20]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001ec2:	a901      	add	r1, sp, #4
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	f000 fe11 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fd2c 	bl	8001928 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d1e5      	bne.n	8001ea2 <SD_Initialize_Cards+0x22>
    hsd->CID[0] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6820      	ldr	r0, [r4, #0]
 8001eda:	f000 fe1f 	bl	8002b1c <SDIO_GetResponse>
 8001ede:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	f000 fe1a 	bl	8002b1c <SDIO_GetResponse>
 8001ee8:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001eea:	2108      	movs	r1, #8
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	f000 fe15 	bl	8002b1c <SDIO_GetResponse>
 8001ef2:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001ef4:	210c      	movs	r1, #12
 8001ef6:	6820      	ldr	r0, [r4, #0]
 8001ef8:	f000 fe10 	bl	8002b1c <SDIO_GetResponse>
 8001efc:	6460      	str	r0, [r4, #68]	; 0x44
 8001efe:	e000      	b.n	8001f02 <SD_Initialize_Cards+0x82>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8001f00:	2500      	movs	r5, #0
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8001f02:	6a23      	ldr	r3, [r4, #32]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d92e      	bls.n	8001f66 <SD_Initialize_Cards+0xe6>
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	d02c      	beq.n	8001f66 <SD_Initialize_Cards+0xe6>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d02a      	beq.n	8001f66 <SD_Initialize_Cards+0xe6>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8001f10:	6a23      	ldr	r3, [r4, #32]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d0c5      	beq.n	8001ea2 <SD_Initialize_Cards+0x22>
    hsd->RCA = sd_rca;
 8001f16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001f1a:	6263      	str	r3, [r4, #36]	; 0x24
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	9301      	str	r3, [sp, #4]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8001f20:	2309      	movs	r3, #9
 8001f22:	9302      	str	r3, [sp, #8]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8001f24:	23c0      	movs	r3, #192	; 0xc0
 8001f26:	9303      	str	r3, [sp, #12]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001f28:	a901      	add	r1, sp, #4
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	f000 fdde 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fcf9 	bl	8001928 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8001f36:	4605      	mov	r5, r0
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d1b2      	bne.n	8001ea2 <SD_Initialize_Cards+0x22>
    hsd->CSD[0] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	f000 fdec 	bl	8002b1c <SDIO_GetResponse>
 8001f44:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001f46:	2104      	movs	r1, #4
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	f000 fde7 	bl	8002b1c <SDIO_GetResponse>
 8001f4e:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001f50:	2108      	movs	r1, #8
 8001f52:	6820      	ldr	r0, [r4, #0]
 8001f54:	f000 fde2 	bl	8002b1c <SDIO_GetResponse>
 8001f58:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001f5a:	210c      	movs	r1, #12
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f000 fddd 	bl	8002b1c <SDIO_GetResponse>
 8001f62:	6360      	str	r0, [r4, #52]	; 0x34
 8001f64:	e79d      	b.n	8001ea2 <SD_Initialize_Cards+0x22>
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 8001f66:	2503      	movs	r5, #3
 8001f68:	9502      	str	r5, [sp, #8]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	9303      	str	r3, [sp, #12]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001f6e:	a901      	add	r1, sp, #4
 8001f70:	6820      	ldr	r0, [r4, #0]
 8001f72:	f000 fdbb 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp6Error(hsd, SD_CMD_SET_REL_ADDR, &sd_rca);
 8001f76:	f10d 0202 	add.w	r2, sp, #2
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff fe86 	bl	8001c8e <SD_CmdResp6Error>
    if(errorstate != SD_OK)
 8001f82:	4605      	mov	r5, r0
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d0c3      	beq.n	8001f10 <SD_Initialize_Cards+0x90>
 8001f88:	e78b      	b.n	8001ea2 <SD_Initialize_Cards+0x22>

08001f8a <SD_FindSCR>:
{
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8c:	b08f      	sub	sp, #60	; 0x3c
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460e      	mov	r6, r1
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure = {0};
 8001f92:	2300      	movs	r3, #0
 8001f94:	930c      	str	r3, [sp, #48]	; 0x30
  SDIO_DataInitTypeDef sdio_datainitstructure = {0};
 8001f96:	9303      	str	r3, [sp, #12]
 8001f98:	9304      	str	r3, [sp, #16]
 8001f9a:	9305      	str	r3, [sp, #20]
 8001f9c:	9306      	str	r3, [sp, #24]
 8001f9e:	9307      	str	r3, [sp, #28]
 8001fa0:	9308      	str	r3, [sp, #32]
  uint32_t tempscr[2] = {0, 0};
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	9302      	str	r3, [sp, #8]
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8001faa:	2510      	movs	r5, #16
 8001fac:	950a      	str	r5, [sp, #40]	; 0x28
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	930b      	str	r3, [sp, #44]	; 0x2c
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8001fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb6:	930d      	str	r3, [sp, #52]	; 0x34
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001fb8:	a909      	add	r1, sp, #36	; 0x24
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	f000 fd96 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fcca 	bl	800195c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8001fc8:	4605      	mov	r5, r0
 8001fca:	b110      	cbz	r0, 8001fd2 <SD_FindSCR+0x48>
}
 8001fcc:	4628      	mov	r0, r5
 8001fce:	b00f      	add	sp, #60	; 0x3c
 8001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8001fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8001fd8:	2537      	movs	r5, #55	; 0x37
 8001fda:	950a      	str	r5, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8001fdc:	a909      	add	r1, sp, #36	; 0x24
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	f000 fd84 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fcb8 	bl	800195c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8001fec:	4605      	mov	r5, r0
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d1ec      	bne.n	8001fcc <SD_FindSCR+0x42>
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	9303      	str	r3, [sp, #12]
  sdio_datainitstructure.DataLength    = 8;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	9304      	str	r3, [sp, #16]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001ffc:	2330      	movs	r3, #48	; 0x30
 8001ffe:	9305      	str	r3, [sp, #20]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002000:	2302      	movs	r3, #2
 8002002:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002004:	2500      	movs	r5, #0
 8002006:	9507      	str	r5, [sp, #28]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	9308      	str	r3, [sp, #32]
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800200c:	a903      	add	r1, sp, #12
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f000 fd90 	bl	8002b34 <SDIO_DataConfig>
  sdio_cmdinitstructure.Argument         = 0;
 8002014:	9509      	str	r5, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8002016:	2533      	movs	r5, #51	; 0x33
 8002018:	950a      	str	r5, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800201a:	a909      	add	r1, sp, #36	; 0x24
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	f000 fd65 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8002022:	4629      	mov	r1, r5
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fc99 	bl	800195c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800202a:	4605      	mov	r5, r0
 800202c:	2800      	cmp	r0, #0
 800202e:	d1cd      	bne.n	8001fcc <SD_FindSCR+0x42>
 8002030:	2700      	movs	r7, #0
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002036:	f240 632a 	movw	r3, #1578	; 0x62a
 800203a:	421a      	tst	r2, r3
 800203c:	d10a      	bne.n	8002054 <SD_FindSCR+0xca>
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800203e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002040:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002044:	d0f5      	beq.n	8002032 <SD_FindSCR+0xa8>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002046:	f000 fd41 	bl	8002acc <SDIO_ReadFIFO>
 800204a:	ab01      	add	r3, sp, #4
 800204c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
      index++;
 8002050:	3701      	adds	r7, #1
 8002052:	e7ee      	b.n	8002032 <SD_FindSCR+0xa8>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002054:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002056:	f013 0f08 	tst.w	r3, #8
 800205a:	d003      	beq.n	8002064 <SD_FindSCR+0xda>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800205c:	2308      	movs	r3, #8
 800205e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8002060:	2504      	movs	r5, #4
 8002062:	e7b3      	b.n	8001fcc <SD_FindSCR+0x42>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002064:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d002      	beq.n	8002072 <SD_FindSCR+0xe8>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800206c:	2502      	movs	r5, #2
 800206e:	6385      	str	r5, [r0, #56]	; 0x38
    return errorstate;
 8002070:	e7ac      	b.n	8001fcc <SD_FindSCR+0x42>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002072:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002074:	f013 0f20 	tst.w	r3, #32
 8002078:	d003      	beq.n	8002082 <SD_FindSCR+0xf8>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800207a:	2320      	movs	r3, #32
 800207c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800207e:	2506      	movs	r5, #6
 8002080:	e7a4      	b.n	8001fcc <SD_FindSCR+0x42>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8002082:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002084:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002088:	d004      	beq.n	8002094 <SD_FindSCR+0x10a>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 800208a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8002090:	2507      	movs	r5, #7
 8002092:	e79b      	b.n	8001fcc <SD_FindSCR+0x42>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002094:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002098:	6383      	str	r3, [r0, #56]	; 0x38
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800209a:	9a01      	ldr	r2, [sp, #4]
 800209c:	0213      	lsls	r3, r2, #8
 800209e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 80020a6:	0a11      	lsrs	r1, r2, #8
 80020a8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80020ac:	430b      	orrs	r3, r1
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 80020ae:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80020b2:	6073      	str	r3, [r6, #4]
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80020b4:	9a02      	ldr	r2, [sp, #8]
 80020b6:	0213      	lsls	r3, r2, #8
 80020b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 80020c0:	0a11      	lsrs	r1, r2, #8
 80020c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80020c6:	430b      	orrs	r3, r1
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 80020c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80020cc:	6033      	str	r3, [r6, #0]
  return errorstate;
 80020ce:	e77d      	b.n	8001fcc <SD_FindSCR+0x42>

080020d0 <SD_WideBus_Enable>:
{
 80020d0:	b530      	push	{r4, r5, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 80020d6:	2100      	movs	r1, #0
 80020d8:	9103      	str	r1, [sp, #12]
 80020da:	9104      	str	r1, [sp, #16]
 80020dc:	9105      	str	r1, [sp, #20]
 80020de:	9106      	str	r1, [sp, #24]
 80020e0:	9107      	str	r1, [sp, #28]
  uint32_t scr[2] = {0, 0};
 80020e2:	9101      	str	r1, [sp, #4]
 80020e4:	9102      	str	r1, [sp, #8]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80020e6:	6800      	ldr	r0, [r0, #0]
 80020e8:	f000 fd18 	bl	8002b1c <SDIO_GetResponse>
 80020ec:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80020f0:	d003      	beq.n	80020fa <SD_WideBus_Enable+0x2a>
    return errorstate;
 80020f2:	230e      	movs	r3, #14
}   
 80020f4:	4618      	mov	r0, r3
 80020f6:	b009      	add	sp, #36	; 0x24
 80020f8:	bd30      	pop	{r4, r5, pc}
  errorstate = SD_FindSCR(hsd, scr);
 80020fa:	a901      	add	r1, sp, #4
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ff44 	bl	8001f8a <SD_FindSCR>
  if(errorstate != SD_OK)
 8002102:	4603      	mov	r3, r0
 8002104:	2800      	cmp	r0, #0
 8002106:	d1f5      	bne.n	80020f4 <SD_WideBus_Enable+0x24>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800210e:	d101      	bne.n	8002114 <SD_WideBus_Enable+0x44>
    return errorstate;
 8002110:	2325      	movs	r3, #37	; 0x25
 8002112:	e7ef      	b.n	80020f4 <SD_WideBus_Enable+0x24>
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8002114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	9303      	str	r3, [sp, #12]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800211a:	2537      	movs	r5, #55	; 0x37
 800211c:	9504      	str	r5, [sp, #16]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	9305      	str	r3, [sp, #20]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8002122:	2300      	movs	r3, #0
 8002124:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212a:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800212c:	a903      	add	r1, sp, #12
 800212e:	6820      	ldr	r0, [r4, #0]
 8002130:	f000 fcdc 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8002134:	4629      	mov	r1, r5
 8002136:	4620      	mov	r0, r4
 8002138:	f7ff fc10 	bl	800195c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 800213c:	4603      	mov	r3, r0
 800213e:	2800      	cmp	r0, #0
 8002140:	d1d8      	bne.n	80020f4 <SD_WideBus_Enable+0x24>
    sdio_cmdinitstructure.Argument         = 2;
 8002142:	2302      	movs	r3, #2
 8002144:	9303      	str	r3, [sp, #12]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8002146:	2506      	movs	r5, #6
 8002148:	9504      	str	r5, [sp, #16]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800214a:	a903      	add	r1, sp, #12
 800214c:	6820      	ldr	r0, [r4, #0]
 800214e:	f000 fccd 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8002152:	4629      	mov	r1, r5
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff fc01 	bl	800195c <SD_CmdResp1Error>
 800215a:	4603      	mov	r3, r0
 800215c:	e7ca      	b.n	80020f4 <SD_WideBus_Enable+0x24>

0800215e <SD_WideBus_Disable>:
{
 800215e:	b530      	push	{r4, r5, lr}
 8002160:	b089      	sub	sp, #36	; 0x24
 8002162:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 8002164:	2100      	movs	r1, #0
 8002166:	9103      	str	r1, [sp, #12]
 8002168:	9104      	str	r1, [sp, #16]
 800216a:	9105      	str	r1, [sp, #20]
 800216c:	9106      	str	r1, [sp, #24]
 800216e:	9107      	str	r1, [sp, #28]
  uint32_t scr[2] = {0, 0};
 8002170:	9101      	str	r1, [sp, #4]
 8002172:	9102      	str	r1, [sp, #8]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8002174:	6800      	ldr	r0, [r0, #0]
 8002176:	f000 fcd1 	bl	8002b1c <SDIO_GetResponse>
 800217a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800217e:	d003      	beq.n	8002188 <SD_WideBus_Disable+0x2a>
    return errorstate;
 8002180:	230e      	movs	r3, #14
}
 8002182:	4618      	mov	r0, r3
 8002184:	b009      	add	sp, #36	; 0x24
 8002186:	bd30      	pop	{r4, r5, pc}
  errorstate = SD_FindSCR(hsd, scr);
 8002188:	a901      	add	r1, sp, #4
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff fefd 	bl	8001f8a <SD_FindSCR>
  if(errorstate != SD_OK)
 8002190:	4603      	mov	r3, r0
 8002192:	2800      	cmp	r0, #0
 8002194:	d1f5      	bne.n	8002182 <SD_WideBus_Disable+0x24>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8002196:	9b02      	ldr	r3, [sp, #8]
 8002198:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800219c:	d101      	bne.n	80021a2 <SD_WideBus_Disable+0x44>
    return errorstate;
 800219e:	2325      	movs	r3, #37	; 0x25
 80021a0:	e7ef      	b.n	8002182 <SD_WideBus_Disable+0x24>
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80021a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	9303      	str	r3, [sp, #12]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80021a8:	2537      	movs	r5, #55	; 0x37
 80021aa:	9504      	str	r5, [sp, #16]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	9305      	str	r3, [sp, #20]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80021b0:	2300      	movs	r3, #0
 80021b2:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80021ba:	a903      	add	r1, sp, #12
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	f000 fc95 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80021c2:	4629      	mov	r1, r5
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff fbc9 	bl	800195c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80021ca:	4603      	mov	r3, r0
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d1d8      	bne.n	8002182 <SD_WideBus_Disable+0x24>
    sdio_cmdinitstructure.Argument         = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	9303      	str	r3, [sp, #12]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80021d4:	2506      	movs	r5, #6
 80021d6:	9504      	str	r5, [sp, #16]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80021d8:	a903      	add	r1, sp, #12
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	f000 fc86 	bl	8002aec <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 80021e0:	4629      	mov	r1, r5
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff fbba 	bl	800195c <SD_CmdResp1Error>
 80021e8:	4603      	mov	r3, r0
 80021ea:	e7ca      	b.n	8002182 <SD_WideBus_Disable+0x24>

080021ec <HAL_SD_XferCpltCallback>:
{
 80021ec:	4770      	bx	lr

080021ee <HAL_SD_XferErrorCallback>:
{
 80021ee:	4770      	bx	lr

080021f0 <HAL_SD_IRQHandler>:
{  
 80021f0:	b510      	push	{r4, lr}
 80021f2:	4604      	mov	r4, r0
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DATAEND))
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80021fc:	d11b      	bne.n	8002236 <HAL_SD_IRQHandler+0x46>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DCRCFAIL))
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	f012 0f02 	tst.w	r2, #2
 8002204:	d128      	bne.n	8002258 <HAL_SD_IRQHandler+0x68>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DTIMEOUT))
 8002206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002208:	f012 0f08 	tst.w	r2, #8
 800220c:	d12a      	bne.n	8002264 <HAL_SD_IRQHandler+0x74>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_RXOVERR))
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	f012 0f20 	tst.w	r2, #32
 8002214:	d12d      	bne.n	8002272 <HAL_SD_IRQHandler+0x82>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_TXUNDERR))
 8002216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002218:	f012 0f10 	tst.w	r2, #16
 800221c:	d130      	bne.n	8002280 <HAL_SD_IRQHandler+0x90>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_STBITERR))
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002224:	d010      	beq.n	8002248 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8002226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_START_BIT_ERR;
 800222c:	2307      	movs	r3, #7
 800222e:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8002230:	f7ff ffdd 	bl	80021ee <HAL_SD_XferErrorCallback>
 8002234:	e008      	b.n	8002248 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_IT_DATAEND);  
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 800223c:	2301      	movs	r3, #1
 800223e:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8002244:	f7ff ffd2 	bl	80021ec <HAL_SD_XferCpltCallback>
  __HAL_SD_SDIO_DISABLE_IT(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND  |\
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800224c:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002250:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002254:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002256:	bd10      	pop	{r4, pc}
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002258:	2202      	movs	r2, #2
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 800225c:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800225e:	f7ff ffc6 	bl	80021ee <HAL_SD_XferErrorCallback>
 8002262:	e7f1      	b.n	8002248 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002264:	2208      	movs	r2, #8
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8002268:	2304      	movs	r3, #4
 800226a:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800226c:	f7ff ffbf 	bl	80021ee <HAL_SD_XferErrorCallback>
 8002270:	e7ea      	b.n	8002248 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002272:	2220      	movs	r2, #32
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8002276:	2306      	movs	r3, #6
 8002278:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800227a:	f7ff ffb8 	bl	80021ee <HAL_SD_XferErrorCallback>
 800227e:	e7e3      	b.n	8002248 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8002280:	2210      	movs	r2, #16
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8002284:	2305      	movs	r3, #5
 8002286:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8002288:	f7ff ffb1 	bl	80021ee <HAL_SD_XferErrorCallback>
 800228c:	e7dc      	b.n	8002248 <HAL_SD_IRQHandler+0x58>

0800228e <HAL_SD_Get_CardInfo>:
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	4603      	mov	r3, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8002292:	f890 2020 	ldrb.w	r2, [r0, #32]
 8002296:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800229a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800229c:	f8a1 2054 	strh.w	r2, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 80022a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80022a2:	0f90      	lsrs	r0, r2, #30
 80022a4:	7008      	strb	r0, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80022a6:	f3c2 6083 	ubfx	r0, r2, #26, #4
 80022aa:	7048      	strb	r0, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 80022ac:	f3c2 6201 	ubfx	r2, r2, #24, #2
 80022b0:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 80022b2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80022b6:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 80022b8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80022bc:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 80022be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80022c2:	714a      	strb	r2, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 80022c4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	80ca      	strh	r2, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
 80022cc:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80022ce:	88ca      	ldrh	r2, [r1, #6]
 80022d0:	b292      	uxth	r2, r2
 80022d2:	f3c0 1403 	ubfx	r4, r0, #4, #4
 80022d6:	4322      	orrs	r2, r4
 80022d8:	80ca      	strh	r2, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80022da:	f000 000f 	and.w	r0, r0, #15
 80022de:	7208      	strb	r0, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 80022e0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80022e4:	09d0      	lsrs	r0, r2, #7
 80022e6:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80022e8:	f3c2 1080 	ubfx	r0, r2, #6, #1
 80022ec:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80022ee:	f3c2 1040 	ubfx	r0, r2, #5, #1
 80022f2:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80022f4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 80022f8:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 80022fa:	2000      	movs	r0, #0
 80022fc:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 80022fe:	6a18      	ldr	r0, [r3, #32]
 8002300:	2801      	cmp	r0, #1
 8002302:	f240 80b1 	bls.w	8002468 <HAL_SD_Get_CardInfo+0x1da>
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8002306:	2802      	cmp	r0, #2
 8002308:	f000 80f2 	beq.w	80024f0 <HAL_SD_Get_CardInfo+0x262>
    errorstate = SD_ERROR;
 800230c:	2029      	movs	r0, #41	; 0x29
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800230e:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8002312:	764c      	strb	r4, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8002314:	0052      	lsls	r2, r2, #1
 8002316:	f002 027e 	and.w	r2, r2, #126	; 0x7e
 800231a:	768a      	strb	r2, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800231c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800231e:	7e8c      	ldrb	r4, [r1, #26]
 8002320:	f3c2 15c0 	ubfx	r5, r2, #7, #1
 8002324:	432c      	orrs	r4, r5
 8002326:	768c      	strb	r4, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8002328:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800232c:	76ca      	strb	r2, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 800232e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002330:	0e14      	lsrs	r4, r2, #24
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8002332:	0fd5      	lsrs	r5, r2, #31
 8002334:	770d      	strb	r5, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8002336:	f3c2 7541 	ubfx	r5, r2, #29, #2
 800233a:	774d      	strb	r5, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800233c:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8002340:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8002342:	00a2      	lsls	r2, r4, #2
 8002344:	f002 020c 	and.w	r2, r2, #12
 8002348:	77ca      	strb	r2, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800234a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800234c:	7fcc      	ldrb	r4, [r1, #31]
 800234e:	f3c2 5581 	ubfx	r5, r2, #22, #2
 8002352:	432c      	orrs	r4, r5
 8002354:	77cc      	strb	r4, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8002356:	f3c2 5440 	ubfx	r4, r2, #21, #1
 800235a:	f881 4020 	strb.w	r4, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800235e:	2400      	movs	r4, #0
 8002360:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8002364:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002368:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800236c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 800236e:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8002372:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8002376:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800237a:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 800237e:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8002382:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8002386:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800238a:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800238e:	f3c2 2481 	ubfx	r4, r2, #10, #2
 8002392:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8002396:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800239a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800239e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80023a0:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80023a4:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80023a8:	2401      	movs	r4, #1
 80023aa:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 80023ae:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80023b2:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 80023b6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80023ba:	0212      	lsls	r2, r2, #8
 80023bc:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80023be:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80023c0:	b292      	uxth	r2, r2
 80023c2:	f893 5039 	ldrb.w	r5, [r3, #57]	; 0x39
 80023c6:	432a      	orrs	r2, r5
 80023c8:	85ca      	strh	r2, [r1, #46]	; 0x2e
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
 80023ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023cc:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80023ce:	630a      	str	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80023d0:	f893 503f 	ldrb.w	r5, [r3, #63]	; 0x3f
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80023d4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80023d6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80023da:	630a      	str	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
 80023dc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 80023de:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	b292      	uxth	r2, r2
 80023e4:	432a      	orrs	r2, r5
 80023e6:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80023e8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80023ea:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80023ee:	432a      	orrs	r2, r5
 80023f0:	630a      	str	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 80023f2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName2 = tmp;
 80023f6:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 80023fa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  pCardInfo->SD_cid.ProdRev = tmp;
 80023fe:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8002402:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002406:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8002408:	638a      	str	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
 800240a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240c:	0a12      	lsrs	r2, r2, #8
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800240e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8002410:	0412      	lsls	r2, r2, #16
 8002412:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8002416:	432a      	orrs	r2, r5
 8002418:	638a      	str	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
 800241a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800241c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	b292      	uxth	r2, r2
 8002422:	432a      	orrs	r2, r5
 8002424:	638a      	str	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8002426:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
  pCardInfo->SD_cid.ProdSN |= tmp;
 800242a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800242c:	432a      	orrs	r2, r5
 800242e:	638a      	str	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
 8002430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8002432:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
 8002436:	f3c2 5603 	ubfx	r6, r2, #20, #4
 800243a:	4335      	orrs	r5, r6
 800243c:	f881 503c 	strb.w	r5, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8002440:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002444:	0212      	lsls	r2, r2, #8
 8002446:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800244a:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800244c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800244e:	b292      	uxth	r2, r2
 8002450:	f893 5045 	ldrb.w	r5, [r3, #69]	; 0x45
 8002454:	432a      	orrs	r2, r5
 8002456:	87ca      	strh	r2, [r1, #62]	; 0x3e
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800245a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800245e:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8002462:	f881 4041 	strb.w	r4, [r1, #65]	; 0x41
}
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8002468:	0292      	lsls	r2, r2, #10
 800246a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800246e:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 8002470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8002472:	6908      	ldr	r0, [r1, #16]
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 800247a:	4302      	orrs	r2, r0
 800247c:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8002480:	6908      	ldr	r0, [r1, #16]
 8002482:	ea40 7092 	orr.w	r0, r0, r2, lsr #30
 8002486:	6108      	str	r0, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8002488:	f3c2 60c2 	ubfx	r0, r2, #27, #3
 800248c:	7508      	strb	r0, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800248e:	f3c2 6202 	ubfx	r2, r2, #24, #3
 8002492:	754a      	strb	r2, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 8002494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002496:	f3c0 4207 	ubfx	r2, r0, #16, #8
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800249a:	f3c0 5442 	ubfx	r4, r0, #21, #3
 800249e:	758c      	strb	r4, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80024a0:	f3c0 4082 	ubfx	r0, r0, #18, #3
 80024a4:	75c8      	strb	r0, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	f002 0206 	and.w	r2, r2, #6
 80024ac:	760a      	strb	r2, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 80024ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024b0:	f3c0 2207 	ubfx	r2, r0, #8, #8
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80024b4:	7e0c      	ldrb	r4, [r1, #24]
 80024b6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80024ba:	4320      	orrs	r0, r4
 80024bc:	7608      	strb	r0, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80024be:	6908      	ldr	r0, [r1, #16]
 80024c0:	f100 0e01 	add.w	lr, r0, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80024c4:	7e0c      	ldrb	r4, [r1, #24]
 80024c6:	3402      	adds	r4, #2
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f404 	lsl.w	r4, r0, r4
 80024ce:	17e7      	asrs	r7, r4, #31
 80024d0:	fbae 4504 	umull	r4, r5, lr, r4
 80024d4:	fb0e 5507 	mla	r5, lr, r7, r5
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80024d8:	7a0e      	ldrb	r6, [r1, #8]
 80024da:	b2f6      	uxtb	r6, r6
 80024dc:	40b0      	lsls	r0, r6
 80024de:	6508      	str	r0, [r1, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80024e0:	fba4 6700 	umull	r6, r7, r4, r0
 80024e4:	fb00 7705 	mla	r7, r0, r5, r7
 80024e8:	e9c1 6712 	strd	r6, r7, [r1, #72]	; 0x48
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80024ec:	2000      	movs	r0, #0
 80024ee:	e70e      	b.n	800230e <HAL_SD_Get_CardInfo+0x80>
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 80024f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80024f2:	0412      	lsls	r2, r2, #16
 80024f4:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80024f8:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80024fa:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80024fe:	690a      	ldr	r2, [r1, #16]
 8002500:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002504:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8002506:	6908      	ldr	r0, [r1, #16]
 8002508:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800250c:	4302      	orrs	r2, r0
 800250e:	610a      	str	r2, [r1, #16]
 8002510:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8002514:	690c      	ldr	r4, [r1, #16]
 8002516:	2500      	movs	r5, #0
 8002518:	3401      	adds	r4, #1
 800251a:	f145 0500 	adc.w	r5, r5, #0
 800251e:	04e8      	lsls	r0, r5, #19
 8002520:	ea40 3054 	orr.w	r0, r0, r4, lsr #13
 8002524:	04e4      	lsls	r4, r4, #19
 8002526:	648c      	str	r4, [r1, #72]	; 0x48
 8002528:	64c8      	str	r0, [r1, #76]	; 0x4c
    pCardInfo->CardBlockSize = 512;    
 800252a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800252e:	6508      	str	r0, [r1, #80]	; 0x50
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8002530:	2000      	movs	r0, #0
 8002532:	e6ec      	b.n	800230e <HAL_SD_Get_CardInfo+0x80>

08002534 <HAL_SD_Init>:
{ 
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	4605      	mov	r5, r0
 800253a:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  SD_InitTypeDef tmpinit = {0};
 8002542:	ac05      	add	r4, sp, #20
 8002544:	9305      	str	r3, [sp, #20]
 8002546:	9306      	str	r3, [sp, #24]
 8002548:	9307      	str	r3, [sp, #28]
 800254a:	9308      	str	r3, [sp, #32]
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_SD_MspInit(hsd);
 800254e:	f002 fb11 	bl	8004b74 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002552:	23c3      	movs	r3, #195	; 0xc3
 8002554:	930a      	str	r3, [sp, #40]	; 0x28
  SDIO_Init(hsd->Instance, tmpinit);
 8002556:	ab08      	add	r3, sp, #32
 8002558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800255c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002560:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002564:	6828      	ldr	r0, [r5, #0]
 8002566:	f000 fa96 	bl	8002a96 <SDIO_Init>
  errorstate = SD_PowerON(hsd); 
 800256a:	4628      	mov	r0, r5
 800256c:	f7ff fa84 	bl	8001a78 <SD_PowerON>
 8002570:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  if(errorstate != SD_OK)     
 8002574:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8002578:	b123      	cbz	r3, 8002584 <HAL_SD_Init+0x50>
    return errorstate;
 800257a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 800257e:	b2c0      	uxtb	r0, r0
}
 8002580:	b00c      	add	sp, #48	; 0x30
 8002582:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SD_Initialize_Cards(hsd);
 8002584:	4628      	mov	r0, r5
 8002586:	f7ff fc7b 	bl	8001e80 <SD_Initialize_Cards>
 800258a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  if (errorstate != SD_OK)
 800258e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8002592:	b11b      	cbz	r3, 800259c <HAL_SD_Init+0x68>
    return errorstate;
 8002594:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8002598:	b2c0      	uxtb	r0, r0
 800259a:	e7f1      	b.n	8002580 <HAL_SD_Init+0x4c>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800259c:	4631      	mov	r1, r6
 800259e:	4628      	mov	r0, r5
 80025a0:	f7ff fe75 	bl	800228e <HAL_SD_Get_CardInfo>
 80025a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  if (errorstate == SD_OK)
 80025a8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80025ac:	b183      	cbz	r3, 80025d0 <HAL_SD_Init+0x9c>
  SDIO_Init(hsd->Instance, hsd->Init);   
 80025ae:	462b      	mov	r3, r5
 80025b0:	f853 4b10 	ldr.w	r4, [r3], #16
 80025b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80025bc:	3504      	adds	r5, #4
 80025be:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 fa67 	bl	8002a96 <SDIO_Init>
  return errorstate;
 80025c8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80025cc:	b2c0      	uxtb	r0, r0
 80025ce:	e7d7      	b.n	8002580 <HAL_SD_Init+0x4c>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80025d0:	f8b6 2054 	ldrh.w	r2, [r6, #84]	; 0x54
 80025d4:	0412      	lsls	r2, r2, #16
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff fb0c 	bl	8001bf4 <SD_Select_Deselect>
 80025dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80025e0:	e7e5      	b.n	80025ae <HAL_SD_Init+0x7a>

080025e2 <HAL_SD_WideBusOperation_Config>:
{
 80025e2:	b570      	push	{r4, r5, r6, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
  if (hsd->CardType == MULTIMEDIA_CARD)
 80025e6:	6a03      	ldr	r3, [r0, #32]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d02f      	beq.n	800264c <HAL_SD_WideBusOperation_Config+0x6a>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_SD_WideBusOperation_Config+0x12>
    errorstate = SD_ERROR;
 80025f0:	2529      	movs	r5, #41	; 0x29
 80025f2:	e02c      	b.n	800264e <HAL_SD_WideBusOperation_Config+0x6c>
 80025f4:	460e      	mov	r6, r1
 80025f6:	4604      	mov	r4, r0
    if (WideMode == SDIO_BUS_WIDE_8B)
 80025f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025fc:	d024      	beq.n	8002648 <HAL_SD_WideBusOperation_Config+0x66>
    else if (WideMode == SDIO_BUS_WIDE_4B)
 80025fe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002602:	d019      	beq.n	8002638 <HAL_SD_WideBusOperation_Config+0x56>
    else if (WideMode == SDIO_BUS_WIDE_1B)
 8002604:	b1e1      	cbz	r1, 8002640 <HAL_SD_WideBusOperation_Config+0x5e>
      errorstate = SD_INVALID_PARAMETER;
 8002606:	2526      	movs	r5, #38	; 0x26
    if (errorstate == SD_OK)
 8002608:	bb0d      	cbnz	r5, 800264e <HAL_SD_WideBusOperation_Config+0x6c>
      init.ClockEdge           = hsd->Init.ClockEdge;
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	9304      	str	r3, [sp, #16]
      init.ClockBypass         = hsd->Init.ClockBypass;
 800260e:	68a3      	ldr	r3, [r4, #8]
 8002610:	9305      	str	r3, [sp, #20]
      init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002612:	68e3      	ldr	r3, [r4, #12]
 8002614:	9306      	str	r3, [sp, #24]
      init.BusWide             = WideMode;
 8002616:	9607      	str	r6, [sp, #28]
      init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002618:	6963      	ldr	r3, [r4, #20]
 800261a:	9308      	str	r3, [sp, #32]
      init.ClockDiv            = hsd->Init.ClockDiv;
 800261c:	69a3      	ldr	r3, [r4, #24]
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
      SDIO_Init(hsd->Instance, init);
 8002620:	6824      	ldr	r4, [r4, #0]
 8002622:	ab0a      	add	r3, sp, #40	; 0x28
 8002624:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002628:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800262c:	ab04      	add	r3, sp, #16
 800262e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002630:	4620      	mov	r0, r4
 8002632:	f000 fa30 	bl	8002a96 <SDIO_Init>
 8002636:	e00a      	b.n	800264e <HAL_SD_WideBusOperation_Config+0x6c>
      errorstate = SD_WideBus_Enable(hsd);
 8002638:	f7ff fd4a 	bl	80020d0 <SD_WideBus_Enable>
 800263c:	4605      	mov	r5, r0
 800263e:	e7e3      	b.n	8002608 <HAL_SD_WideBusOperation_Config+0x26>
      errorstate = SD_WideBus_Disable(hsd);
 8002640:	f7ff fd8d 	bl	800215e <SD_WideBus_Disable>
 8002644:	4605      	mov	r5, r0
 8002646:	e7df      	b.n	8002608 <HAL_SD_WideBusOperation_Config+0x26>
      errorstate = SD_UNSUPPORTED_FEATURE;
 8002648:	2527      	movs	r5, #39	; 0x27
 800264a:	e7dd      	b.n	8002608 <HAL_SD_WideBusOperation_Config+0x26>
    errorstate = SD_UNSUPPORTED_FEATURE;
 800264c:	2527      	movs	r5, #39	; 0x27
}
 800264e:	4628      	mov	r0, r5
 8002650:	b00a      	add	sp, #40	; 0x28
 8002652:	bd70      	pop	{r4, r5, r6, pc}

08002654 <HAL_SD_StopTransfer>:
{
 8002654:	b530      	push	{r4, r5, lr}
 8002656:	b087      	sub	sp, #28
 8002658:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 800265a:	2300      	movs	r3, #0
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8002660:	250c      	movs	r5, #12
 8002662:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8002664:	2340      	movs	r3, #64	; 0x40
 8002666:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800266e:	a901      	add	r1, sp, #4
 8002670:	6800      	ldr	r0, [r0, #0]
 8002672:	f000 fa3b 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8002676:	4629      	mov	r1, r5
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff f96f 	bl	800195c <SD_CmdResp1Error>
}
 800267e:	b007      	add	sp, #28
 8002680:	bd30      	pop	{r4, r5, pc}

08002682 <HAL_SD_ReadBlocks>:
{
 8002682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	4604      	mov	r4, r0
 800268a:	460d      	mov	r5, r1
 800268c:	4691      	mov	r9, r2
 800268e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8002690:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure = {0};
 8002694:	2200      	movs	r2, #0
 8002696:	920a      	str	r2, [sp, #40]	; 0x28
  SDIO_DataInitTypeDef sdio_datainitstructure = {0};
 8002698:	9201      	str	r2, [sp, #4]
 800269a:	9202      	str	r2, [sp, #8]
 800269c:	9203      	str	r2, [sp, #12]
 800269e:	9204      	str	r2, [sp, #16]
 80026a0:	9205      	str	r2, [sp, #20]
 80026a2:	9206      	str	r2, [sp, #24]
  hsd->Instance->DCTRL = 0;
 80026a4:	6801      	ldr	r1, [r0, #0]
 80026a6:	62ca      	str	r2, [r1, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80026a8:	6a02      	ldr	r2, [r0, #32]
 80026aa:	2a02      	cmp	r2, #2
 80026ac:	d015      	beq.n	80026da <HAL_SD_ReadBlocks+0x58>
  sdio_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 80026ae:	9607      	str	r6, [sp, #28]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80026b0:	2710      	movs	r7, #16
 80026b2:	9708      	str	r7, [sp, #32]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80026be:	a907      	add	r1, sp, #28
 80026c0:	6820      	ldr	r0, [r4, #0]
 80026c2:	f000 fa13 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80026c6:	4639      	mov	r1, r7
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff f947 	bl	800195c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 80026ce:	4607      	mov	r7, r0
 80026d0:	b150      	cbz	r0, 80026e8 <HAL_SD_ReadBlocks+0x66>
}
 80026d2:	4638      	mov	r0, r7
 80026d4:	b00c      	add	sp, #48	; 0x30
 80026d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ReadAddr /= 512;
 80026da:	ea4f 2259 	mov.w	r2, r9, lsr #9
 80026de:	ea42 59c3 	orr.w	r9, r2, r3, lsl #23
    BlockSize = 512;
 80026e2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80026e6:	e7e2      	b.n	80026ae <HAL_SD_ReadBlocks+0x2c>
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	9301      	str	r3, [sp, #4]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 80026ee:	fb0a f306 	mul.w	r3, sl, r6
 80026f2:	9302      	str	r3, [sp, #8]
  sdio_datainitstructure.DataBlockSize = DATA_BLOCK_SIZE;
 80026f4:	2390      	movs	r3, #144	; 0x90
 80026f6:	9303      	str	r3, [sp, #12]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80026f8:	2302      	movs	r3, #2
 80026fa:	9304      	str	r3, [sp, #16]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	9305      	str	r3, [sp, #20]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8002700:	2301      	movs	r3, #1
 8002702:	9306      	str	r3, [sp, #24]
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8002704:	a901      	add	r1, sp, #4
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	f000 fa14 	bl	8002b34 <SDIO_DataConfig>
  if(NumberOfBlocks > 1)
 800270c:	f1ba 0f01 	cmp.w	sl, #1
 8002710:	d91e      	bls.n	8002750 <HAL_SD_ReadBlocks+0xce>
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8002712:	2312      	movs	r3, #18
 8002714:	9308      	str	r3, [sp, #32]
  sdio_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8002716:	a90c      	add	r1, sp, #48	; 0x30
 8002718:	f841 9d14 	str.w	r9, [r1, #-20]!
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	f000 f9e5 	bl	8002aec <SDIO_SendCommand>
  if(NumberOfBlocks > 1)
 8002722:	f1ba 0f01 	cmp.w	sl, #1
 8002726:	d922      	bls.n	800276e <HAL_SD_ReadBlocks+0xec>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8002728:	2112      	movs	r1, #18
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff f916 	bl	800195c <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8002730:	4607      	mov	r7, r0
 8002732:	2800      	cmp	r0, #0
 8002734:	d1cd      	bne.n	80026d2 <HAL_SD_ReadBlocks+0x50>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273a:	f240 322a 	movw	r2, #810	; 0x32a
 800273e:	4211      	tst	r1, r2
 8002740:	d135      	bne.n	80027ae <HAL_SD_ReadBlocks+0x12c>
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002748:	d0f5      	beq.n	8002736 <HAL_SD_ReadBlocks+0xb4>
 800274a:	f04f 0800 	mov.w	r8, #0
 800274e:	e009      	b.n	8002764 <HAL_SD_ReadBlocks+0xe2>
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 8002750:	2311      	movs	r3, #17
 8002752:	9308      	str	r3, [sp, #32]
 8002754:	e7df      	b.n	8002716 <HAL_SD_ReadBlocks+0x94>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	f000 f9b8 	bl	8002acc <SDIO_ReadFIFO>
 800275c:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
        for (count = 0; count < 8; count++)
 8002760:	f108 0801 	add.w	r8, r8, #1
 8002764:	f1b8 0f07 	cmp.w	r8, #7
 8002768:	d9f5      	bls.n	8002756 <HAL_SD_ReadBlocks+0xd4>
        tempbuff += 8;
 800276a:	3520      	adds	r5, #32
 800276c:	e7e3      	b.n	8002736 <HAL_SD_ReadBlocks+0xb4>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 800276e:	2111      	movs	r1, #17
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff f8f3 	bl	800195c <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8002776:	4607      	mov	r7, r0
 8002778:	2800      	cmp	r0, #0
 800277a:	d1aa      	bne.n	80026d2 <HAL_SD_ReadBlocks+0x50>
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002780:	f240 622a 	movw	r2, #1578	; 0x62a
 8002784:	4211      	tst	r1, r2
 8002786:	d112      	bne.n	80027ae <HAL_SD_ReadBlocks+0x12c>
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800278e:	d0f5      	beq.n	800277c <HAL_SD_ReadBlocks+0xfa>
 8002790:	f04f 0800 	mov.w	r8, #0
 8002794:	e006      	b.n	80027a4 <HAL_SD_ReadBlocks+0x122>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f000 f998 	bl	8002acc <SDIO_ReadFIFO>
 800279c:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
        for (count = 0; count < 8; count++)
 80027a0:	f108 0801 	add.w	r8, r8, #1
 80027a4:	f1b8 0f07 	cmp.w	r8, #7
 80027a8:	d9f5      	bls.n	8002796 <HAL_SD_ReadBlocks+0x114>
        tempbuff += 8;
 80027aa:	3520      	adds	r5, #32
 80027ac:	e7e6      	b.n	800277c <HAL_SD_ReadBlocks+0xfa>
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1))
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027b6:	d005      	beq.n	80027c4 <HAL_SD_ReadBlocks+0x142>
 80027b8:	f1ba 0f01 	cmp.w	sl, #1
 80027bc:	d902      	bls.n	80027c4 <HAL_SD_ReadBlocks+0x142>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 80027be:	6a23      	ldr	r3, [r4, #32]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d908      	bls.n	80027d6 <HAL_SD_ReadBlocks+0x154>
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c8:	f012 0f08 	tst.w	r2, #8
 80027cc:	d008      	beq.n	80027e0 <HAL_SD_ReadBlocks+0x15e>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80027ce:	2208      	movs	r2, #8
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80027d2:	2704      	movs	r7, #4
 80027d4:	e77d      	b.n	80026d2 <HAL_SD_ReadBlocks+0x50>
      errorstate = HAL_SD_StopTransfer(hsd);
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff ff3c 	bl	8002654 <HAL_SD_StopTransfer>
 80027dc:	4607      	mov	r7, r0
 80027de:	e7f1      	b.n	80027c4 <HAL_SD_ReadBlocks+0x142>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	f012 0f02 	tst.w	r2, #2
 80027e6:	d002      	beq.n	80027ee <HAL_SD_ReadBlocks+0x16c>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80027e8:	2702      	movs	r7, #2
 80027ea:	639f      	str	r7, [r3, #56]	; 0x38
    return errorstate;
 80027ec:	e771      	b.n	80026d2 <HAL_SD_ReadBlocks+0x50>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80027ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f0:	f012 0f20 	tst.w	r2, #32
 80027f4:	d003      	beq.n	80027fe <HAL_SD_ReadBlocks+0x17c>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80027f6:	2220      	movs	r2, #32
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80027fa:	2706      	movs	r7, #6
 80027fc:	e769      	b.n	80026d2 <HAL_SD_ReadBlocks+0x50>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 80027fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002800:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002804:	d014      	beq.n	8002830 <HAL_SD_ReadBlocks+0x1ae>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8002806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800280c:	2707      	movs	r7, #7
 800280e:	e760      	b.n	80026d2 <HAL_SD_ReadBlocks+0x50>
    *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002810:	f000 f95c 	bl	8002acc <SDIO_ReadFIFO>
 8002814:	f845 0b04 	str.w	r0, [r5], #4
    count--;
 8002818:	3e01      	subs	r6, #1
  while ((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (count > 0))
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800281e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002822:	d001      	beq.n	8002828 <HAL_SD_ReadBlocks+0x1a6>
 8002824:	2e00      	cmp	r6, #0
 8002826:	d1f3      	bne.n	8002810 <HAL_SD_ReadBlocks+0x18e>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002828:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800282c:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800282e:	e750      	b.n	80026d2 <HAL_SD_ReadBlocks+0x50>
 8002830:	f04f 36ff 	mov.w	r6, #4294967295
 8002834:	e7f1      	b.n	800281a <HAL_SD_ReadBlocks+0x198>

08002836 <HAL_SD_WriteBlocks>:
{
 8002836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	4604      	mov	r4, r0
 800283e:	460d      	mov	r5, r1
 8002840:	4691      	mov	r9, r2
 8002842:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8002844:	9f15      	ldr	r7, [sp, #84]	; 0x54
  SDIO_CmdInitTypeDef sdio_cmdinitstructure = {0};
 8002846:	2200      	movs	r2, #0
 8002848:	920a      	str	r2, [sp, #40]	; 0x28
  SDIO_DataInitTypeDef sdio_datainitstructure = {0};
 800284a:	9201      	str	r2, [sp, #4]
 800284c:	9202      	str	r2, [sp, #8]
 800284e:	9203      	str	r2, [sp, #12]
 8002850:	9204      	str	r2, [sp, #16]
 8002852:	9205      	str	r2, [sp, #20]
 8002854:	9206      	str	r2, [sp, #24]
  uint8_t cardstate  = 0;
 8002856:	f88d 2003 	strb.w	r2, [sp, #3]
  hsd->Instance->DCTRL = 0;
 800285a:	6801      	ldr	r1, [r0, #0]
 800285c:	62ca      	str	r2, [r1, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800285e:	6a02      	ldr	r2, [r0, #32]
 8002860:	2a02      	cmp	r2, #2
 8002862:	d029      	beq.n	80028b8 <HAL_SD_WriteBlocks+0x82>
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8002864:	9607      	str	r6, [sp, #28]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8002866:	f04f 0810 	mov.w	r8, #16
 800286a:	f8cd 8020 	str.w	r8, [sp, #32]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800286e:	2340      	movs	r3, #64	; 0x40
 8002870:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8002872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002876:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8002878:	a907      	add	r1, sp, #28
 800287a:	6820      	ldr	r0, [r4, #0]
 800287c:	f000 f936 	bl	8002aec <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8002880:	4641      	mov	r1, r8
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff f86a 	bl	800195c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8002888:	4603      	mov	r3, r0
 800288a:	b988      	cbnz	r0, 80028b0 <HAL_SD_WriteBlocks+0x7a>
  if(NumberOfBlocks > 1)
 800288c:	2f01      	cmp	r7, #1
 800288e:	d91a      	bls.n	80028c6 <HAL_SD_WriteBlocks+0x90>
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8002890:	2319      	movs	r3, #25
 8002892:	9308      	str	r3, [sp, #32]
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8002894:	a90c      	add	r1, sp, #48	; 0x30
 8002896:	f841 9d14 	str.w	r9, [r1, #-20]!
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	f000 f926 	bl	8002aec <SDIO_SendCommand>
  if(NumberOfBlocks > 1)
 80028a0:	2f01      	cmp	r7, #1
 80028a2:	d913      	bls.n	80028cc <HAL_SD_WriteBlocks+0x96>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 80028a4:	2119      	movs	r1, #25
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff f858 	bl	800195c <SD_CmdResp1Error>
 80028ac:	4603      	mov	r3, r0
  if (errorstate != SD_OK)
 80028ae:	b19b      	cbz	r3, 80028d8 <HAL_SD_WriteBlocks+0xa2>
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	b00c      	add	sp, #48	; 0x30
 80028b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    WriteAddr /= 512;
 80028b8:	ea4f 2259 	mov.w	r2, r9, lsr #9
 80028bc:	ea42 59c3 	orr.w	r9, r2, r3, lsl #23
    BlockSize = 512;
 80028c0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80028c4:	e7ce      	b.n	8002864 <HAL_SD_WriteBlocks+0x2e>
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 80028c6:	2318      	movs	r3, #24
 80028c8:	9308      	str	r3, [sp, #32]
 80028ca:	e7e3      	b.n	8002894 <HAL_SD_WriteBlocks+0x5e>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 80028cc:	2118      	movs	r1, #24
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff f844 	bl	800195c <SD_CmdResp1Error>
 80028d4:	4603      	mov	r3, r0
 80028d6:	e7ea      	b.n	80028ae <HAL_SD_WriteBlocks+0x78>
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 80028d8:	fb07 f606 	mul.w	r6, r7, r6
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	9301      	str	r3, [sp, #4]
  sdio_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 80028e2:	9602      	str	r6, [sp, #8]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80028e4:	2390      	movs	r3, #144	; 0x90
 80028e6:	9303      	str	r3, [sp, #12]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80028e8:	2300      	movs	r3, #0
 80028ea:	9304      	str	r3, [sp, #16]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80028ec:	9305      	str	r3, [sp, #20]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	9306      	str	r3, [sp, #24]
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 80028f2:	a901      	add	r1, sp, #4
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	f000 f91d 	bl	8002b34 <SDIO_DataConfig>
  if(NumberOfBlocks > 1)
 80028fa:	2f01      	cmp	r7, #1
 80028fc:	d918      	bls.n	8002930 <HAL_SD_WriteBlocks+0xfa>
 80028fe:	f04f 0800 	mov.w	r8, #0
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002906:	f240 321a 	movw	r2, #794	; 0x31a
 800290a:	4211      	tst	r1, r2
 800290c:	d16d      	bne.n	80029ea <HAL_SD_WriteBlocks+0x1b4>
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002914:	d0f5      	beq.n	8002902 <HAL_SD_WriteBlocks+0xcc>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8002916:	eba6 0a08 	sub.w	sl, r6, r8
 800291a:	f1ba 0f1f 	cmp.w	sl, #31
 800291e:	d83f      	bhi.n	80029a0 <HAL_SD_WriteBlocks+0x16a>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8002920:	f01a 0f03 	tst.w	sl, #3
 8002924:	d11d      	bne.n	8002962 <HAL_SD_WriteBlocks+0x12c>
 8002926:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
          for (count = 0; count < restwords; count++)
 800292a:	f04f 0900 	mov.w	r9, #0
 800292e:	e026      	b.n	800297e <HAL_SD_WriteBlocks+0x148>
 8002930:	f04f 0800 	mov.w	r8, #0
    while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002938:	f240 621a 	movw	r2, #1562	; 0x61a
 800293c:	4211      	tst	r1, r2
 800293e:	d154      	bne.n	80029ea <HAL_SD_WriteBlocks+0x1b4>
      if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002946:	d0f5      	beq.n	8002934 <HAL_SD_WriteBlocks+0xfe>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8002948:	eba6 0a08 	sub.w	sl, r6, r8
 800294c:	f1ba 0f1f 	cmp.w	sl, #31
 8002950:	d848      	bhi.n	80029e4 <HAL_SD_WriteBlocks+0x1ae>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8002952:	f01a 0f03 	tst.w	sl, #3
 8002956:	d126      	bne.n	80029a6 <HAL_SD_WriteBlocks+0x170>
 8002958:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
          for (count = 0; count < restwords; count++)
 800295c:	f04f 0900 	mov.w	r9, #0
 8002960:	e02f      	b.n	80029c2 <HAL_SD_WriteBlocks+0x18c>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8002962:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8002966:	f10a 0a01 	add.w	sl, sl, #1
 800296a:	e7de      	b.n	800292a <HAL_SD_WriteBlocks+0xf4>
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 800296c:	4629      	mov	r1, r5
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	f000 f8af 	bl	8002ad2 <SDIO_WriteFIFO>
            tempbuff++;
 8002974:	3504      	adds	r5, #4
            bytestransferred += 4;
 8002976:	f108 0804 	add.w	r8, r8, #4
          for (count = 0; count < restwords; count++)
 800297a:	f109 0901 	add.w	r9, r9, #1
 800297e:	45d1      	cmp	r9, sl
 8002980:	d3f4      	bcc.n	800296c <HAL_SD_WriteBlocks+0x136>
 8002982:	e7be      	b.n	8002902 <HAL_SD_WriteBlocks+0xcc>
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002984:	eb05 0189 	add.w	r1, r5, r9, lsl #2
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	f000 f8a2 	bl	8002ad2 <SDIO_WriteFIFO>
          for (count = 0; count < 8; count++)
 800298e:	f109 0901 	add.w	r9, r9, #1
 8002992:	f1b9 0f07 	cmp.w	r9, #7
 8002996:	d9f5      	bls.n	8002984 <HAL_SD_WriteBlocks+0x14e>
          tempbuff += 8;
 8002998:	3520      	adds	r5, #32
          bytestransferred += 32;
 800299a:	f108 0820 	add.w	r8, r8, #32
 800299e:	e7b0      	b.n	8002902 <HAL_SD_WriteBlocks+0xcc>
 80029a0:	f04f 0900 	mov.w	r9, #0
 80029a4:	e7f5      	b.n	8002992 <HAL_SD_WriteBlocks+0x15c>
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 80029a6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 80029aa:	f10a 0a01 	add.w	sl, sl, #1
 80029ae:	e7d5      	b.n	800295c <HAL_SD_WriteBlocks+0x126>
            SDIO_WriteFIFO(hsd->Instance, tempbuff);
 80029b0:	4629      	mov	r1, r5
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	f000 f88d 	bl	8002ad2 <SDIO_WriteFIFO>
            tempbuff++; 
 80029b8:	3504      	adds	r5, #4
            bytestransferred += 4;
 80029ba:	f108 0804 	add.w	r8, r8, #4
          for (count = 0; count < restwords; count++)
 80029be:	f109 0901 	add.w	r9, r9, #1
 80029c2:	45d1      	cmp	r9, sl
 80029c4:	d3f4      	bcc.n	80029b0 <HAL_SD_WriteBlocks+0x17a>
 80029c6:	e7b5      	b.n	8002934 <HAL_SD_WriteBlocks+0xfe>
            SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80029c8:	eb05 0189 	add.w	r1, r5, r9, lsl #2
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f000 f880 	bl	8002ad2 <SDIO_WriteFIFO>
          for (count = 0; count < 8; count++)
 80029d2:	f109 0901 	add.w	r9, r9, #1
 80029d6:	f1b9 0f07 	cmp.w	r9, #7
 80029da:	d9f5      	bls.n	80029c8 <HAL_SD_WriteBlocks+0x192>
          tempbuff += 8;
 80029dc:	3520      	adds	r5, #32
          bytestransferred += 32;
 80029de:	f108 0820 	add.w	r8, r8, #32
 80029e2:	e7a7      	b.n	8002934 <HAL_SD_WriteBlocks+0xfe>
 80029e4:	f04f 0900 	mov.w	r9, #0
 80029e8:	e7f5      	b.n	80029d6 <HAL_SD_WriteBlocks+0x1a0>
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1))
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029f2:	d004      	beq.n	80029fe <HAL_SD_WriteBlocks+0x1c8>
 80029f4:	2f01      	cmp	r7, #1
 80029f6:	d902      	bls.n	80029fe <HAL_SD_WriteBlocks+0x1c8>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80029f8:	6a23      	ldr	r3, [r4, #32]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d908      	bls.n	8002a10 <HAL_SD_WriteBlocks+0x1da>
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80029fe:	6822      	ldr	r2, [r4, #0]
 8002a00:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a02:	f013 0f08 	tst.w	r3, #8
 8002a06:	d007      	beq.n	8002a18 <HAL_SD_WriteBlocks+0x1e2>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002a08:	2308      	movs	r3, #8
 8002a0a:	6393      	str	r3, [r2, #56]	; 0x38
    return errorstate;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e74f      	b.n	80028b0 <HAL_SD_WriteBlocks+0x7a>
      errorstate = HAL_SD_StopTransfer(hsd);
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff fe1f 	bl	8002654 <HAL_SD_StopTransfer>
 8002a16:	e7f2      	b.n	80029fe <HAL_SD_WriteBlocks+0x1c8>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002a18:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a1a:	f013 0f02 	tst.w	r3, #2
 8002a1e:	d002      	beq.n	8002a26 <HAL_SD_WriteBlocks+0x1f0>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002a20:	2302      	movs	r3, #2
 8002a22:	6393      	str	r3, [r2, #56]	; 0x38
    return errorstate;
 8002a24:	e744      	b.n	80028b0 <HAL_SD_WriteBlocks+0x7a>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002a26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a28:	f013 0f10 	tst.w	r3, #16
 8002a2c:	d003      	beq.n	8002a36 <HAL_SD_WriteBlocks+0x200>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8002a2e:	2310      	movs	r3, #16
 8002a30:	6393      	str	r3, [r2, #56]	; 0x38
    return errorstate;
 8002a32:	2305      	movs	r3, #5
 8002a34:	e73c      	b.n	80028b0 <HAL_SD_WriteBlocks+0x7a>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8002a36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a38:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a3c:	d004      	beq.n	8002a48 <HAL_SD_WriteBlocks+0x212>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8002a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a42:	6393      	str	r3, [r2, #56]	; 0x38
    return errorstate;
 8002a44:	2307      	movs	r3, #7
 8002a46:	e733      	b.n	80028b0 <HAL_SD_WriteBlocks+0x7a>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a48:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002a4c:	6393      	str	r3, [r2, #56]	; 0x38
  errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8002a4e:	f10d 0103 	add.w	r1, sp, #3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7ff f95a 	bl	8001d0c <SD_IsCardProgramming>
 8002a58:	4603      	mov	r3, r0
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8002a5a:	e005      	b.n	8002a68 <HAL_SD_WriteBlocks+0x232>
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 8002a5c:	f10d 0103 	add.w	r1, sp, #3
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff f953 	bl	8001d0c <SD_IsCardProgramming>
 8002a66:	4603      	mov	r3, r0
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f af21 	bne.w	80028b0 <HAL_SD_WriteBlocks+0x7a>
 8002a6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002a72:	3a06      	subs	r2, #6
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	2a01      	cmp	r2, #1
 8002a78:	d9f0      	bls.n	8002a5c <HAL_SD_WriteBlocks+0x226>
 8002a7a:	e719      	b.n	80028b0 <HAL_SD_WriteBlocks+0x7a>

08002a7c <HAL_SD_GetStatus>:
{
 8002a7c:	b508      	push	{r3, lr}
  cardstate = SD_GetState(hsd);
 8002a7e:	f7ff f8f5 	bl	8001c6c <SD_GetState>
  if (cardstate == SD_CARD_TRANSFER)
 8002a82:	2804      	cmp	r0, #4
 8002a84:	d005      	beq.n	8002a92 <HAL_SD_GetStatus+0x16>
  else if(cardstate == SD_CARD_ERROR)
 8002a86:	28ff      	cmp	r0, #255	; 0xff
 8002a88:	d001      	beq.n	8002a8e <HAL_SD_GetStatus+0x12>
    return SD_TRANSFER_BUSY;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	bd08      	pop	{r3, pc}
    return SD_TRANSFER_ERROR;
 8002a8e:	2002      	movs	r0, #2
 8002a90:	bd08      	pop	{r3, pc}
    return SD_TRANSFER_OK;
 8002a92:	2000      	movs	r0, #0
 8002a94:	bd08      	pop	{r3, pc}

08002a96 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002a96:	b084      	sub	sp, #16
 8002a98:	b410      	push	{r4}
 8002a9a:	ac02      	add	r4, sp, #8
 8002a9c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8002aa0:	6842      	ldr	r2, [r0, #4]
 8002aa2:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8002aa6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002aaa:	9903      	ldr	r1, [sp, #12]
 8002aac:	9b02      	ldr	r3, [sp, #8]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	9904      	ldr	r1, [sp, #16]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	9905      	ldr	r1, [sp, #20]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	9906      	ldr	r1, [sp, #24]
 8002aba:	430b      	orrs	r3, r1
 8002abc:	9907      	ldr	r1, [sp, #28]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	6043      	str	r3, [r0, #4]
                                               Init.BusWide             |\
                                               Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	bc10      	pop	{r4}
 8002ac8:	b004      	add	sp, #16
 8002aca:	4770      	bx	lr

08002acc <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002acc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8002ad0:	4770      	bx	lr

08002ad2 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002ad2:	680b      	ldr	r3, [r1, #0]
 8002ad4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4770      	bx	lr

08002adc <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002adc:	2303      	movs	r3, #3
 8002ade:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4770      	bx	lr

08002ae4 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002ae4:	6800      	ldr	r0, [r0, #0]
}
 8002ae6:	f000 0003 	and.w	r0, r0, #3
 8002aea:	4770      	bx	lr

08002aec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002aec:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDIO Argument value */
  SDIOx->ARG = Command->Argument;
 8002aee:	680b      	ldr	r3, [r1, #0]
 8002af0:	6083      	str	r3, [r0, #8]

  /* Set SDIO command parameters */
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8002af2:	68c3      	ldr	r3, [r0, #12]
 8002af4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002af8:	f023 030f 	bic.w	r3, r3, #15
 8002afc:	684a      	ldr	r2, [r1, #4]
 8002afe:	688c      	ldr	r4, [r1, #8]
 8002b00:	4322      	orrs	r2, r4
 8002b02:	68cc      	ldr	r4, [r1, #12]
 8002b04:	4322      	orrs	r2, r4
 8002b06:	6909      	ldr	r1, [r1, #16]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bc10      	pop	{r4}
 8002b12:	4770      	bx	lr

08002b14 <SDIO_GetCommandResponse>:
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 8002b14:	6900      	ldr	r0, [r0, #16]
}
 8002b16:	b2c0      	uxtb	r0, r0
 8002b18:	4770      	bx	lr
	...

08002b1c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002b1c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));

  /* Get the response */
  tmp = SDIO_RESP_ADDR + Response;
 8002b22:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <SDIO_GetResponse+0x14>)
 8002b24:	440b      	add	r3, r1
 8002b26:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8002b28:	9b01      	ldr	r3, [sp, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
}  
 8002b2c:	b002      	add	sp, #8
 8002b2e:	4770      	bx	lr
 8002b30:	40018014 	.word	0x40018014

08002b34 <SDIO_DataConfig>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002b34:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDIO Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002b36:	680b      	ldr	r3, [r1, #0]
 8002b38:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002b3a:	684b      	ldr	r3, [r1, #4]
 8002b3c:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDIO data configuration parameters */
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8002b3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002b40:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002b44:	688b      	ldr	r3, [r1, #8]
 8002b46:	68cc      	ldr	r4, [r1, #12]
 8002b48:	4323      	orrs	r3, r4
 8002b4a:	690c      	ldr	r4, [r1, #16]
 8002b4c:	4323      	orrs	r3, r4
 8002b4e:	6949      	ldr	r1, [r1, #20]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	4313      	orrs	r3, r2
 8002b54:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8002b56:	2000      	movs	r0, #0
 8002b58:	bc10      	pop	{r4}
 8002b5a:	4770      	bx	lr

08002b5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	a801      	add	r0, sp, #4
 8002b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b64:	2000      	movs	r0, #0
 8002b66:	b004      	add	sp, #16
 8002b68:	4770      	bx	lr

08002b6a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002b6a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8002b74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002b78:	2000      	movs	r0, #0
 8002b7a:	4770      	bx	lr

08002b7c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002b7c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002b80:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002b84:	045b      	lsls	r3, r3, #17
 8002b86:	0c5b      	lsrs	r3, r3, #17
 8002b88:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr

08002b90 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002b90:	2000      	movs	r0, #0
 8002b92:	4770      	bx	lr

08002b94 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8002b94:	b084      	sub	sp, #16
 8002b96:	b410      	push	{r4}
 8002b98:	ac02      	add	r4, sp, #8
 8002b9a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002baa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002bae:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bc10      	pop	{r4}
 8002bb6:	b004      	add	sp, #16
 8002bb8:	4770      	bx	lr

08002bba <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002bba:	2000      	movs	r0, #0
 8002bbc:	4770      	bx	lr

08002bbe <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	4770      	bx	lr

08002bc2 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bc2:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8002bc4:	78cb      	ldrb	r3, [r1, #3]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d80f      	bhi.n	8002bea <USB_ActivateEndpoint+0x28>
 8002bca:	e8df f003 	tbb	[pc, r3]
 8002bce:	6e02      	.short	0x6e02
 8002bd0:	6155      	.short	0x6155
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002bd2:	780a      	ldrb	r2, [r1, #0]
 8002bd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bea:	780a      	ldrb	r2, [r1, #0]
 8002bec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002c06:	7a8b      	ldrb	r3, [r1, #10]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f040 80b2 	bne.w	8002d72 <USB_ActivateEndpoint+0x1b0>
  {
    if (ep->is_in)
 8002c0e:	784b      	ldrb	r3, [r1, #1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d057      	beq.n	8002cc4 <USB_ActivateEndpoint+0x102>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	780a      	ldrb	r2, [r1, #0]
 8002c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c24:	888a      	ldrh	r2, [r1, #4]
 8002c26:	0852      	lsrs	r2, r2, #1
 8002c28:	0052      	lsls	r2, r2, #1
 8002c2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c2e:	780a      	ldrb	r2, [r1, #0]
 8002c30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c38:	d00b      	beq.n	8002c52 <USB_ActivateEndpoint+0x90>
 8002c3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c42:	051b      	lsls	r3, r3, #20
 8002c44:	0d1b      	lsrs	r3, r3, #20
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002c52:	780a      	ldrb	r2, [r1, #0]
 8002c54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c62:	f083 0320 	eor.w	r3, r3, #32
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002c72:	2000      	movs	r0, #0
 8002c74:	bc10      	pop	{r4}
 8002c76:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002c78:	780a      	ldrb	r2, [r1, #0]
 8002c7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002c8e:	e7ac      	b.n	8002bea <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002c90:	780a      	ldrb	r2, [r1, #0]
 8002c92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ca4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002ca8:	e79f      	b.n	8002bea <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002caa:	780a      	ldrb	r2, [r1, #0]
 8002cac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002cc2:	e792      	b.n	8002bea <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cc4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	780a      	ldrb	r2, [r1, #0]
 8002ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cd6:	888a      	ldrh	r2, [r1, #4]
 8002cd8:	0852      	lsrs	r2, r2, #1
 8002cda:	0052      	lsls	r2, r2, #1
 8002cdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	780a      	ldrb	r2, [r1, #0]
 8002ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cec:	3306      	adds	r3, #6
 8002cee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cf2:	690c      	ldr	r4, [r1, #16]
 8002cf4:	2c3e      	cmp	r4, #62	; 0x3e
 8002cf6:	d930      	bls.n	8002d5a <USB_ActivateEndpoint+0x198>
 8002cf8:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8002cfc:	f014 0f1f 	tst.w	r4, #31
 8002d00:	d101      	bne.n	8002d06 <USB_ActivateEndpoint+0x144>
 8002d02:	3a01      	subs	r2, #1
 8002d04:	b292      	uxth	r2, r2
 8002d06:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d14:	780a      	ldrb	r2, [r1, #0]
 8002d16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d1a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002d1e:	d00b      	beq.n	8002d38 <USB_ActivateEndpoint+0x176>
 8002d20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d28:	051b      	lsls	r3, r3, #20
 8002d2a:	0d1b      	lsrs	r3, r3, #20
 8002d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d38:	780a      	ldrb	r2, [r1, #0]
 8002d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002d58:	e78b      	b.n	8002c72 <USB_ActivateEndpoint+0xb0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d5a:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8002d5e:	f014 0f01 	tst.w	r4, #1
 8002d62:	d001      	beq.n	8002d68 <USB_ActivateEndpoint+0x1a6>
 8002d64:	3201      	adds	r2, #1
 8002d66:	b292      	uxth	r2, r2
 8002d68:	0292      	lsls	r2, r2, #10
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002d70:	e7d0      	b.n	8002d14 <USB_ActivateEndpoint+0x152>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d72:	780a      	ldrb	r2, [r1, #0]
 8002d74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d78:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	0d1b      	lsrs	r3, r3, #20
 8002d80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002d8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	780a      	ldrb	r2, [r1, #0]
 8002d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002d9c:	88ca      	ldrh	r2, [r1, #6]
 8002d9e:	0852      	lsrs	r2, r2, #1
 8002da0:	0052      	lsls	r2, r2, #1
 8002da2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002da6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	780a      	ldrb	r2, [r1, #0]
 8002dae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002db2:	3304      	adds	r3, #4
 8002db4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002db8:	890a      	ldrh	r2, [r1, #8]
 8002dba:	0852      	lsrs	r2, r2, #1
 8002dbc:	0052      	lsls	r2, r2, #1
 8002dbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 8002dc2:	784b      	ldrb	r3, [r1, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d14b      	bne.n	8002e60 <USB_ActivateEndpoint+0x29e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dc8:	780a      	ldrb	r2, [r1, #0]
 8002dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002dd2:	d00b      	beq.n	8002dec <USB_ActivateEndpoint+0x22a>
 8002dd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ddc:	051b      	lsls	r3, r3, #20
 8002dde:	0d1b      	lsrs	r3, r3, #20
 8002de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dec:	780a      	ldrb	r2, [r1, #0]
 8002dee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002df2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002df6:	d00b      	beq.n	8002e10 <USB_ActivateEndpoint+0x24e>
 8002df8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e00:	051b      	lsls	r3, r3, #20
 8002e02:	0d1b      	lsrs	r3, r3, #20
 8002e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002e10:	780a      	ldrb	r2, [r1, #0]
 8002e12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1a:	051b      	lsls	r3, r3, #20
 8002e1c:	0d1b      	lsrs	r3, r3, #20
 8002e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e2a:	780a      	ldrb	r2, [r1, #0]
 8002e2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e3e:	f248 0480 	movw	r4, #32896	; 0x8080
 8002e42:	4323      	orrs	r3, r4
 8002e44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e48:	780a      	ldrb	r2, [r1, #0]
 8002e4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e58:	4323      	orrs	r3, r4
 8002e5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002e5e:	e708      	b.n	8002c72 <USB_ActivateEndpoint+0xb0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e60:	780a      	ldrb	r2, [r1, #0]
 8002e62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e66:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002e6a:	d00b      	beq.n	8002e84 <USB_ActivateEndpoint+0x2c2>
 8002e6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e74:	051b      	lsls	r3, r3, #20
 8002e76:	0d1b      	lsrs	r3, r3, #20
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e84:	780a      	ldrb	r2, [r1, #0]
 8002e86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e8e:	d00b      	beq.n	8002ea8 <USB_ActivateEndpoint+0x2e6>
 8002e90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	0d1b      	lsrs	r3, r3, #20
 8002e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ea4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002ea8:	780a      	ldrb	r2, [r1, #0]
 8002eaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb2:	051b      	lsls	r3, r3, #20
 8002eb4:	0d1b      	lsrs	r3, r3, #20
 8002eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ec2:	780b      	ldrb	r3, [r1, #0]
 8002ec4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed2:	f248 0480 	movw	r4, #32896	; 0x8080
 8002ed6:	4322      	orrs	r2, r4
 8002ed8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002edc:	780a      	ldrb	r2, [r1, #0]
 8002ede:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	4323      	orrs	r3, r4
 8002eee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002ef2:	e6be      	b.n	8002c72 <USB_ActivateEndpoint+0xb0>

08002ef4 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 8002ef4:	7a8b      	ldrb	r3, [r1, #10]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d144      	bne.n	8002f84 <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 8002efa:	784b      	ldrb	r3, [r1, #1]
 8002efc:	b30b      	cbz	r3, 8002f42 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002efe:	780a      	ldrb	r2, [r1, #0]
 8002f00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f08:	d00b      	beq.n	8002f22 <USB_DeactivateEndpoint+0x2e>
 8002f0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	0d1b      	lsrs	r3, r3, #20
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002f22:	780a      	ldrb	r2, [r1, #0]
 8002f24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002f3e:	2000      	movs	r0, #0
 8002f40:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f42:	780a      	ldrb	r2, [r1, #0]
 8002f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f48:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002f4c:	d00b      	beq.n	8002f66 <USB_DeactivateEndpoint+0x72>
 8002f4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f56:	051b      	lsls	r3, r3, #20
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f62:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f66:	780a      	ldrb	r2, [r1, #0]
 8002f68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002f82:	e7dc      	b.n	8002f3e <USB_DeactivateEndpoint+0x4a>
{
 8002f84:	b410      	push	{r4}
    if (ep->is_in==0)
 8002f86:	784b      	ldrb	r3, [r1, #1]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d14b      	bne.n	8003024 <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f8c:	780a      	ldrb	r2, [r1, #0]
 8002f8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f92:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002f96:	d00b      	beq.n	8002fb0 <USB_DeactivateEndpoint+0xbc>
 8002f98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	0d1b      	lsrs	r3, r3, #20
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fb0:	780a      	ldrb	r2, [r1, #0]
 8002fb2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002fba:	d00b      	beq.n	8002fd4 <USB_DeactivateEndpoint+0xe0>
 8002fbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	0d1b      	lsrs	r3, r3, #20
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002fd4:	780a      	ldrb	r2, [r1, #0]
 8002fd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fde:	051b      	lsls	r3, r3, #20
 8002fe0:	0d1b      	lsrs	r3, r3, #20
 8002fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fee:	780b      	ldrb	r3, [r1, #0]
 8002ff0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ffe:	f248 0480 	movw	r4, #32896	; 0x8080
 8003002:	4322      	orrs	r2, r4
 8003004:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003008:	780a      	ldrb	r2, [r1, #0]
 800300a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003018:	4323      	orrs	r3, r4
 800301a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800301e:	2000      	movs	r0, #0
 8003020:	bc10      	pop	{r4}
 8003022:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003024:	780a      	ldrb	r2, [r1, #0]
 8003026:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800302a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800302e:	d00b      	beq.n	8003048 <USB_DeactivateEndpoint+0x154>
 8003030:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003038:	051b      	lsls	r3, r3, #20
 800303a:	0d1b      	lsrs	r3, r3, #20
 800303c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003048:	780a      	ldrb	r2, [r1, #0]
 800304a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800304e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003052:	d00b      	beq.n	800306c <USB_DeactivateEndpoint+0x178>
 8003054:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305c:	051b      	lsls	r3, r3, #20
 800305e:	0d1b      	lsrs	r3, r3, #20
 8003060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003068:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800306c:	780a      	ldrb	r2, [r1, #0]
 800306e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	051b      	lsls	r3, r3, #20
 8003078:	0d1b      	lsrs	r3, r3, #20
 800307a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003086:	780b      	ldrb	r3, [r1, #0]
 8003088:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800308c:	b292      	uxth	r2, r2
 800308e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003096:	f248 0480 	movw	r4, #32896	; 0x8080
 800309a:	4322      	orrs	r2, r4
 800309c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030a0:	780a      	ldrb	r2, [r1, #0]
 80030a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b0:	4323      	orrs	r3, r4
 80030b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80030b6:	e7b2      	b.n	800301e <USB_DeactivateEndpoint+0x12a>

080030b8 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80030b8:	780a      	ldrb	r2, [r1, #0]
 80030ba:	b18a      	cbz	r2, 80030e0 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 80030bc:	784b      	ldrb	r3, [r1, #1]
 80030be:	bb13      	cbnz	r3, 8003106 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80030c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80030de:	e010      	b.n	8003102 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80030e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030f2:	f083 0310 	eor.w	r3, r3, #16
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8003102:	2000      	movs	r0, #0
 8003104:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003106:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003114:	f083 0310 	eor.w	r3, r3, #16
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003124:	e7ed      	b.n	8003102 <USB_EPSetStall+0x4a>

08003126 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8003126:	784b      	ldrb	r3, [r1, #1]
 8003128:	b31b      	cbz	r3, 8003172 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800312a:	780a      	ldrb	r2, [r1, #0]
 800312c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003130:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003134:	d00b      	beq.n	800314e <USB_EPClearStall+0x28>
 8003136:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800313a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313e:	051b      	lsls	r3, r3, #20
 8003140:	0d1b      	lsrs	r3, r3, #20
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800314a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800314e:	780a      	ldrb	r2, [r1, #0]
 8003150:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 800316e:	2000      	movs	r0, #0
 8003170:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003172:	780a      	ldrb	r2, [r1, #0]
 8003174:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003178:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800317c:	d00b      	beq.n	8003196 <USB_EPClearStall+0x70>
 800317e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003186:	051b      	lsls	r3, r3, #20
 8003188:	0d1b      	lsrs	r3, r3, #20
 800318a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003196:	780a      	ldrb	r2, [r1, #0]
 8003198:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80031b6:	e7da      	b.n	800316e <USB_EPClearStall+0x48>

080031b8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80031b8:	b911      	cbnz	r1, 80031c0 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80031c0:	2000      	movs	r0, #0
 80031c2:	4770      	bx	lr

080031c4 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80031c4:	2000      	movs	r0, #0
 80031c6:	4770      	bx	lr

080031c8 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80031c8:	2000      	movs	r0, #0
 80031ca:	4770      	bx	lr

080031cc <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80031cc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80031d0:	b280      	uxth	r0, r0
 80031d2:	4770      	bx	lr

080031d4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80031d4:	2000      	movs	r0, #0
 80031d6:	4770      	bx	lr

080031d8 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80031d8:	3301      	adds	r3, #1
 80031da:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80031dc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80031e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 80031e4:	b163      	cbz	r3, 8003200 <USB_WritePMA+0x28>
{
 80031e6:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80031e8:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80031ea:	7848      	ldrb	r0, [r1, #1]
 80031ec:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 80031f0:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 80031f4:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 80031f6:	3b01      	subs	r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f5      	bne.n	80031e8 <USB_WritePMA+0x10>
  }
}
 80031fc:	bc10      	pop	{r4}
 80031fe:	4770      	bx	lr
 8003200:	4770      	bx	lr

08003202 <USB_EPStartXfer>:
{
 8003202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8003204:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8003206:	784c      	ldrb	r4, [r1, #1]
 8003208:	2c01      	cmp	r4, #1
 800320a:	d035      	beq.n	8003278 <USB_EPStartXfer+0x76>
    if (ep->xfer_len > ep->maxpacket)
 800320c:	690b      	ldr	r3, [r1, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	f240 80f0 	bls.w	80033f4 <USB_EPStartXfer+0x1f2>
      ep->xfer_len-=len; 
 8003214:	1ad2      	subs	r2, r2, r3
 8003216:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 8003218:	7a8a      	ldrb	r2, [r1, #10]
 800321a:	2a00      	cmp	r2, #0
 800321c:	f040 80fa 	bne.w	8003414 <USB_EPStartXfer+0x212>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003220:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003224:	b292      	uxth	r2, r2
 8003226:	780c      	ldrb	r4, [r1, #0]
 8003228:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800322c:	3206      	adds	r2, #6
 800322e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003232:	2b3e      	cmp	r3, #62	; 0x3e
 8003234:	f240 80e2 	bls.w	80033fc <USB_EPStartXfer+0x1fa>
 8003238:	f3c3 144f 	ubfx	r4, r3, #5, #16
 800323c:	f013 0f1f 	tst.w	r3, #31
 8003240:	d101      	bne.n	8003246 <USB_EPStartXfer+0x44>
 8003242:	3c01      	subs	r4, #1
 8003244:	b2a4      	uxth	r4, r4
 8003246:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800324a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800324e:	b2a4      	uxth	r4, r4
 8003250:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003254:	780a      	ldrb	r2, [r1, #0]
 8003256:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003274:	2000      	movs	r0, #0
 8003276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003278:	690f      	ldr	r7, [r1, #16]
 800327a:	42ba      	cmp	r2, r7
 800327c:	d926      	bls.n	80032cc <USB_EPStartXfer+0xca>
      ep->xfer_len-=len; 
 800327e:	1bd2      	subs	r2, r2, r7
 8003280:	618a      	str	r2, [r1, #24]
 8003282:	460e      	mov	r6, r1
 8003284:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0) 
 8003286:	7a8b      	ldrb	r3, [r1, #10]
 8003288:	b323      	cbz	r3, 80032d4 <USB_EPStartXfer+0xd2>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800328a:	780b      	ldrb	r3, [r1, #0]
 800328c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003290:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003294:	d06c      	beq.n	8003370 <USB_EPStartXfer+0x16e>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003296:	2c00      	cmp	r4, #0
 8003298:	d139      	bne.n	800330e <USB_EPStartXfer+0x10c>
 800329a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800329e:	b292      	uxth	r2, r2
 80032a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80032a4:	3306      	adds	r3, #6
 80032a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80032aa:	2f3e      	cmp	r7, #62	; 0x3e
 80032ac:	d923      	bls.n	80032f6 <USB_EPStartXfer+0xf4>
 80032ae:	f3c7 124f 	ubfx	r2, r7, #5, #16
 80032b2:	f017 0f1f 	tst.w	r7, #31
 80032b6:	d101      	bne.n	80032bc <USB_EPStartXfer+0xba>
 80032b8:	3a01      	subs	r2, #1
 80032ba:	b292      	uxth	r2, r2
 80032bc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80032c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032c4:	b292      	uxth	r2, r2
 80032c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80032ca:	e02a      	b.n	8003322 <USB_EPStartXfer+0x120>
      ep->xfer_len =0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 80032d0:	4617      	mov	r7, r2
 80032d2:	e7d6      	b.n	8003282 <USB_EPStartXfer+0x80>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80032d4:	b2bb      	uxth	r3, r7
 80032d6:	888a      	ldrh	r2, [r1, #4]
 80032d8:	6949      	ldr	r1, [r1, #20]
 80032da:	f7ff ff7d 	bl	80031d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032de:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	7832      	ldrb	r2, [r6, #0]
 80032e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032ea:	3302      	adds	r3, #2
 80032ec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80032f0:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 80032f4:	e02b      	b.n	800334e <USB_EPStartXfer+0x14c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032f6:	f3c7 024f 	ubfx	r2, r7, #1, #16
 80032fa:	f017 0f01 	tst.w	r7, #1
 80032fe:	d001      	beq.n	8003304 <USB_EPStartXfer+0x102>
 8003300:	3201      	adds	r2, #1
 8003302:	b292      	uxth	r2, r2
 8003304:	0292      	lsls	r2, r2, #10
 8003306:	b292      	uxth	r2, r2
 8003308:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800330c:	e009      	b.n	8003322 <USB_EPStartXfer+0x120>
 800330e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003312:	b292      	uxth	r2, r2
 8003314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003318:	3302      	adds	r3, #2
 800331a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800331e:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8003322:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003324:	b2bb      	uxth	r3, r7
 8003326:	6971      	ldr	r1, [r6, #20]
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff ff55 	bl	80031d8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800332e:	7873      	ldrb	r3, [r6, #1]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d14f      	bne.n	80033d4 <USB_EPStartXfer+0x1d2>
 8003334:	7832      	ldrb	r2, [r6, #0]
 8003336:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	051b      	lsls	r3, r3, #20
 8003340:	0d1b      	lsrs	r3, r3, #20
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800334a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800334e:	7832      	ldrb	r2, [r6, #0]
 8003350:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800336e:	e781      	b.n	8003274 <USB_EPStartXfer+0x72>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003370:	bb24      	cbnz	r4, 80033bc <USB_EPStartXfer+0x1ba>
 8003372:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003376:	b292      	uxth	r2, r2
 8003378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800337c:	3302      	adds	r3, #2
 800337e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003382:	2f3e      	cmp	r7, #62	; 0x3e
 8003384:	d90e      	bls.n	80033a4 <USB_EPStartXfer+0x1a2>
 8003386:	f3c7 124f 	ubfx	r2, r7, #5, #16
 800338a:	f017 0f1f 	tst.w	r7, #31
 800338e:	d101      	bne.n	8003394 <USB_EPStartXfer+0x192>
 8003390:	3a01      	subs	r2, #1
 8003392:	b292      	uxth	r2, r2
 8003394:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003398:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800339c:	b292      	uxth	r2, r2
 800339e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80033a2:	e015      	b.n	80033d0 <USB_EPStartXfer+0x1ce>
 80033a4:	f3c7 024f 	ubfx	r2, r7, #1, #16
 80033a8:	f017 0f01 	tst.w	r7, #1
 80033ac:	d001      	beq.n	80033b2 <USB_EPStartXfer+0x1b0>
 80033ae:	3201      	adds	r2, #1
 80033b0:	b292      	uxth	r2, r2
 80033b2:	0292      	lsls	r2, r2, #10
 80033b4:	b292      	uxth	r2, r2
 80033b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80033ba:	e009      	b.n	80033d0 <USB_EPStartXfer+0x1ce>
 80033bc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80033c0:	b292      	uxth	r2, r2
 80033c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033c6:	3302      	adds	r3, #2
 80033c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80033cc:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 80033d0:	88f2      	ldrh	r2, [r6, #6]
 80033d2:	e7a7      	b.n	8003324 <USB_EPStartXfer+0x122>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d1ba      	bne.n	800334e <USB_EPStartXfer+0x14c>
 80033d8:	7832      	ldrb	r2, [r6, #0]
 80033da:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	0d1b      	lsrs	r3, r3, #20
 80033e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80033f2:	e7ac      	b.n	800334e <USB_EPStartXfer+0x14c>
      ep->xfer_len =0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 80033f8:	4613      	mov	r3, r2
 80033fa:	e70d      	b.n	8003218 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80033fc:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003400:	f013 0f01 	tst.w	r3, #1
 8003404:	d001      	beq.n	800340a <USB_EPStartXfer+0x208>
 8003406:	3401      	adds	r4, #1
 8003408:	b2a4      	uxth	r4, r4
 800340a:	02a4      	lsls	r4, r4, #10
 800340c:	b2a4      	uxth	r4, r4
 800340e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003412:	e71f      	b.n	8003254 <USB_EPStartXfer+0x52>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003414:	b9c4      	cbnz	r4, 8003448 <USB_EPStartXfer+0x246>
 8003416:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800341a:	b292      	uxth	r2, r2
 800341c:	780c      	ldrb	r4, [r1, #0]
 800341e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003422:	3202      	adds	r2, #2
 8003424:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003428:	2b3e      	cmp	r3, #62	; 0x3e
 800342a:	d929      	bls.n	8003480 <USB_EPStartXfer+0x27e>
 800342c:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8003430:	f013 0f1f 	tst.w	r3, #31
 8003434:	d101      	bne.n	800343a <USB_EPStartXfer+0x238>
 8003436:	3c01      	subs	r4, #1
 8003438:	b2a4      	uxth	r4, r4
 800343a:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800343e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003442:	b2a4      	uxth	r4, r4
 8003444:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003448:	784a      	ldrb	r2, [r1, #1]
 800344a:	bb8a      	cbnz	r2, 80034b0 <USB_EPStartXfer+0x2ae>
 800344c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003450:	b292      	uxth	r2, r2
 8003452:	780c      	ldrb	r4, [r1, #0]
 8003454:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003458:	3206      	adds	r2, #6
 800345a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800345e:	2b3e      	cmp	r3, #62	; 0x3e
 8003460:	d91a      	bls.n	8003498 <USB_EPStartXfer+0x296>
 8003462:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8003466:	f013 0f1f 	tst.w	r3, #31
 800346a:	d101      	bne.n	8003470 <USB_EPStartXfer+0x26e>
 800346c:	3c01      	subs	r4, #1
 800346e:	b2a4      	uxth	r4, r4
 8003470:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003474:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003478:	b2a4      	uxth	r4, r4
 800347a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 800347e:	e6e9      	b.n	8003254 <USB_EPStartXfer+0x52>
 8003480:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003484:	f013 0f01 	tst.w	r3, #1
 8003488:	d001      	beq.n	800348e <USB_EPStartXfer+0x28c>
 800348a:	3401      	adds	r4, #1
 800348c:	b2a4      	uxth	r4, r4
 800348e:	02a4      	lsls	r4, r4, #10
 8003490:	b2a4      	uxth	r4, r4
 8003492:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003496:	e7d7      	b.n	8003448 <USB_EPStartXfer+0x246>
 8003498:	f3c3 044f 	ubfx	r4, r3, #1, #16
 800349c:	f013 0f01 	tst.w	r3, #1
 80034a0:	d001      	beq.n	80034a6 <USB_EPStartXfer+0x2a4>
 80034a2:	3401      	adds	r4, #1
 80034a4:	b2a4      	uxth	r4, r4
 80034a6:	02a4      	lsls	r4, r4, #10
 80034a8:	b2a4      	uxth	r4, r4
 80034aa:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80034ae:	e6d1      	b.n	8003254 <USB_EPStartXfer+0x52>
 80034b0:	2a01      	cmp	r2, #1
 80034b2:	f47f aecf 	bne.w	8003254 <USB_EPStartXfer+0x52>
 80034b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80034ba:	b292      	uxth	r2, r2
 80034bc:	780c      	ldrb	r4, [r1, #0]
 80034be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80034c2:	3202      	adds	r2, #2
 80034c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80034c8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80034cc:	e6c2      	b.n	8003254 <USB_EPStartXfer+0x52>

080034ce <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80034ce:	3301      	adds	r3, #1
 80034d0:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80034d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80034d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 80034da:	e004      	b.n	80034e6 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80034dc:	6810      	ldr	r0, [r2, #0]
 80034de:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 80034e2:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80034e4:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f8      	bne.n	80034dc <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 80034ea:	4770      	bx	lr

080034ec <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 80034ec:	2320      	movs	r3, #32
 80034ee:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 80034f0:	4800      	ldr	r0, [pc, #0]	; (80034f4 <USBD_MSC_GetHSCfgDesc+0x8>)
 80034f2:	4770      	bx	lr
 80034f4:	20000058 	.word	0x20000058

080034f8 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 80034f8:	2320      	movs	r3, #32
 80034fa:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 80034fc:	4800      	ldr	r0, [pc, #0]	; (8003500 <USBD_MSC_GetFSCfgDesc+0x8>)
 80034fe:	4770      	bx	lr
 8003500:	20000038 	.word	0x20000038

08003504 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8003504:	2320      	movs	r3, #32
 8003506:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8003508:	4800      	ldr	r0, [pc, #0]	; (800350c <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 800350a:	4770      	bx	lr
 800350c:	20000084 	.word	0x20000084

08003510 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8003510:	230a      	movs	r3, #10
 8003512:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8003514:	4800      	ldr	r0, [pc, #0]	; (8003518 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8003516:	4770      	bx	lr
 8003518:	20000078 	.word	0x20000078

0800351c <USBD_MSC_Init>:
{
 800351c:	b510      	push	{r4, lr}
 800351e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003520:	7c03      	ldrb	r3, [r0, #16]
 8003522:	b9c3      	cbnz	r3, 8003556 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8003524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003528:	2202      	movs	r2, #2
 800352a:	2101      	movs	r1, #1
 800352c:	f001 fc6a 	bl	8004e04 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003534:	2202      	movs	r2, #2
 8003536:	2181      	movs	r1, #129	; 0x81
 8003538:	4620      	mov	r0, r4
 800353a:	f001 fc63 	bl	8004e04 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800353e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8003542:	f001 fceb 	bl	8004f1c <USBD_static_malloc>
 8003546:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800354a:	b180      	cbz	r0, 800356e <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 800354c:	4620      	mov	r0, r4
 800354e:	f000 f8f3 	bl	8003738 <MSC_BOT_Init>
    ret = 0;
 8003552:	2000      	movs	r0, #0
 8003554:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	2202      	movs	r2, #2
 800355a:	2101      	movs	r1, #1
 800355c:	f001 fc52 	bl	8004e04 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003560:	2340      	movs	r3, #64	; 0x40
 8003562:	2202      	movs	r2, #2
 8003564:	2181      	movs	r1, #129	; 0x81
 8003566:	4620      	mov	r0, r4
 8003568:	f001 fc4c 	bl	8004e04 <USBD_LL_OpenEP>
 800356c:	e7e7      	b.n	800353e <USBD_MSC_Init+0x22>
    ret = 1; 
 800356e:	2001      	movs	r0, #1
}
 8003570:	bd10      	pop	{r4, pc}

08003572 <USBD_MSC_DeInit>:
{
 8003572:	b510      	push	{r4, lr}
 8003574:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003576:	2101      	movs	r1, #1
 8003578:	f001 fc55 	bl	8004e26 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800357c:	2181      	movs	r1, #129	; 0x81
 800357e:	4620      	mov	r0, r4
 8003580:	f001 fc51 	bl	8004e26 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8003584:	4620      	mov	r0, r4
 8003586:	f000 f903 	bl	8003790 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 800358a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800358e:	b120      	cbz	r0, 800359a <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8003590:	f001 fcc8 	bl	8004f24 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8003594:	2300      	movs	r3, #0
 8003596:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800359a:	2000      	movs	r0, #0
 800359c:	bd10      	pop	{r4, pc}

0800359e <USBD_MSC_Setup>:
{
 800359e:	b570      	push	{r4, r5, r6, lr}
 80035a0:	4605      	mov	r5, r0
 80035a2:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80035a4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035a8:	780b      	ldrb	r3, [r1, #0]
 80035aa:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80035ae:	d035      	beq.n	800361c <USBD_MSC_Setup+0x7e>
 80035b0:	2a20      	cmp	r2, #32
 80035b2:	d178      	bne.n	80036a6 <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 80035b4:	784a      	ldrb	r2, [r1, #1]
 80035b6:	2afe      	cmp	r2, #254	; 0xfe
 80035b8:	d005      	beq.n	80035c6 <USBD_MSC_Setup+0x28>
 80035ba:	2aff      	cmp	r2, #255	; 0xff
 80035bc:	d01d      	beq.n	80035fa <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 80035be:	f000 fe48 	bl	8004252 <USBD_CtlError>
       return USBD_FAIL; 
 80035c2:	2002      	movs	r0, #2
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 80035c6:	884a      	ldrh	r2, [r1, #2]
 80035c8:	b912      	cbnz	r2, 80035d0 <USBD_MSC_Setup+0x32>
         (req->wLength == 1) &&
 80035ca:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 80035cc:	2a01      	cmp	r2, #1
 80035ce:	d005      	beq.n	80035dc <USBD_MSC_Setup+0x3e>
         USBD_CtlError(pdev , req);
 80035d0:	4621      	mov	r1, r4
 80035d2:	4628      	mov	r0, r5
 80035d4:	f000 fe3d 	bl	8004252 <USBD_CtlError>
         return USBD_FAIL; 
 80035d8:	2002      	movs	r0, #2
 80035da:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 1) &&
 80035dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035e0:	d0f6      	beq.n	80035d0 <USBD_MSC_Setup+0x32>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80035e2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4798      	blx	r3
 80035ea:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 80035ec:	2201      	movs	r2, #1
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	f001 f87e 	bl	80046f2 <USBD_CtlSendData>
  return 0;
 80035f6:	2000      	movs	r0, #0
      break;
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
      if((req->wValue  == 0) && 
 80035fa:	884a      	ldrh	r2, [r1, #2]
 80035fc:	b90a      	cbnz	r2, 8003602 <USBD_MSC_Setup+0x64>
         (req->wLength == 0) &&
 80035fe:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8003600:	b12a      	cbz	r2, 800360e <USBD_MSC_Setup+0x70>
         USBD_CtlError(pdev , req);
 8003602:	4621      	mov	r1, r4
 8003604:	4628      	mov	r0, r5
 8003606:	f000 fe24 	bl	8004252 <USBD_CtlError>
         return USBD_FAIL; 
 800360a:	2002      	movs	r0, #2
 800360c:	bd70      	pop	{r4, r5, r6, pc}
         (req->wLength == 0) &&
 800360e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003612:	d1f6      	bne.n	8003602 <USBD_MSC_Setup+0x64>
         MSC_BOT_Reset(pdev);
 8003614:	f000 f8af 	bl	8003776 <MSC_BOT_Reset>
  return 0;
 8003618:	2000      	movs	r0, #0
      break;
 800361a:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800361c:	784b      	ldrb	r3, [r1, #1]
 800361e:	2b0a      	cmp	r3, #10
 8003620:	d005      	beq.n	800362e <USBD_MSC_Setup+0x90>
 8003622:	2b0b      	cmp	r3, #11
 8003624:	d009      	beq.n	800363a <USBD_MSC_Setup+0x9c>
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00b      	beq.n	8003642 <USBD_MSC_Setup+0xa4>
  return 0;
 800362a:	2000      	movs	r0, #0
}
 800362c:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlSendData (pdev,
 800362e:	2201      	movs	r2, #1
 8003630:	1d31      	adds	r1, r6, #4
 8003632:	f001 f85e 	bl	80046f2 <USBD_CtlSendData>
  return 0;
 8003636:	2000      	movs	r0, #0
      break;
 8003638:	bd70      	pop	{r4, r5, r6, pc}
      hmsc->interface = (uint8_t)(req->wValue);
 800363a:	788b      	ldrb	r3, [r1, #2]
 800363c:	6073      	str	r3, [r6, #4]
  return 0;
 800363e:	2000      	movs	r0, #0
      break;
 8003640:	bd70      	pop	{r4, r5, r6, pc}
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8003642:	7909      	ldrb	r1, [r1, #4]
 8003644:	f001 fbfd 	bl	8004e42 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8003648:	7921      	ldrb	r1, [r4, #4]
 800364a:	4628      	mov	r0, r5
 800364c:	f001 fbeb 	bl	8004e26 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8003650:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0e      	blt.n	8003676 <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003658:	7c2b      	ldrb	r3, [r5, #16]
 800365a:	b9eb      	cbnz	r3, 8003698 <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 800365c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003660:	2202      	movs	r2, #2
 8003662:	2101      	movs	r1, #1
 8003664:	4628      	mov	r0, r5
 8003666:	f001 fbcd 	bl	8004e04 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800366a:	7921      	ldrb	r1, [r4, #4]
 800366c:	4628      	mov	r0, r5
 800366e:	f000 f93b 	bl	80038e8 <MSC_BOT_CplClrFeature>
  return 0;
 8003672:	2000      	movs	r0, #0
      break;
 8003674:	bd70      	pop	{r4, r5, r6, pc}
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003676:	7c2b      	ldrb	r3, [r5, #16]
 8003678:	b93b      	cbnz	r3, 800368a <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 800367a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367e:	2202      	movs	r2, #2
 8003680:	2181      	movs	r1, #129	; 0x81
 8003682:	4628      	mov	r0, r5
 8003684:	f001 fbbe 	bl	8004e04 <USBD_LL_OpenEP>
 8003688:	e7ef      	b.n	800366a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	2202      	movs	r2, #2
 800368e:	2181      	movs	r1, #129	; 0x81
 8003690:	4628      	mov	r0, r5
 8003692:	f001 fbb7 	bl	8004e04 <USBD_LL_OpenEP>
 8003696:	e7e8      	b.n	800366a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	2202      	movs	r2, #2
 800369c:	2101      	movs	r1, #1
 800369e:	4628      	mov	r0, r5
 80036a0:	f001 fbb0 	bl	8004e04 <USBD_LL_OpenEP>
 80036a4:	e7e1      	b.n	800366a <USBD_MSC_Setup+0xcc>
  return 0;
 80036a6:	2000      	movs	r0, #0
 80036a8:	bd70      	pop	{r4, r5, r6, pc}

080036aa <USBD_MSC_DataIn>:
{
 80036aa:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 80036ac:	f000 f892 	bl	80037d4 <MSC_BOT_DataIn>
}
 80036b0:	2000      	movs	r0, #0
 80036b2:	bd08      	pop	{r3, pc}

080036b4 <USBD_MSC_DataOut>:
{
 80036b4:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 80036b6:	f000 f8fd 	bl	80038b4 <MSC_BOT_DataOut>
}
 80036ba:	2000      	movs	r0, #0
 80036bc:	bd08      	pop	{r3, pc}

080036be <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 80036be:	b109      	cbz	r1, 80036c4 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 80036c0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	4770      	bx	lr

080036c8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80036cc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 80036d0:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 80036d4:	b923      	cbnz	r3, 80036e0 <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 80036d6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 80036da:	b10b      	cbz	r3, 80036e0 <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 80036dc:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 80036de:	b13b      	cbz	r3, 80036f0 <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80036e0:	2181      	movs	r1, #129	; 0x81
 80036e2:	4628      	mov	r0, r5
 80036e4:	f001 fbbb 	bl	8004e5e <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80036e8:	7a63      	ldrb	r3, [r4, #9]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d004      	beq.n	80036f8 <MSC_BOT_Abort+0x30>
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 80036f0:	2101      	movs	r1, #1
 80036f2:	f001 fbb4 	bl	8004e5e <USBD_LL_StallEP>
 80036f6:	e7f3      	b.n	80036e0 <MSC_BOT_Abort+0x18>
  {
    USBD_LL_PrepareReceive (pdev,
 80036f8:	231f      	movs	r3, #31
 80036fa:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 80036fe:	2101      	movs	r1, #1
 8003700:	4628      	mov	r0, r5
 8003702:	f001 fbf7 	bl	8004ef4 <USBD_LL_PrepareReceive>
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8003706:	e7f2      	b.n	80036ee <MSC_BOT_Abort+0x26>

08003708 <MSC_BOT_SendData>:
{
 8003708:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800370a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 800370e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003712:	4293      	cmp	r3, r2
 8003714:	bf28      	it	cs
 8003716:	4613      	movcs	r3, r2
 8003718:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 800371a:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8003724:	2200      	movs	r2, #0
 8003726:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800372a:	2204      	movs	r2, #4
 800372c:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800372e:	460a      	mov	r2, r1
 8003730:	2181      	movs	r1, #129	; 0x81
 8003732:	f001 fbd1 	bl	8004ed8 <USBD_LL_Transmit>
 8003736:	bd10      	pop	{r4, pc}

08003738 <MSC_BOT_Init>:
{
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800373c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8003740:	2000      	movs	r0, #0
 8003742:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8003744:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8003746:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 800374a:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 800374e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8003756:	2101      	movs	r1, #1
 8003758:	4620      	mov	r0, r4
 800375a:	f001 fb72 	bl	8004e42 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800375e:	2181      	movs	r1, #129	; 0x81
 8003760:	4620      	mov	r0, r4
 8003762:	f001 fb6e 	bl	8004e42 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8003766:	231f      	movs	r3, #31
 8003768:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 800376c:	2101      	movs	r1, #1
 800376e:	4620      	mov	r0, r4
 8003770:	f001 fbc0 	bl	8004ef4 <USBD_LL_PrepareReceive>
 8003774:	bd38      	pop	{r3, r4, r5, pc}

08003776 <MSC_BOT_Reset>:
{
 8003776:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8003778:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 800377c:	2300      	movs	r3, #0
 800377e:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8003780:	2101      	movs	r1, #1
 8003782:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8003784:	231f      	movs	r3, #31
 8003786:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800378a:	f001 fbb3 	bl	8004ef4 <USBD_LL_PrepareReceive>
 800378e:	bd08      	pop	{r3, pc}

08003790 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8003790:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8003794:	2200      	movs	r2, #0
 8003796:	721a      	strb	r2, [r3, #8]
 8003798:	4770      	bx	lr
	...

0800379c <MSC_BOT_SendCSW>:
{
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80037a0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <MSC_BOT_SendCSW+0x34>)
 80037a6:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80037aa:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 80037b2:	230d      	movs	r3, #13
 80037b4:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 80037b8:	2181      	movs	r1, #129	; 0x81
 80037ba:	f001 fb8d 	bl	8004ed8 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 80037be:	231f      	movs	r3, #31
 80037c0:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 80037c4:	2101      	movs	r1, #1
 80037c6:	4628      	mov	r0, r5
 80037c8:	f001 fb94 	bl	8004ef4 <USBD_LL_PrepareReceive>
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	53425355 	.word	0x53425355

080037d4 <MSC_BOT_DataIn>:
{
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80037d8:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 80037dc:	7a0b      	ldrb	r3, [r1, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d007      	beq.n	80037f2 <MSC_BOT_DataIn+0x1e>
 80037e2:	d304      	bcc.n	80037ee <MSC_BOT_DataIn+0x1a>
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d803      	bhi.n	80037f0 <MSC_BOT_DataIn+0x1c>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80037e8:	2100      	movs	r1, #0
 80037ea:	f7ff ffd7 	bl	800379c <MSC_BOT_SendCSW>
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 80037f2:	f201 221b 	addw	r2, r1, #539	; 0x21b
 80037f6:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 80037fa:	f000 fb6c 	bl	8003ed6 <SCSI_ProcessCmd>
 80037fe:	2800      	cmp	r0, #0
 8003800:	daf5      	bge.n	80037ee <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8003802:	2101      	movs	r1, #1
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff ffc9 	bl	800379c <MSC_BOT_SendCSW>
 800380a:	bd10      	pop	{r4, pc}

0800380c <MSC_BOT_CBW_Decode>:
{
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8003810:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8003814:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8003818:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800381c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003820:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8003824:	2101      	movs	r1, #1
 8003826:	f001 fb73 	bl	8004f10 <USBD_LL_GetRxDataSize>
 800382a:	281f      	cmp	r0, #31
 800382c:	d104      	bne.n	8003838 <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800382e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <MSC_BOT_CBW_Decode+0xa4>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d00c      	beq.n	8003852 <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 8003838:	2320      	movs	r3, #32
 800383a:	2205      	movs	r2, #5
 800383c:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f8e9 	bl	8003a18 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8003846:	2302      	movs	r3, #2
 8003848:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 800384a:	4628      	mov	r0, r5
 800384c:	f7ff ff3c 	bl	80036c8 <MSC_BOT_Abort>
 8003850:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 8003852:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8003856:	2901      	cmp	r1, #1
 8003858:	d8ee      	bhi.n	8003838 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 800385a:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ea      	beq.n	8003838 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8003862:	2b10      	cmp	r3, #16
 8003864:	d8e8      	bhi.n	8003838 <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 8003866:	f204 221b 	addw	r2, r4, #539	; 0x21b
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fb33 	bl	8003ed6 <SCSI_ProcessCmd>
 8003870:	2800      	cmp	r0, #0
 8003872:	db0b      	blt.n	800388c <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8003874:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8003876:	3b01      	subs	r3, #1
 8003878:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800387a:	2b02      	cmp	r3, #2
 800387c:	d905      	bls.n	800388a <MSC_BOT_CBW_Decode+0x7e>
      if (hmsc->bot_data_length > 0)
 800387e:	8962      	ldrh	r2, [r4, #10]
 8003880:	b982      	cbnz	r2, 80038a4 <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 8003882:	2100      	movs	r1, #0
 8003884:	4628      	mov	r0, r5
 8003886:	f7ff ff89 	bl	800379c <MSC_BOT_SendCSW>
 800388a:	bd38      	pop	{r3, r4, r5, pc}
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800388c:	7a23      	ldrb	r3, [r4, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d003      	beq.n	800389a <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 8003892:	4628      	mov	r0, r5
 8003894:	f7ff ff18 	bl	80036c8 <MSC_BOT_Abort>
 8003898:	bd38      	pop	{r3, r4, r5, pc}
       MSC_BOT_SendCSW (pdev,
 800389a:	2101      	movs	r1, #1
 800389c:	4628      	mov	r0, r5
 800389e:	f7ff ff7d 	bl	800379c <MSC_BOT_SendCSW>
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
        MSC_BOT_SendData(pdev,
 80038a4:	f104 010c 	add.w	r1, r4, #12
 80038a8:	4628      	mov	r0, r5
 80038aa:	f7ff ff2d 	bl	8003708 <MSC_BOT_SendData>
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	43425355 	.word	0x43425355

080038b4 <MSC_BOT_DataOut>:
{
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80038b8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 80038bc:	7a1a      	ldrb	r2, [r3, #8]
 80038be:	b112      	cbz	r2, 80038c6 <MSC_BOT_DataOut+0x12>
 80038c0:	2a01      	cmp	r2, #1
 80038c2:	d003      	beq.n	80038cc <MSC_BOT_DataOut+0x18>
 80038c4:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 80038c6:	f7ff ffa1 	bl	800380c <MSC_BOT_CBW_Decode>
    break;
 80038ca:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 80038cc:	f203 221b 	addw	r2, r3, #539	; 0x21b
 80038d0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80038d4:	f000 faff 	bl	8003ed6 <SCSI_ProcessCmd>
 80038d8:	2800      	cmp	r0, #0
 80038da:	db00      	blt.n	80038de <MSC_BOT_DataOut+0x2a>
 80038dc:	bd10      	pop	{r4, pc}
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80038de:	2101      	movs	r1, #1
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff5b 	bl	800379c <MSC_BOT_SendCSW>
}
 80038e6:	e7f9      	b.n	80038dc <MSC_BOT_DataOut+0x28>

080038e8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80038e8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80038ea:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 80038ee:	7a63      	ldrb	r3, [r4, #9]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d003      	beq.n	80038fc <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80038f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038f8:	d106      	bne.n	8003908 <MSC_BOT_CplClrFeature+0x20>
 80038fa:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80038fc:	2181      	movs	r1, #129	; 0x81
 80038fe:	f001 faae 	bl	8004e5e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8003902:	2300      	movs	r3, #0
 8003904:	7263      	strb	r3, [r4, #9]
 8003906:	bd10      	pop	{r4, pc}
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8003908:	2b01      	cmp	r3, #1
 800390a:	d0f6      	beq.n	80038fa <MSC_BOT_CplClrFeature+0x12>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800390c:	2101      	movs	r1, #1
 800390e:	f7ff ff45 	bl	800379c <MSC_BOT_SendCSW>
  }
  
}
 8003912:	e7f2      	b.n	80038fa <MSC_BOT_CplClrFeature+0x12>

08003914 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8003914:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003916:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 800391a:	7853      	ldrb	r3, [r2, #1]
 800391c:	f013 0f01 	tst.w	r3, #1
 8003920:	d10d      	bne.n	800393e <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8003922:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003926:	69d8      	ldr	r0, [r3, #28]
 8003928:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	4418      	add	r0, r3
    len = pPage[4] + 5;
 8003930:	7901      	ldrb	r1, [r0, #4]
 8003932:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 8003934:	7913      	ldrb	r3, [r2, #4]
 8003936:	4299      	cmp	r1, r3
 8003938:	d203      	bcs.n	8003942 <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 800393a:	460b      	mov	r3, r1
 800393c:	e001      	b.n	8003942 <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 800393e:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8003940:	4806      	ldr	r0, [pc, #24]	; (800395c <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 8003942:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 8003944:	e004      	b.n	8003950 <SCSI_Inquiry+0x3c>
  {
    len--;
 8003946:	3b01      	subs	r3, #1
 8003948:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 800394a:	5cc1      	ldrb	r1, [r0, r3]
 800394c:	18e2      	adds	r2, r4, r3
 800394e:	7311      	strb	r1, [r2, #12]
  while (len) 
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f8      	bne.n	8003946 <SCSI_Inquiry+0x32>
  }
  return 0;
}
 8003954:	2000      	movs	r0, #0
 8003956:	bc10      	pop	{r4}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	08005144 	.word	0x08005144

08003960 <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003960:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 8003964:	2308      	movs	r3, #8
 8003966:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 8003968:	e005      	b.n	8003976 <SCSI_ModeSense6+0x16>
  {
    len--;
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <SCSI_ModeSense6+0x20>)
 8003970:	5cd1      	ldrb	r1, [r2, r3]
 8003972:	18c2      	adds	r2, r0, r3
 8003974:	7311      	strb	r1, [r2, #12]
  while (len) 
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f7      	bne.n	800396a <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 800397a:	2000      	movs	r0, #0
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	0800513c 	.word	0x0800513c

08003984 <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003984:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 8003988:	2308      	movs	r3, #8
 800398a:	8143      	strh	r3, [r0, #10]

  while (len) 
 800398c:	e005      	b.n	800399a <SCSI_ModeSense10+0x16>
  {
    len--;
 800398e:	3b01      	subs	r3, #1
 8003990:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8003992:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <SCSI_ModeSense10+0x20>)
 8003994:	5cd1      	ldrb	r1, [r2, r3]
 8003996:	18c2      	adds	r2, r0, r3
 8003998:	7311      	strb	r1, [r2, #12]
  while (len) 
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f7      	bne.n	800398e <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	08005134 	.word	0x08005134

080039a8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80039a8:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80039aa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80039ae:	2300      	movs	r3, #0
 80039b0:	e004      	b.n	80039bc <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 80039b2:	18e1      	adds	r1, r4, r3
 80039b4:	2000      	movs	r0, #0
 80039b6:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b11      	cmp	r3, #17
 80039be:	d9f8      	bls.n	80039b2 <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 80039c0:	2370      	movs	r3, #112	; 0x70
 80039c2:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80039c4:	230c      	movs	r3, #12
 80039c6:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80039c8:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 80039cc:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d00f      	beq.n	80039f4 <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80039d4:	f103 0147 	add.w	r1, r3, #71	; 0x47
 80039d8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80039dc:	7908      	ldrb	r0, [r1, #4]
 80039de:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80039e0:	7a48      	ldrb	r0, [r1, #9]
 80039e2:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80039e4:	7a09      	ldrb	r1, [r1, #8]
 80039e6:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 80039e8:	3301      	adds	r3, #1
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d008      	beq.n	8003a06 <SCSI_RequestSense+0x5e>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80039f4:	2312      	movs	r3, #18
 80039f6:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80039f8:	7913      	ldrb	r3, [r2, #4]
 80039fa:	2b12      	cmp	r3, #18
 80039fc:	d800      	bhi.n	8003a00 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 80039fe:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 8003a00:	2000      	movs	r0, #0
 8003a02:	bc10      	pop	{r4}
 8003a04:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 8003a0c:	e7f2      	b.n	80039f4 <SCSI_RequestSense+0x4c>

08003a0e <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 8003a0e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 8003a12:	2000      	movs	r0, #0
 8003a14:	8158      	strh	r0, [r3, #10]
  return 0;
}
 8003a16:	4770      	bx	lr

08003a18 <SCSI_SenseCode>:
{
 8003a18:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003a1a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8003a1e:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8003a22:	f101 0047 	add.w	r0, r1, #71	; 0x47
 8003a26:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8003a2a:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 8003a30:	3101      	adds	r1, #1
 8003a32:	b2c9      	uxtb	r1, r1
 8003a34:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8003a38:	2904      	cmp	r1, #4
 8003a3a:	d001      	beq.n	8003a40 <SCSI_SenseCode+0x28>
}
 8003a3c:	bc10      	pop	{r4}
 8003a3e:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 8003a46:	e7f9      	b.n	8003a3c <SCSI_SenseCode+0x24>

08003a48 <SCSI_TestUnitReady>:
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8003a4c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8003a50:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003a54:	b95b      	cbnz	r3, 8003a6e <SCSI_TestUnitReady+0x26>
 8003a56:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8003a58:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4798      	blx	r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	b960      	cbnz	r0, 8003a80 <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 8003a66:	2200      	movs	r2, #0
 8003a68:	816a      	strh	r2, [r5, #10]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8003a6e:	2320      	movs	r3, #32
 8003a70:	2205      	movs	r2, #5
 8003a72:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 8003a76:	f7ff ffcf 	bl	8003a18 <SCSI_SenseCode>
    return -1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e7f4      	b.n	8003a6a <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 8003a80:	233a      	movs	r3, #58	; 0x3a
 8003a82:	2202      	movs	r2, #2
 8003a84:	4631      	mov	r1, r6
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff ffc6 	bl	8003a18 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	722b      	strb	r3, [r5, #8]
    return -1;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	e7e9      	b.n	8003a6a <SCSI_TestUnitReady+0x22>

08003a96 <SCSI_ReadFormatCapacity>:
{
 8003a96:	b570      	push	{r4, r5, r6, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003a9e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e004      	b.n	8003ab0 <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 8003aa6:	18e2      	adds	r2, r4, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 8003aac:	3301      	adds	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b0b      	cmp	r3, #11
 8003ab2:	d9f8      	bls.n	8003aa6 <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8003ab4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f10d 0206 	add.w	r2, sp, #6
 8003abe:	4669      	mov	r1, sp
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	4798      	blx	r3
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	b9d8      	cbnz	r0, 8003b00 <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 8003ac8:	2308      	movs	r3, #8
 8003aca:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8003acc:	9a00      	ldr	r2, [sp, #0]
 8003ace:	1e53      	subs	r3, r2, #1
 8003ad0:	0e18      	lsrs	r0, r3, #24
 8003ad2:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8003ad4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8003ad8:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8003ada:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003ade:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8003ae8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003aec:	2200      	movs	r2, #0
 8003aee:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8003af0:	0a1a      	lsrs	r2, r3, #8
 8003af2:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8003af4:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 8003af6:	230c      	movs	r3, #12
 8003af8:	8163      	strh	r3, [r4, #10]
}
 8003afa:	4608      	mov	r0, r1
 8003afc:	b002      	add	sp, #8
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8003b00:	233a      	movs	r3, #58	; 0x3a
 8003b02:	2202      	movs	r2, #2
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff ff86 	bl	8003a18 <SCSI_SenseCode>
    return -1;
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	e7f3      	b.n	8003afa <SCSI_ReadFormatCapacity+0x64>

08003b12 <SCSI_ReadCapacity10>:
{
 8003b12:	b570      	push	{r4, r5, r6, lr}
 8003b14:	4605      	mov	r5, r0
 8003b16:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8003b18:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8003b1c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f204 225e 	addw	r2, r4, #606	; 0x25e
 8003b26:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	4798      	blx	r3
 8003b2e:	b9c8      	cbnz	r0, 8003b64 <SCSI_ReadCapacity10+0x52>
 8003b30:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8003b32:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 8003b36:	1e53      	subs	r3, r2, #1
 8003b38:	0e18      	lsrs	r0, r3, #24
 8003b3a:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8003b3c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8003b40:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8003b42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003b46:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8003b4c:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 8003b50:	2200      	movs	r2, #0
 8003b52:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8003b54:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8003b56:	0a1a      	lsrs	r2, r3, #8
 8003b58:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8003b5a:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	8163      	strh	r3, [r4, #10]
}
 8003b60:	4608      	mov	r0, r1
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8003b64:	233a      	movs	r3, #58	; 0x3a
 8003b66:	2202      	movs	r2, #2
 8003b68:	4631      	mov	r1, r6
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f7ff ff54 	bl	8003a18 <SCSI_SenseCode>
    return -1;
 8003b70:	f04f 31ff 	mov.w	r1, #4294967295
 8003b74:	e7f4      	b.n	8003b60 <SCSI_ReadCapacity10+0x4e>

08003b76 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8003b76:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8003b78:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	d801      	bhi.n	8003b8a <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 8003b86:	2000      	movs	r0, #0
}
 8003b88:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 8003b8a:	2321      	movs	r3, #33	; 0x21
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	f7ff ff43 	bl	8003a18 <SCSI_SenseCode>
    return -1;
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8003b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8003ba0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003ba4:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8003ba8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003bac:	bf28      	it	cs
 8003bae:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8003bb2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003bb6:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 8003bba:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8003bbe:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8003bc2:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8003bc6:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	fbb1 f2f2 	udiv	r2, r1, r2
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	47c8      	blx	r9
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	db1a      	blt.n	8003c10 <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 8003bda:	b2ab      	uxth	r3, r5
 8003bdc:	463a      	mov	r2, r7
 8003bde:	2181      	movs	r1, #129	; 0x81
 8003be0:	4630      	mov	r0, r6
 8003be2:	f001 f979 	bl	8004ed8 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8003be6:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8003bea:	442b      	add	r3, r5
 8003bec:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8003bf0:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8003bf4:	1b5b      	subs	r3, r3, r5
 8003bf6:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8003bfa:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8003bfe:	1b55      	subs	r5, r2, r5
 8003c00:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8003c04:	b973      	cbnz	r3, 8003c24 <SCSI_ProcessRead+0x8c>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8003c06:	2303      	movs	r3, #3
 8003c08:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8003c10:	2311      	movs	r3, #17
 8003c12:	2204      	movs	r2, #4
 8003c14:	4641      	mov	r1, r8
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff fefe 	bl	8003a18 <SCSI_SenseCode>
    return -1; 
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return 0;
 8003c24:	2000      	movs	r0, #0
}
 8003c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003c2a <SCSI_Read10>:
{
 8003c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8003c30:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8003c34:	7a23      	ldrb	r3, [r4, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d137      	bne.n	8003caa <SCSI_Read10+0x80>
 8003c3a:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8003c3c:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	da3a      	bge.n	8003cba <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8003c44:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4798      	blx	r3
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d13c      	bne.n	8003ccc <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003c52:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 8003c54:	78ea      	ldrb	r2, [r5, #3]
 8003c56:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003c58:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8003c5c:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 8003c5e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8003c62:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 8003c64:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003c66:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8003c6a:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 8003c6c:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8003c6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c72:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8003c76:	4639      	mov	r1, r7
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff ff7c 	bl	8003b76 <SCSI_CheckAddressRange>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	db37      	blt.n	8003cf2 <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8003c82:	2302      	movs	r3, #2
 8003c84:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8003c86:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8003c8a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8003c8e:	fb01 f202 	mul.w	r2, r1, r2
 8003c92:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8003c96:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8003c9a:	fb03 f301 	mul.w	r3, r3, r1
 8003c9e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8003ca2:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d119      	bne.n	8003cde <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8003caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cae:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7ff ff70 	bl	8003b98 <SCSI_ProcessRead>
 8003cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8003cba:	2320      	movs	r3, #32
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003cc2:	f7ff fea9 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8003ccc:	233a      	movs	r3, #58	; 0x3a
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f7ff fea0 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8003cde:	2320      	movs	r3, #32
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f7ff fe96 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return -1; /* error */
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cf8 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8003d00:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8003d04:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8003d08:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003d0c:	bf28      	it	cs
 8003d0e:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8003d12:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003d16:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 8003d1a:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8003d1e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8003d22:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8003d26:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	fbb1 f2f2 	udiv	r2, r1, r2
 8003d30:	4639      	mov	r1, r7
 8003d32:	4640      	mov	r0, r8
 8003d34:	47c8      	blx	r9
 8003d36:	2800      	cmp	r0, #0
 8003d38:	db1d      	blt.n	8003d76 <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8003d3a:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8003d3e:	442b      	add	r3, r5
 8003d40:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8003d44:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8003d48:	1b5b      	subs	r3, r3, r5
 8003d4a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8003d4e:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8003d52:	1b55      	subs	r5, r2, r5
 8003d54:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8003d58:	b1bb      	cbz	r3, 8003d8a <SCSI_ProcessWrite+0x92>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	bf28      	it	cs
 8003d60:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	463a      	mov	r2, r7
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f001 f8c2 	bl	8004ef4 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 8003d70:	2000      	movs	r0, #0
}
 8003d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8003d76:	2303      	movs	r3, #3
 8003d78:	2204      	movs	r2, #4
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7ff fe4b 	bl	8003a18 <SCSI_SenseCode>
    return -1; 
 8003d82:	f04f 30ff 	mov.w	r0, #4294967295
 8003d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f7ff fd05 	bl	800379c <MSC_BOT_SendCSW>
  return 0;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003d98 <SCSI_Write10>:
{
 8003d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8003da0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8003da4:	7a23      	ldrb	r3, [r4, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d172      	bne.n	8003e90 <SCSI_Write10+0xf8>
 8003daa:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8003dac:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db48      	blt.n	8003e46 <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8003db4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4798      	blx	r3
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d14a      	bne.n	8003e58 <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8003dc2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4638      	mov	r0, r7
 8003dca:	4798      	blx	r3
 8003dcc:	4680      	mov	r8, r0
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d14b      	bne.n	8003e6a <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003dd2:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 8003dd4:	78f2      	ldrb	r2, [r6, #3]
 8003dd6:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003dd8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8003ddc:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 8003dde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8003de2:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 8003de4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8003de6:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8003dea:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 8003dec:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8003dee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003df2:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 8003df6:	4639      	mov	r1, r7
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f7ff febc 	bl	8003b76 <SCSI_CheckAddressRange>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	db4a      	blt.n	8003e98 <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8003e02:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8003e06:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8003e0a:	fb01 f202 	mul.w	r2, r1, r2
 8003e0e:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8003e12:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8003e16:	fb03 f301 	mul.w	r3, r3, r1
 8003e1a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8003e1e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d12a      	bne.n	8003e7c <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8003e26:	2101      	movs	r1, #1
 8003e28:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	bf28      	it	cs
 8003e30:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f104 020c 	add.w	r2, r4, #12
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f001 f85a 	bl	8004ef4 <USBD_LL_PrepareReceive>
}
 8003e40:	4640      	mov	r0, r8
 8003e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 8003e46:	2320      	movs	r3, #32
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003e4e:	f7ff fde3 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003e52:	f04f 38ff 	mov.w	r8, #4294967295
 8003e56:	e7f3      	b.n	8003e40 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8003e58:	233a      	movs	r3, #58	; 0x3a
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fdda 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003e64:	f04f 38ff 	mov.w	r8, #4294967295
 8003e68:	e7ea      	b.n	8003e40 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8003e6a:	2327      	movs	r3, #39	; 0x27
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	4639      	mov	r1, r7
 8003e70:	4628      	mov	r0, r5
 8003e72:	f7ff fdd1 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003e76:	f04f 38ff 	mov.w	r8, #4294967295
 8003e7a:	e7e1      	b.n	8003e40 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	2205      	movs	r2, #5
 8003e80:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8003e84:	4628      	mov	r0, r5
 8003e86:	f7ff fdc7 	bl	8003a18 <SCSI_SenseCode>
      return -1;
 8003e8a:	f04f 38ff 	mov.w	r8, #4294967295
 8003e8e:	e7d7      	b.n	8003e40 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 8003e90:	f7ff ff32 	bl	8003cf8 <SCSI_ProcessWrite>
 8003e94:	4680      	mov	r8, r0
 8003e96:	e7d3      	b.n	8003e40 <SCSI_Write10+0xa8>
      return -1; /* error */      
 8003e98:	f04f 38ff 	mov.w	r8, #4294967295
 8003e9c:	e7d0      	b.n	8003e40 <SCSI_Write10+0xa8>

08003e9e <SCSI_Verify10>:
{
 8003e9e:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8003ea0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8003ea4:	7853      	ldrb	r3, [r2, #1]
 8003ea6:	f013 0f02 	tst.w	r3, #2
 8003eaa:	d10a      	bne.n	8003ec2 <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 8003eac:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8003eb0:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8003eb4:	f7ff fe5f 	bl	8003b76 <SCSI_CheckAddressRange>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	db09      	blt.n	8003ed0 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	8160      	strh	r0, [r4, #10]
  return 0;
 8003ec0:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 8003ec2:	2324      	movs	r3, #36	; 0x24
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	f7ff fda7 	bl	8003a18 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	bd10      	pop	{r4, pc}
    return -1; /* error */      
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003ed4:	bd10      	pop	{r4, pc}

08003ed6 <SCSI_ProcessCmd>:
{
 8003ed6:	b508      	push	{r3, lr}
  switch (params[0])
 8003ed8:	7813      	ldrb	r3, [r2, #0]
 8003eda:	2b5a      	cmp	r3, #90	; 0x5a
 8003edc:	d853      	bhi.n	8003f86 <SCSI_ProcessCmd+0xb0>
 8003ede:	e8df f003 	tbb	[pc, r3]
 8003ee2:	522e      	.short	0x522e
 8003ee4:	52523152 	.word	0x52523152
 8003ee8:	52525252 	.word	0x52525252
 8003eec:	52525252 	.word	0x52525252
 8003ef0:	52525252 	.word	0x52525252
 8003ef4:	52525234 	.word	0x52525234
 8003ef8:	52525252 	.word	0x52525252
 8003efc:	5252373d 	.word	0x5252373d
 8003f00:	5252523a 	.word	0x5252523a
 8003f04:	46524352 	.word	0x46524352
 8003f08:	52495252 	.word	0x52495252
 8003f0c:	5252524c 	.word	0x5252524c
 8003f10:	52524f52 	.word	0x52524f52
 8003f14:	52525252 	.word	0x52525252
 8003f18:	52525252 	.word	0x52525252
 8003f1c:	52525252 	.word	0x52525252
 8003f20:	52525252 	.word	0x52525252
 8003f24:	52525252 	.word	0x52525252
 8003f28:	52525252 	.word	0x52525252
 8003f2c:	52525252 	.word	0x52525252
 8003f30:	52525252 	.word	0x52525252
 8003f34:	52525252 	.word	0x52525252
 8003f38:	52525252 	.word	0x52525252
 8003f3c:	40          	.byte	0x40
 8003f3d:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 8003f3e:	f7ff fd83 	bl	8003a48 <SCSI_TestUnitReady>
 8003f42:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 8003f44:	f7ff fd30 	bl	80039a8 <SCSI_RequestSense>
 8003f48:	bd08      	pop	{r3, pc}
    return SCSI_Inquiry(pdev, lun, params);
 8003f4a:	f7ff fce3 	bl	8003914 <SCSI_Inquiry>
 8003f4e:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 8003f50:	f7ff fd5d 	bl	8003a0e <SCSI_StartStopUnit>
 8003f54:	bd08      	pop	{r3, pc}
    return SCSI_StartStopUnit(pdev, lun, params);
 8003f56:	f7ff fd5a 	bl	8003a0e <SCSI_StartStopUnit>
 8003f5a:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense6 (pdev, lun, params);
 8003f5c:	f7ff fd00 	bl	8003960 <SCSI_ModeSense6>
 8003f60:	bd08      	pop	{r3, pc}
    return SCSI_ModeSense10 (pdev, lun, params);
 8003f62:	f7ff fd0f 	bl	8003984 <SCSI_ModeSense10>
 8003f66:	bd08      	pop	{r3, pc}
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 8003f68:	f7ff fd95 	bl	8003a96 <SCSI_ReadFormatCapacity>
 8003f6c:	bd08      	pop	{r3, pc}
    return SCSI_ReadCapacity10(pdev, lun, params);
 8003f6e:	f7ff fdd0 	bl	8003b12 <SCSI_ReadCapacity10>
 8003f72:	bd08      	pop	{r3, pc}
    return SCSI_Read10(pdev, lun, params); 
 8003f74:	f7ff fe59 	bl	8003c2a <SCSI_Read10>
 8003f78:	bd08      	pop	{r3, pc}
    return SCSI_Write10(pdev, lun, params);
 8003f7a:	f7ff ff0d 	bl	8003d98 <SCSI_Write10>
 8003f7e:	bd08      	pop	{r3, pc}
    return SCSI_Verify10(pdev, lun, params);
 8003f80:	f7ff ff8d 	bl	8003e9e <SCSI_Verify10>
 8003f84:	bd08      	pop	{r3, pc}
    SCSI_SenseCode(pdev, 
 8003f86:	2320      	movs	r3, #32
 8003f88:	2205      	movs	r2, #5
 8003f8a:	f7ff fd45 	bl	8003a18 <SCSI_SenseCode>
    return -1;
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f92:	bd08      	pop	{r3, pc}

08003f94 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003f94:	b198      	cbz	r0, 8003fbe <USBD_Init+0x2a>
{
 8003f96:	b508      	push	{r3, lr}
 8003f98:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003f9a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8003f9e:	b110      	cbz	r0, 8003fa6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003fa6:	b109      	cbz	r1, 8003fac <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003fa8:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8003fac:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003fb4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003fb6:	f000 fed7 	bl	8004d68 <USBD_LL_Init>
  
  return USBD_OK; 
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	4770      	bx	lr

08003fc2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003fc2:	b119      	cbz	r1, 8003fcc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003fc4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003fc8:	2000      	movs	r0, #0
 8003fca:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003fcc:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003fce:	4770      	bx	lr

08003fd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003fd0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003fd2:	f000 ff09 	bl	8004de8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	bd08      	pop	{r3, pc}

08003fda <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003fda:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003fdc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fe0:	b123      	cbz	r3, 8003fec <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4798      	blx	r3
 8003fe6:	b118      	cbz	r0, 8003ff0 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003fe8:	2002      	movs	r0, #2
 8003fea:	bd08      	pop	{r3, pc}
 8003fec:	2002      	movs	r0, #2
 8003fee:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 8003ff0:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8003ff2:	bd08      	pop	{r3, pc}

08003ff4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003ff4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003ff6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4798      	blx	r3
  return USBD_OK;
}
 8003ffe:	2000      	movs	r0, #0
 8004000:	bd08      	pop	{r3, pc}

08004002 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004002:	b538      	push	{r3, r4, r5, lr}
 8004004:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004006:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f90d 	bl	800422a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004010:	2301      	movs	r3, #1
 8004012:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004016:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800401a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800401e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8004022:	f001 031f 	and.w	r3, r1, #31
 8004026:	2b01      	cmp	r3, #1
 8004028:	d00e      	beq.n	8004048 <USBD_LL_SetupStage+0x46>
 800402a:	b13b      	cbz	r3, 800403c <USBD_LL_SetupStage+0x3a>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d010      	beq.n	8004052 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004030:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004034:	4620      	mov	r0, r4
 8004036:	f000 ff12 	bl	8004e5e <USBD_LL_StallEP>
    break;
 800403a:	e003      	b.n	8004044 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800403c:	4629      	mov	r1, r5
 800403e:	4620      	mov	r0, r4
 8004040:	f000 fa6e 	bl	8004520 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8004044:	2000      	movs	r0, #0
 8004046:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8004048:	4629      	mov	r1, r5
 800404a:	4620      	mov	r0, r4
 800404c:	f000 fa8c 	bl	8004568 <USBD_StdItfReq>
    break;
 8004050:	e7f8      	b.n	8004044 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8004052:	4629      	mov	r1, r5
 8004054:	4620      	mov	r0, r4
 8004056:	f000 faa3 	bl	80045a0 <USBD_StdEPReq>
    break;
 800405a:	e7f3      	b.n	8004044 <USBD_LL_SetupStage+0x42>

0800405c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800405c:	b510      	push	{r4, lr}
 800405e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004060:	bb19      	cbnz	r1, 80040aa <USBD_LL_DataOutStage+0x4e>
 8004062:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004064:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8004068:	2a03      	cmp	r2, #3
 800406a:	d127      	bne.n	80040bc <USBD_LL_DataOutStage+0x60>
    {
      if(pep->rem_length > pep->maxpacket)
 800406c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8004070:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8004074:	4291      	cmp	r1, r2
 8004076:	d80b      	bhi.n	8004090 <USBD_LL_DataOutStage+0x34>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004078:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	b11b      	cbz	r3, 8004088 <USBD_LL_DataOutStage+0x2c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004080:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004084:	2a03      	cmp	r2, #3
 8004086:	d00e      	beq.n	80040a6 <USBD_LL_DataOutStage+0x4a>
        {
          pdev->pClass->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 8004088:	4620      	mov	r0, r4
 800408a:	f000 fb4f 	bl	800472c <USBD_CtlSendStatus>
 800408e:	e015      	b.n	80040bc <USBD_LL_DataOutStage+0x60>
        pep->rem_length -=  pep->maxpacket;
 8004090:	1a89      	subs	r1, r1, r2
 8004092:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8004096:	428a      	cmp	r2, r1
 8004098:	bf28      	it	cs
 800409a:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 800409c:	b292      	uxth	r2, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f000 fb3c 	bl	800471c <USBD_CtlContinueRx>
 80040a4:	e00a      	b.n	80040bc <USBD_LL_DataOutStage+0x60>
          pdev->pClass->EP0_RxReady(pdev); 
 80040a6:	4798      	blx	r3
 80040a8:	e7ee      	b.n	8004088 <USBD_LL_DataOutStage+0x2c>
 80040aa:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80040ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	b11b      	cbz	r3, 80040bc <USBD_LL_DataOutStage+0x60>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80040b4:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80040b8:	2903      	cmp	r1, #3
 80040ba:	d001      	beq.n	80040c0 <USBD_LL_DataOutStage+0x64>
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80040bc:	2000      	movs	r0, #0
 80040be:	bd10      	pop	{r4, pc}
    pdev->pClass->DataOut(pdev, epnum); 
 80040c0:	4611      	mov	r1, r2
 80040c2:	4798      	blx	r3
 80040c4:	e7fa      	b.n	80040bc <USBD_LL_DataOutStage+0x60>

080040c6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80040c6:	b510      	push	{r4, lr}
 80040c8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80040ca:	2900      	cmp	r1, #0
 80040cc:	d147      	bne.n	800415e <USBD_LL_DataInStage+0x98>
 80040ce:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80040d0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80040d4:	2a02      	cmp	r2, #2
 80040d6:	d005      	beq.n	80040e4 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80040d8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d03a      	beq.n	8004156 <USBD_LL_DataInStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80040e0:	2000      	movs	r0, #0
 80040e2:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80040e4:	69c1      	ldr	r1, [r0, #28]
 80040e6:	6a02      	ldr	r2, [r0, #32]
 80040e8:	4291      	cmp	r1, r2
 80040ea:	d817      	bhi.n	800411c <USBD_LL_DataInStage+0x56>
        if((pep->total_length % pep->maxpacket == 0) &&
 80040ec:	6981      	ldr	r1, [r0, #24]
 80040ee:	fbb1 f3f2 	udiv	r3, r1, r2
 80040f2:	fb02 1313 	mls	r3, r2, r3, r1
 80040f6:	b92b      	cbnz	r3, 8004104 <USBD_LL_DataInStage+0x3e>
 80040f8:	428a      	cmp	r2, r1
 80040fa:	d803      	bhi.n	8004104 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 80040fc:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004100:	4299      	cmp	r1, r3
 8004102:	d318      	bcc.n	8004136 <USBD_LL_DataInStage+0x70>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004104:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	b11b      	cbz	r3, 8004114 <USBD_LL_DataInStage+0x4e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800410c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004110:	2a03      	cmp	r2, #3
 8004112:	d01d      	beq.n	8004150 <USBD_LL_DataInStage+0x8a>
          USBD_CtlReceiveStatus(pdev);
 8004114:	4620      	mov	r0, r4
 8004116:	f000 fb14 	bl	8004742 <USBD_CtlReceiveStatus>
 800411a:	e7dd      	b.n	80040d8 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 800411c:	1a8a      	subs	r2, r1, r2
 800411e:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8004120:	b292      	uxth	r2, r2
 8004122:	4619      	mov	r1, r3
 8004124:	f000 faf2 	bl	800470c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8004128:	2300      	movs	r3, #0
 800412a:	461a      	mov	r2, r3
 800412c:	4619      	mov	r1, r3
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fee0 	bl	8004ef4 <USBD_LL_PrepareReceive>
 8004134:	e7d0      	b.n	80040d8 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	4611      	mov	r1, r2
 800413a:	f000 fae7 	bl	800470c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800413e:	2100      	movs	r1, #0
 8004140:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8004144:	460b      	mov	r3, r1
 8004146:	460a      	mov	r2, r1
 8004148:	4620      	mov	r0, r4
 800414a:	f000 fed3 	bl	8004ef4 <USBD_LL_PrepareReceive>
 800414e:	e7c3      	b.n	80040d8 <USBD_LL_DataInStage+0x12>
            pdev->pClass->EP0_TxSent(pdev); 
 8004150:	4620      	mov	r0, r4
 8004152:	4798      	blx	r3
 8004154:	e7de      	b.n	8004114 <USBD_LL_DataInStage+0x4e>
      pdev->dev_test_mode = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800415c:	e7c0      	b.n	80040e0 <USBD_LL_DataInStage+0x1a>
 800415e:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8004160:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ba      	beq.n	80040e0 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800416a:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800416e:	2903      	cmp	r1, #3
 8004170:	d1b6      	bne.n	80040e0 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8004172:	4611      	mov	r1, r2
 8004174:	4798      	blx	r3
 8004176:	e7b3      	b.n	80040e0 <USBD_LL_DataInStage+0x1a>

08004178 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	2200      	movs	r2, #0
 8004180:	4611      	mov	r1, r2
 8004182:	f000 fe3f 	bl	8004e04 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004186:	2540      	movs	r5, #64	; 0x40
 8004188:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800418c:	462b      	mov	r3, r5
 800418e:	2200      	movs	r2, #0
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	4620      	mov	r0, r4
 8004194:	f000 fe36 	bl	8004e04 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004198:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800419a:	2301      	movs	r3, #1
 800419c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80041a0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80041a4:	b12b      	cbz	r3, 80041b2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80041a6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	7921      	ldrb	r1, [r4, #4]
 80041ae:	4620      	mov	r0, r4
 80041b0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80041b2:	2000      	movs	r0, #0
 80041b4:	bd38      	pop	{r3, r4, r5, pc}

080041b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80041b6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80041bc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80041c0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80041c4:	2304      	movs	r3, #4
 80041c6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80041ca:	2000      	movs	r0, #0
 80041cc:	4770      	bx	lr

080041ce <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80041ce:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80041d2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80041d6:	2000      	movs	r0, #0
 80041d8:	4770      	bx	lr

080041da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80041da:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80041dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d001      	beq.n	80041e8 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80041e4:	2000      	movs	r0, #0
 80041e6:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 80041e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f8      	beq.n	80041e4 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80041f2:	4798      	blx	r3
 80041f4:	e7f6      	b.n	80041e4 <USBD_LL_SOF+0xa>

080041f6 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 80041f6:	2300      	movs	r3, #0

    while (*buf != '\0') 
 80041f8:	e002      	b.n	8004200 <USBD_GetLen+0xa>
    {
        len++;
 80041fa:	3301      	adds	r3, #1
 80041fc:	b2db      	uxtb	r3, r3
        buf++;
 80041fe:	3001      	adds	r0, #1
    while (*buf != '\0') 
 8004200:	7802      	ldrb	r2, [r0, #0]
 8004202:	2a00      	cmp	r2, #0
 8004204:	d1f9      	bne.n	80041fa <USBD_GetLen+0x4>
    }

    return len;
}
 8004206:	4618      	mov	r0, r3
 8004208:	4770      	bx	lr

0800420a <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800420a:	884b      	ldrh	r3, [r1, #2]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d000      	beq.n	8004212 <USBD_SetFeature+0x8>
 8004210:	4770      	bx	lr
{
 8004212:	b510      	push	{r4, lr}
 8004214:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8004216:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800421a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004222:	4620      	mov	r0, r4
 8004224:	f000 fa82 	bl	800472c <USBD_CtlSendStatus>
 8004228:	bd10      	pop	{r4, pc}

0800422a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800422a:	780b      	ldrb	r3, [r1, #0]
 800422c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800422e:	784b      	ldrb	r3, [r1, #1]
 8004230:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004232:	788b      	ldrb	r3, [r1, #2]
 8004234:	78ca      	ldrb	r2, [r1, #3]
 8004236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800423a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800423c:	790b      	ldrb	r3, [r1, #4]
 800423e:	794a      	ldrb	r2, [r1, #5]
 8004240:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004244:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004246:	798b      	ldrb	r3, [r1, #6]
 8004248:	79ca      	ldrb	r2, [r1, #7]
 800424a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800424e:	80c3      	strh	r3, [r0, #6]
 8004250:	4770      	bx	lr

08004252 <USBD_CtlError>:
{
 8004252:	b510      	push	{r4, lr}
 8004254:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	f000 fe01 	bl	8004e5e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800425c:	2100      	movs	r1, #0
 800425e:	4620      	mov	r0, r4
 8004260:	f000 fdfd 	bl	8004e5e <USBD_LL_StallEP>
 8004264:	bd10      	pop	{r4, pc}

08004266 <USBD_GetDescriptor>:
{
 8004266:	b530      	push	{r4, r5, lr}
 8004268:	b083      	sub	sp, #12
 800426a:	4604      	mov	r4, r0
 800426c:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 800426e:	884a      	ldrh	r2, [r1, #2]
 8004270:	0a13      	lsrs	r3, r2, #8
 8004272:	3b01      	subs	r3, #1
 8004274:	2b06      	cmp	r3, #6
 8004276:	f200 8081 	bhi.w	800437c <USBD_GetDescriptor+0x116>
 800427a:	e8df f003 	tbb	[pc, r3]
 800427e:	1304      	.short	0x1304
 8004280:	637f7f27 	.word	0x637f7f27
 8004284:	70          	.byte	0x70
 8004285:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004286:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f10d 0106 	add.w	r1, sp, #6
 8004290:	7c00      	ldrb	r0, [r0, #16]
 8004292:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8004294:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004298:	b112      	cbz	r2, 80042a0 <USBD_GetDescriptor+0x3a>
 800429a:	88eb      	ldrh	r3, [r5, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d171      	bne.n	8004384 <USBD_GetDescriptor+0x11e>
}
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80042a4:	7c03      	ldrb	r3, [r0, #16]
 80042a6:	b943      	cbnz	r3, 80042ba <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80042a8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	f10d 0006 	add.w	r0, sp, #6
 80042b2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042b4:	2302      	movs	r3, #2
 80042b6:	7043      	strb	r3, [r0, #1]
 80042b8:	e7ec      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80042ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f10d 0006 	add.w	r0, sp, #6
 80042c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042c6:	2302      	movs	r3, #2
 80042c8:	7043      	strb	r3, [r0, #1]
 80042ca:	e7e3      	b.n	8004294 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	2a05      	cmp	r2, #5
 80042d0:	d834      	bhi.n	800433c <USBD_GetDescriptor+0xd6>
 80042d2:	e8df f002 	tbb	[pc, r2]
 80042d6:	0b03      	.short	0x0b03
 80042d8:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80042dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f10d 0106 	add.w	r1, sp, #6
 80042e6:	7c00      	ldrb	r0, [r0, #16]
 80042e8:	4798      	blx	r3
      break;
 80042ea:	e7d3      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80042ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f10d 0106 	add.w	r1, sp, #6
 80042f6:	7c00      	ldrb	r0, [r0, #16]
 80042f8:	4798      	blx	r3
      break;
 80042fa:	e7cb      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80042fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f10d 0106 	add.w	r1, sp, #6
 8004306:	7c00      	ldrb	r0, [r0, #16]
 8004308:	4798      	blx	r3
      break;
 800430a:	e7c3      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800430c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f10d 0106 	add.w	r1, sp, #6
 8004316:	7c00      	ldrb	r0, [r0, #16]
 8004318:	4798      	blx	r3
      break;
 800431a:	e7bb      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800431c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f10d 0106 	add.w	r1, sp, #6
 8004326:	7c00      	ldrb	r0, [r0, #16]
 8004328:	4798      	blx	r3
      break;
 800432a:	e7b3      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800432c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f10d 0106 	add.w	r1, sp, #6
 8004336:	7c00      	ldrb	r0, [r0, #16]
 8004338:	4798      	blx	r3
      break;
 800433a:	e7ab      	b.n	8004294 <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 800433c:	4629      	mov	r1, r5
 800433e:	f7ff ff88 	bl	8004252 <USBD_CtlError>
      return;
 8004342:	e7ad      	b.n	80042a0 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004344:	7c03      	ldrb	r3, [r0, #16]
 8004346:	b933      	cbnz	r3, 8004356 <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004348:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	f10d 0006 	add.w	r0, sp, #6
 8004352:	4798      	blx	r3
      break;
 8004354:	e79e      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8004356:	4629      	mov	r1, r5
 8004358:	f7ff ff7b 	bl	8004252 <USBD_CtlError>
      return;
 800435c:	e7a0      	b.n	80042a0 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800435e:	7c03      	ldrb	r3, [r0, #16]
 8004360:	b943      	cbnz	r3, 8004374 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004362:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f10d 0006 	add.w	r0, sp, #6
 800436c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800436e:	2307      	movs	r3, #7
 8004370:	7043      	strb	r3, [r0, #1]
      break; 
 8004372:	e78f      	b.n	8004294 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8004374:	4629      	mov	r1, r5
 8004376:	f7ff ff6c 	bl	8004252 <USBD_CtlError>
      return;
 800437a:	e791      	b.n	80042a0 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 800437c:	4629      	mov	r1, r5
 800437e:	f7ff ff68 	bl	8004252 <USBD_CtlError>
    return;
 8004382:	e78d      	b.n	80042a0 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 8004384:	429a      	cmp	r2, r3
 8004386:	bf28      	it	cs
 8004388:	461a      	movcs	r2, r3
 800438a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800438e:	4601      	mov	r1, r0
 8004390:	4620      	mov	r0, r4
 8004392:	f000 f9ae 	bl	80046f2 <USBD_CtlSendData>
 8004396:	e783      	b.n	80042a0 <USBD_GetDescriptor+0x3a>

08004398 <USBD_SetAddress>:
{
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800439c:	888b      	ldrh	r3, [r1, #4]
 800439e:	b9e3      	cbnz	r3, 80043da <USBD_SetAddress+0x42>
 80043a0:	88cb      	ldrh	r3, [r1, #6]
 80043a2:	b9d3      	cbnz	r3, 80043da <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80043a4:	788d      	ldrb	r5, [r1, #2]
 80043a6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043aa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d00c      	beq.n	80043cc <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 80043b2:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80043b6:	4629      	mov	r1, r5
 80043b8:	f000 fd80 	bl	8004ebc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 f9b5 	bl	800472c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80043c2:	b135      	cbz	r5, 80043d2 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80043c4:	2302      	movs	r3, #2
 80043c6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 80043cc:	f7ff ff41 	bl	8004252 <USBD_CtlError>
 80043d0:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80043d2:	2301      	movs	r3, #1
 80043d4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80043d8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                        
 80043da:	4620      	mov	r0, r4
 80043dc:	f7ff ff39 	bl	8004252 <USBD_CtlError>
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080043e4 <USBD_SetConfig>:
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 80043ea:	7889      	ldrb	r1, [r1, #2]
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <USBD_SetConfig+0xa0>)
 80043ee:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80043f0:	2901      	cmp	r1, #1
 80043f2:	d809      	bhi.n	8004408 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 80043f4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d009      	beq.n	8004410 <USBD_SetConfig+0x2c>
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d01c      	beq.n	800443a <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8004400:	4629      	mov	r1, r5
 8004402:	f7ff ff26 	bl	8004252 <USBD_CtlError>
 8004406:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);                              
 8004408:	4629      	mov	r1, r5
 800440a:	f7ff ff22 	bl	8004252 <USBD_CtlError>
 800440e:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8004410:	b181      	cbz	r1, 8004434 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8004412:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004414:	2303      	movs	r3, #3
 8004416:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800441a:	f7ff fdde 	bl	8003fda <USBD_SetClassConfig>
 800441e:	2802      	cmp	r0, #2
 8004420:	d003      	beq.n	800442a <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f982 	bl	800472c <USBD_CtlSendStatus>
 8004428:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 800442a:	4629      	mov	r1, r5
 800442c:	4620      	mov	r0, r4
 800442e:	f7ff ff10 	bl	8004252 <USBD_CtlError>
          return;
 8004432:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 8004434:	f000 f97a 	bl	800472c <USBD_CtlSendStatus>
 8004438:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0) 
 800443a:	b189      	cbz	r1, 8004460 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 800443c:	6843      	ldr	r3, [r0, #4]
 800443e:	4299      	cmp	r1, r3
 8004440:	d01d      	beq.n	800447e <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004442:	b2d9      	uxtb	r1, r3
 8004444:	f7ff fdd6 	bl	8003ff4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <USBD_SetConfig+0xa0>)
 800444a:	7819      	ldrb	r1, [r3, #0]
 800444c:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff fdc3 	bl	8003fda <USBD_SetClassConfig>
 8004454:	2802      	cmp	r0, #2
 8004456:	d00d      	beq.n	8004474 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f967 	bl	800472c <USBD_CtlSendStatus>
 800445e:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004460:	2302      	movs	r3, #2
 8004462:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004466:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004468:	f7ff fdc4 	bl	8003ff4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800446c:	4620      	mov	r0, r4
 800446e:	f000 f95d 	bl	800472c <USBD_CtlSendStatus>
 8004472:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev , req);  
 8004474:	4629      	mov	r1, r5
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff feeb 	bl	8004252 <USBD_CtlError>
          return;
 800447c:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 800447e:	f000 f955 	bl	800472c <USBD_CtlSendStatus>
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	20000120 	.word	0x20000120

08004488 <USBD_GetConfig>:
{
 8004488:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 800448a:	88cb      	ldrh	r3, [r1, #6]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d108      	bne.n	80044a2 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8004490:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004494:	2b02      	cmp	r3, #2
 8004496:	d007      	beq.n	80044a8 <USBD_GetConfig+0x20>
 8004498:	2b03      	cmp	r3, #3
 800449a:	d00d      	beq.n	80044b8 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 800449c:	f7ff fed9 	bl	8004252 <USBD_CtlError>
 80044a0:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 80044a2:	f7ff fed6 	bl	8004252 <USBD_CtlError>
 80044a6:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 80044a8:	4601      	mov	r1, r0
 80044aa:	2300      	movs	r3, #0
 80044ac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80044b0:	2201      	movs	r2, #1
 80044b2:	f000 f91e 	bl	80046f2 <USBD_CtlSendData>
      break;
 80044b6:	bd08      	pop	{r3, pc}
      USBD_CtlSendData (pdev, 
 80044b8:	2201      	movs	r2, #1
 80044ba:	1d01      	adds	r1, r0, #4
 80044bc:	f000 f919 	bl	80046f2 <USBD_CtlSendData>
      break;
 80044c0:	bd08      	pop	{r3, pc}

080044c2 <USBD_GetStatus>:
{
 80044c2:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 80044c4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80044c8:	3b02      	subs	r3, #2
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d80c      	bhi.n	80044e8 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80044ce:	2301      	movs	r3, #1
 80044d0:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80044d2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80044d6:	b10b      	cbz	r3, 80044dc <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80044d8:	2303      	movs	r3, #3
 80044da:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80044dc:	2202      	movs	r2, #2
 80044de:	f100 010c 	add.w	r1, r0, #12
 80044e2:	f000 f906 	bl	80046f2 <USBD_CtlSendData>
    break;
 80044e6:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 80044e8:	f7ff feb3 	bl	8004252 <USBD_CtlError>
 80044ec:	bd08      	pop	{r3, pc}

080044ee <USBD_ClrFeature>:
{
 80044ee:	b510      	push	{r4, lr}
 80044f0:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 80044f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80044f6:	3b02      	subs	r3, #2
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d80e      	bhi.n	800451a <USBD_ClrFeature+0x2c>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80044fc:	884b      	ldrh	r3, [r1, #2]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d000      	beq.n	8004504 <USBD_ClrFeature+0x16>
 8004502:	bd10      	pop	{r4, pc}
      pdev->dev_remote_wakeup = 0; 
 8004504:	2300      	movs	r3, #0
 8004506:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800450a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004512:	4620      	mov	r0, r4
 8004514:	f000 f90a 	bl	800472c <USBD_CtlSendStatus>
 8004518:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 800451a:	f7ff fe9a 	bl	8004252 <USBD_CtlError>
}
 800451e:	e7f0      	b.n	8004502 <USBD_ClrFeature+0x14>

08004520 <USBD_StdDevReq>:
{
 8004520:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8004522:	784b      	ldrb	r3, [r1, #1]
 8004524:	2b09      	cmp	r3, #9
 8004526:	d81c      	bhi.n	8004562 <USBD_StdDevReq+0x42>
 8004528:	e8df f003 	tbb	[pc, r3]
 800452c:	151b1812 	.word	0x151b1812
 8004530:	1b05091b 	.word	0x1b05091b
 8004534:	0c0f      	.short	0x0c0f
    USBD_GetDescriptor (pdev, req) ;
 8004536:	f7ff fe96 	bl	8004266 <USBD_GetDescriptor>
}
 800453a:	2000      	movs	r0, #0
 800453c:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 800453e:	f7ff ff2b 	bl	8004398 <USBD_SetAddress>
    break;
 8004542:	e7fa      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8004544:	f7ff ff4e 	bl	80043e4 <USBD_SetConfig>
    break;
 8004548:	e7f7      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 800454a:	f7ff ff9d 	bl	8004488 <USBD_GetConfig>
    break;
 800454e:	e7f4      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8004550:	f7ff ffb7 	bl	80044c2 <USBD_GetStatus>
    break;
 8004554:	e7f1      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8004556:	f7ff fe58 	bl	800420a <USBD_SetFeature>
    break;
 800455a:	e7ee      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 800455c:	f7ff ffc7 	bl	80044ee <USBD_ClrFeature>
    break;
 8004560:	e7eb      	b.n	800453a <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8004562:	f7ff fe76 	bl	8004252 <USBD_CtlError>
    break;
 8004566:	e7e8      	b.n	800453a <USBD_StdDevReq+0x1a>

08004568 <USBD_StdItfReq>:
{
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800456e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004572:	2b03      	cmp	r3, #3
 8004574:	d111      	bne.n	800459a <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004576:	790b      	ldrb	r3, [r1, #4]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d903      	bls.n	8004584 <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
 800457c:	f7ff fe69 	bl	8004252 <USBD_CtlError>
}
 8004580:	2000      	movs	r0, #0
 8004582:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 8004584:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800458c:	88eb      	ldrh	r3, [r5, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f6      	bne.n	8004580 <USBD_StdItfReq+0x18>
         USBD_CtlSendStatus(pdev);
 8004592:	4620      	mov	r0, r4
 8004594:	f000 f8ca 	bl	800472c <USBD_CtlSendStatus>
 8004598:	e7f2      	b.n	8004580 <USBD_StdItfReq+0x18>
     USBD_CtlError(pdev , req);
 800459a:	f7ff fe5a 	bl	8004252 <USBD_CtlError>
    break;
 800459e:	e7ef      	b.n	8004580 <USBD_StdItfReq+0x18>

080045a0 <USBD_StdEPReq>:
{
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4605      	mov	r5, r0
 80045a4:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80045a6:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80045a8:	780b      	ldrb	r3, [r1, #0]
 80045aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d011      	beq.n	80045d6 <USBD_StdEPReq+0x36>
 80045b2:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 80045b4:	7863      	ldrb	r3, [r4, #1]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d02b      	beq.n	8004612 <USBD_StdEPReq+0x72>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d04d      	beq.n	800465a <USBD_StdEPReq+0xba>
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d10d      	bne.n	80045de <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 80045c2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d00b      	beq.n	80045e2 <USBD_StdEPReq+0x42>
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d010      	beq.n	80045f0 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 80045ce:	4621      	mov	r1, r4
 80045d0:	f7ff fe3f 	bl	8004252 <USBD_CtlError>
      break;    
 80045d4:	e003      	b.n	80045de <USBD_StdEPReq+0x3e>
    pdev->pClass->Setup (pdev, req);
 80045d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4798      	blx	r3
}
 80045de:	2000      	movs	r0, #0
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d0fb      	beq.n	80045de <USBD_StdEPReq+0x3e>
 80045e6:	2980      	cmp	r1, #128	; 0x80
 80045e8:	d0f9      	beq.n	80045de <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 80045ea:	f000 fc38 	bl	8004e5e <USBD_LL_StallEP>
 80045ee:	e7f6      	b.n	80045de <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80045f0:	8863      	ldrh	r3, [r4, #2]
 80045f2:	b923      	cbnz	r3, 80045fe <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80045f4:	b119      	cbz	r1, 80045fe <USBD_StdEPReq+0x5e>
 80045f6:	2980      	cmp	r1, #128	; 0x80
 80045f8:	d001      	beq.n	80045fe <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 80045fa:	f000 fc30 	bl	8004e5e <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80045fe:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800460a:	4628      	mov	r0, r5
 800460c:	f000 f88e 	bl	800472c <USBD_CtlSendStatus>
      break;
 8004610:	e7e5      	b.n	80045de <USBD_StdEPReq+0x3e>
    switch (pdev->dev_state) 
 8004612:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004616:	2b02      	cmp	r3, #2
 8004618:	d005      	beq.n	8004626 <USBD_StdEPReq+0x86>
 800461a:	2b03      	cmp	r3, #3
 800461c:	d00a      	beq.n	8004634 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 800461e:	4621      	mov	r1, r4
 8004620:	f7ff fe17 	bl	8004252 <USBD_CtlError>
      break;    
 8004624:	e7db      	b.n	80045de <USBD_StdEPReq+0x3e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004626:	2900      	cmp	r1, #0
 8004628:	d0d9      	beq.n	80045de <USBD_StdEPReq+0x3e>
 800462a:	2980      	cmp	r1, #128	; 0x80
 800462c:	d0d7      	beq.n	80045de <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 800462e:	f000 fc16 	bl	8004e5e <USBD_LL_StallEP>
 8004632:	e7d4      	b.n	80045de <USBD_StdEPReq+0x3e>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004634:	8863      	ldrh	r3, [r4, #2]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d1      	bne.n	80045de <USBD_StdEPReq+0x3e>
        if ((ep_addr & 0x7F) != 0x00) 
 800463a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800463e:	d103      	bne.n	8004648 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f873 	bl	800472c <USBD_CtlSendStatus>
 8004646:	e7ca      	b.n	80045de <USBD_StdEPReq+0x3e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004648:	f000 fc17 	bl	8004e7a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800464c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	4798      	blx	r3
 8004658:	e7f2      	b.n	8004640 <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 800465a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800465e:	2b02      	cmp	r3, #2
 8004660:	d005      	beq.n	800466e <USBD_StdEPReq+0xce>
 8004662:	2b03      	cmp	r3, #3
 8004664:	d009      	beq.n	800467a <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8004666:	4621      	mov	r1, r4
 8004668:	f7ff fdf3 	bl	8004252 <USBD_CtlError>
      break;
 800466c:	e7b7      	b.n	80045de <USBD_StdEPReq+0x3e>
      if ((ep_addr & 0x7F) != 0x00) 
 800466e:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004672:	d0b4      	beq.n	80045de <USBD_StdEPReq+0x3e>
        USBD_LL_StallEP(pdev , ep_addr);
 8004674:	f000 fbf3 	bl	8004e5e <USBD_LL_StallEP>
 8004678:	e7b1      	b.n	80045de <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800467a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800467e:	d111      	bne.n	80046a4 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004680:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004684:	3410      	adds	r4, #16
 8004686:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800468a:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fc02 	bl	8004e96 <USBD_LL_IsStallEP>
 8004692:	b170      	cbz	r0, 80046b2 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8004694:	2301      	movs	r3, #1
 8004696:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8004698:	2202      	movs	r2, #2
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f828 	bl	80046f2 <USBD_CtlSendData>
      break;
 80046a2:	e79c      	b.n	80045de <USBD_StdEPReq+0x3e>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80046a4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80046a8:	3401      	adds	r4, #1
 80046aa:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80046ae:	3404      	adds	r4, #4
 80046b0:	e7ec      	b.n	800468c <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 80046b2:	2300      	movs	r3, #0
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	e7ef      	b.n	8004698 <USBD_StdEPReq+0xf8>

080046b8 <USBD_GetString>:
  if (desc != NULL) 
 80046b8:	b1d0      	cbz	r0, 80046f0 <USBD_GetString+0x38>
{
 80046ba:	b570      	push	{r4, r5, r6, lr}
 80046bc:	460d      	mov	r5, r1
 80046be:	4616      	mov	r6, r2
 80046c0:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80046c2:	f7ff fd98 	bl	80041f6 <USBD_GetLen>
 80046c6:	3001      	adds	r0, #1
 80046c8:	0040      	lsls	r0, r0, #1
 80046ca:	b280      	uxth	r0, r0
 80046cc:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 80046ce:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80046d0:	2303      	movs	r3, #3
 80046d2:	706b      	strb	r3, [r5, #1]
 80046d4:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80046d6:	e007      	b.n	80046e8 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	3401      	adds	r4, #1
 80046de:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 80046e0:	3302      	adds	r3, #2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2100      	movs	r1, #0
 80046e6:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 80046e8:	7821      	ldrb	r1, [r4, #0]
 80046ea:	2900      	cmp	r1, #0
 80046ec:	d1f4      	bne.n	80046d8 <USBD_GetString+0x20>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	4770      	bx	lr

080046f2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80046f2:	b510      	push	{r4, lr}
 80046f4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80046f6:	2202      	movs	r2, #2
 80046f8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80046fc:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80046fe:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004700:	460a      	mov	r2, r1
 8004702:	2100      	movs	r1, #0
 8004704:	f000 fbe8 	bl	8004ed8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004708:	2000      	movs	r0, #0
 800470a:	bd10      	pop	{r4, pc}

0800470c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800470c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800470e:	4613      	mov	r3, r2
 8004710:	460a      	mov	r2, r1
 8004712:	2100      	movs	r1, #0
 8004714:	f000 fbe0 	bl	8004ed8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004718:	2000      	movs	r0, #0
 800471a:	bd08      	pop	{r3, pc}

0800471c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800471c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800471e:	4613      	mov	r3, r2
 8004720:	460a      	mov	r2, r1
 8004722:	2100      	movs	r1, #0
 8004724:	f000 fbe6 	bl	8004ef4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004728:	2000      	movs	r0, #0
 800472a:	bd08      	pop	{r3, pc}

0800472c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800472c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800472e:	2304      	movs	r3, #4
 8004730:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004734:	2300      	movs	r3, #0
 8004736:	461a      	mov	r2, r3
 8004738:	4619      	mov	r1, r3
 800473a:	f000 fbcd 	bl	8004ed8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800473e:	2000      	movs	r0, #0
 8004740:	bd08      	pop	{r3, pc}

08004742 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004742:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004744:	2305      	movs	r3, #5
 8004746:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800474a:	2300      	movs	r3, #0
 800474c:	461a      	mov	r2, r3
 800474e:	4619      	mov	r1, r3
 8004750:	f000 fbd0 	bl	8004ef4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004754:	2000      	movs	r0, #0
 8004756:	bd08      	pop	{r3, pc}

08004758 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004758:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800475a:	2201      	movs	r2, #1
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <SD_initialize+0x20>)
 800475e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8004760:	f000 f8d6 	bl	8004910 <BSP_SD_Init>
 8004764:	b920      	cbnz	r0, 8004770 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8004766:	4a04      	ldr	r2, [pc, #16]	; (8004778 <SD_initialize+0x20>)
 8004768:	7813      	ldrb	r3, [r2, #0]
 800476a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800476e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <SD_initialize+0x20>)
 8004772:	7818      	ldrb	r0, [r3, #0]
}
 8004774:	bd08      	pop	{r3, pc}
 8004776:	bf00      	nop
 8004778:	200000a4 	.word	0x200000a4

0800477c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800477c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800477e:	2201      	movs	r2, #1
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <SD_status+0x20>)
 8004782:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8004784:	f000 f8ac 	bl	80048e0 <BSP_SD_GetStatus>
 8004788:	b920      	cbnz	r0, 8004794 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 800478a:	4a04      	ldr	r2, [pc, #16]	; (800479c <SD_status+0x20>)
 800478c:	7813      	ldrb	r3, [r2, #0]
 800478e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004792:	7013      	strb	r3, [r2, #0]
  }
  
  return Stat;
 8004794:	4b01      	ldr	r3, [pc, #4]	; (800479c <SD_status+0x20>)
 8004796:	7818      	ldrb	r0, [r3, #0]
}
 8004798:	bd08      	pop	{r3, pc}
 800479a:	bf00      	nop
 800479c:	200000a4 	.word	0x200000a4

080047a0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80047a0:	b500      	push	{lr}
 80047a2:	b083      	sub	sp, #12
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	0252      	lsls	r2, r2, #9
 80047ae:	2300      	movs	r3, #0
 80047b0:	4608      	mov	r0, r1
 80047b2:	f000 f86d 	bl	8004890 <BSP_SD_ReadBlocks>
 80047b6:	b100      	cbz	r0, 80047ba <SD_read+0x1a>
                       (uint64_t) (sector * BLOCK_SIZE), 
                       BLOCK_SIZE, 
                       count) != MSD_OK)
  {
    res = RES_ERROR;
 80047b8:	2001      	movs	r0, #1
  }
  
  return res;
}
 80047ba:	b003      	add	sp, #12
 80047bc:	f85d fb04 	ldr.w	pc, [sp], #4

080047c0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80047c0:	b500      	push	{lr}
 80047c2:	b083      	sub	sp, #12
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	0252      	lsls	r2, r2, #9
 80047ce:	2300      	movs	r3, #0
 80047d0:	4608      	mov	r0, r1
 80047d2:	f000 f871 	bl	80048b8 <BSP_SD_WriteBlocks>
 80047d6:	b100      	cbz	r0, 80047da <SD_write+0x1a>
                        (uint64_t)(sector * BLOCK_SIZE), 
                        BLOCK_SIZE, count) != MSD_OK)
  {
    res = RES_ERROR;
 80047d8:	2001      	movs	r0, #1
  }
  
  return res;
}
 80047da:	b003      	add	sp, #12
 80047dc:	f85d fb04 	ldr.w	pc, [sp], #4

080047e0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <SD_ioctl+0x54>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f013 0f01 	tst.w	r3, #1
 80047e8:	d001      	beq.n	80047ee <SD_ioctl+0xe>
 80047ea:	2003      	movs	r0, #3
 80047ec:	4770      	bx	lr
  
  switch (cmd)
 80047ee:	2903      	cmp	r1, #3
 80047f0:	d81e      	bhi.n	8004830 <SD_ioctl+0x50>
 80047f2:	e8df f001 	tbb	[pc, r1]
 80047f6:	0402      	.short	0x0402
 80047f8:	1813      	.short	0x1813
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80047fa:	2000      	movs	r0, #0
 80047fc:	4770      	bx	lr
{
 80047fe:	b510      	push	{r4, lr}
 8004800:	b096      	sub	sp, #88	; 0x58
 8004802:	4614      	mov	r4, r2
    break;
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004804:	4668      	mov	r0, sp
 8004806:	f000 f873 	bl	80048f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 800480a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004810:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004814:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8004816:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 8004818:	b016      	add	sp, #88	; 0x58
 800481a:	bd10      	pop	{r4, pc}
    *(WORD*)buff = BLOCK_SIZE;
 800481c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004820:	8013      	strh	r3, [r2, #0]
    res = RES_OK;
 8004822:	2000      	movs	r0, #0
    break;
 8004824:	4770      	bx	lr
    *(DWORD*)buff = BLOCK_SIZE;
 8004826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800482a:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 800482c:	2001      	movs	r0, #1
    break;
 800482e:	4770      	bx	lr
    res = RES_PARERR;
 8004830:	2004      	movs	r0, #4
 8004832:	4770      	bx	lr
 8004834:	200000a4 	.word	0x200000a4

08004838 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <FATFS_LinkDriverEx+0x48>)
 800483a:	7a5b      	ldrb	r3, [r3, #9]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d901      	bls.n	8004846 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 8004842:	2001      	movs	r0, #1
 8004844:	4770      	bx	lr
{
 8004846:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8004848:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <FATFS_LinkDriverEx+0x48>)
 800484a:	7a65      	ldrb	r5, [r4, #9]
 800484c:	b2ed      	uxtb	r5, r5
 800484e:	2300      	movs	r3, #0
 8004850:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 8004852:	7a65      	ldrb	r5, [r4, #9]
 8004854:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004858:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800485a:	7a60      	ldrb	r0, [r4, #9]
 800485c:	4420      	add	r0, r4
 800485e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004860:	7a62      	ldrb	r2, [r4, #9]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	1c50      	adds	r0, r2, #1
 8004866:	b2c0      	uxtb	r0, r0
 8004868:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 800486a:	3230      	adds	r2, #48	; 0x30
 800486c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800486e:	223a      	movs	r2, #58	; 0x3a
 8004870:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 8004872:	222f      	movs	r2, #47	; 0x2f
 8004874:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 8004876:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 8004878:	4618      	mov	r0, r3
  }
  
  return ret;
}
 800487a:	bc30      	pop	{r4, r5}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000124 	.word	0x20000124

08004884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004884:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	f7ff ffd6 	bl	8004838 <FATFS_LinkDriverEx>
}
 800488c:	bd08      	pop	{r3, pc}
	...

08004890 <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8004890:	b500      	push	{lr}
 8004892:	b083      	sub	sp, #12
  uint8_t sd_state;
  if(HAL_SD_ReadBlocks(&hsd, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8004894:	9905      	ldr	r1, [sp, #20]
 8004896:	9101      	str	r1, [sp, #4]
 8004898:	9904      	ldr	r1, [sp, #16]
 800489a:	9100      	str	r1, [sp, #0]
 800489c:	4601      	mov	r1, r0
 800489e:	4805      	ldr	r0, [pc, #20]	; (80048b4 <BSP_SD_ReadBlocks+0x24>)
 80048a0:	f7fd feef 	bl	8002682 <HAL_SD_ReadBlocks>
 80048a4:	b918      	cbnz	r0, 80048ae <BSP_SD_ReadBlocks+0x1e>
  {
    sd_state = MSD_ERROR;
  }
  else
  {
    sd_state = MSD_OK;
 80048a6:	2000      	movs	r0, #0
  }
  return sd_state;  
}
 80048a8:	b003      	add	sp, #12
 80048aa:	f85d fb04 	ldr.w	pc, [sp], #4
    sd_state = MSD_ERROR;
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7fa      	b.n	80048a8 <BSP_SD_ReadBlocks+0x18>
 80048b2:	bf00      	nop
 80048b4:	20000400 	.word	0x20000400

080048b8 <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 80048b8:	b500      	push	{lr}
 80048ba:	b083      	sub	sp, #12
  uint8_t sd_state;
  if(HAL_SD_WriteBlocks(&hsd, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)  
 80048bc:	9905      	ldr	r1, [sp, #20]
 80048be:	9101      	str	r1, [sp, #4]
 80048c0:	9904      	ldr	r1, [sp, #16]
 80048c2:	9100      	str	r1, [sp, #0]
 80048c4:	4601      	mov	r1, r0
 80048c6:	4805      	ldr	r0, [pc, #20]	; (80048dc <BSP_SD_WriteBlocks+0x24>)
 80048c8:	f7fd ffb5 	bl	8002836 <HAL_SD_WriteBlocks>
 80048cc:	b918      	cbnz	r0, 80048d6 <BSP_SD_WriteBlocks+0x1e>
  {
    sd_state = MSD_ERROR;
  }
  else
  {
    sd_state = MSD_OK;
 80048ce:	2000      	movs	r0, #0
  }
  return sd_state;  
}
 80048d0:	b003      	add	sp, #12
 80048d2:	f85d fb04 	ldr.w	pc, [sp], #4
    sd_state = MSD_ERROR;
 80048d6:	2001      	movs	r0, #1
 80048d8:	e7fa      	b.n	80048d0 <BSP_SD_WriteBlocks+0x18>
 80048da:	bf00      	nop
 80048dc:	20000400 	.word	0x20000400

080048e0 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
 80048e0:	b508      	push	{r3, lr}
  return(HAL_SD_GetStatus(&hsd));
 80048e2:	4802      	ldr	r0, [pc, #8]	; (80048ec <BSP_SD_GetStatus+0xc>)
 80048e4:	f7fe f8ca 	bl	8002a7c <HAL_SD_GetStatus>
}
 80048e8:	bd08      	pop	{r3, pc}
 80048ea:	bf00      	nop
 80048ec:	20000400 	.word	0x20000400

080048f0 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef* CardInfo)
{
 80048f0:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&hsd, CardInfo);
 80048f2:	4601      	mov	r1, r0
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <BSP_SD_GetCardInfo+0xc>)
 80048f6:	f7fd fcca 	bl	800228e <HAL_SD_Get_CardInfo>
 80048fa:	bd08      	pop	{r3, pc}
 80048fc:	20000400 	.word	0x20000400

08004900 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8004900:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8004902:	2301      	movs	r3, #1
 8004904:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8004908:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800490c:	b002      	add	sp, #8
 800490e:	4770      	bx	lr

08004910 <BSP_SD_Init>:
{
 8004910:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004912:	f7ff fff5 	bl	8004900 <BSP_SD_IsDetected>
 8004916:	2801      	cmp	r0, #1
 8004918:	d002      	beq.n	8004920 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800491a:	2301      	movs	r3, #1
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd, &SDCardInfo);
 8004920:	4908      	ldr	r1, [pc, #32]	; (8004944 <BSP_SD_Init+0x34>)
 8004922:	4809      	ldr	r0, [pc, #36]	; (8004948 <BSP_SD_Init+0x38>)
 8004924:	f7fd fe06 	bl	8002534 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8004928:	4603      	mov	r3, r0
 800492a:	2800      	cmp	r0, #0
 800492c:	d1f6      	bne.n	800491c <BSP_SD_Init+0xc>
    if (HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B) != SD_OK)
 800492e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004932:	4805      	ldr	r0, [pc, #20]	; (8004948 <BSP_SD_Init+0x38>)
 8004934:	f7fd fe55 	bl	80025e2 <HAL_SD_WideBusOperation_Config>
 8004938:	b908      	cbnz	r0, 800493e <BSP_SD_Init+0x2e>
      sd_state = MSD_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e7ee      	b.n	800491c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e7ec      	b.n	800491c <BSP_SD_Init+0xc>
 8004942:	bf00      	nop
 8004944:	200003a8 	.word	0x200003a8
 8004948:	20000400 	.word	0x20000400

0800494c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800494c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SD_Path);
 800494e:	4903      	ldr	r1, [pc, #12]	; (800495c <MX_FATFS_Init+0x10>)
 8004950:	4803      	ldr	r0, [pc, #12]	; (8004960 <MX_FATFS_Init+0x14>)
 8004952:	f7ff ff97 	bl	8004884 <FATFS_LinkDriver>
 8004956:	4b03      	ldr	r3, [pc, #12]	; (8004964 <MX_FATFS_Init+0x18>)
 8004958:	7018      	strb	r0, [r3, #0]
 800495a:	bd08      	pop	{r3, pc}
 800495c:	200003a4 	.word	0x200003a4
 8004960:	0800514c 	.word	0x0800514c
 8004964:	200003a0 	.word	0x200003a0

08004968 <MX_SDIO_SD_Init>:

/* SDIO init function */
static void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <MX_SDIO_SD_Init+0x18>)
 800496a:	4a06      	ldr	r2, [pc, #24]	; (8004984 <MX_SDIO_SD_Init+0x1c>)
 800496c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800496e:	2200      	movs	r2, #0
 8004970:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004972:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004974:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004976:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004978:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 800497a:	2224      	movs	r2, #36	; 0x24
 800497c:	619a      	str	r2, [r3, #24]
 800497e:	4770      	bx	lr
 8004980:	20000400 	.word	0x20000400
 8004984:	40018000 	.word	0x40018000

08004988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004988:	b510      	push	{r4, lr}
 800498a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <MX_GPIO_Init+0x64>)
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	f042 0220 	orr.w	r2, r2, #32
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	f002 0220 	and.w	r2, r2, #32
 800499c:	9201      	str	r2, [sp, #4]
 800499e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	f042 0210 	orr.w	r2, r2, #16
 80049a6:	619a      	str	r2, [r3, #24]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	f002 0210 	and.w	r2, r2, #16
 80049ae:	9202      	str	r2, [sp, #8]
 80049b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	f042 0204 	orr.w	r2, r2, #4
 80049b8:	619a      	str	r2, [r3, #24]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_RESET);
 80049c4:	4c0a      	ldr	r4, [pc, #40]	; (80049f0 <MX_GPIO_Init+0x68>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fb fde5 	bl	800059c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_Enable_Pin */
  GPIO_InitStruct.Pin = USB_Enable_Pin;
 80049d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d8:	2301      	movs	r3, #1
 80049da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049dc:	2303      	movs	r3, #3
 80049de:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(USB_Enable_GPIO_Port, &GPIO_InitStruct);
 80049e0:	a904      	add	r1, sp, #16
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fb fcdc 	bl	80003a0 <HAL_GPIO_Init>

}
 80049e8:	b008      	add	sp, #32
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40010800 	.word	0x40010800

080049f4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80049f4:	e7fe      	b.n	80049f4 <_Error_Handler>
	...

080049f8 <SystemClock_Config>:
{
 80049f8:	b500      	push	{lr}
 80049fa:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049fc:	2201      	movs	r2, #1
 80049fe:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a04:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004a06:	2100      	movs	r1, #0
 8004a08:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a0a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a10:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004a12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004a16:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a18:	a80c      	add	r0, sp, #48	; 0x30
 8004a1a:	f7fc fa75 	bl	8000f08 <HAL_RCC_OscConfig>
 8004a1e:	bb48      	cbnz	r0, 8004a74 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a20:	230f      	movs	r3, #15
 8004a22:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a24:	2102      	movs	r1, #2
 8004a26:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a30:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a32:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a34:	a807      	add	r0, sp, #28
 8004a36:	f7fc fd9b 	bl	8001570 <HAL_RCC_ClockConfig>
 8004a3a:	b9f8      	cbnz	r0, 8004a7c <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8004a40:	2300      	movs	r3, #0
 8004a42:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a44:	a801      	add	r0, sp, #4
 8004a46:	f7fc fe83 	bl	8001750 <HAL_RCCEx_PeriphCLKConfig>
 8004a4a:	b9d8      	cbnz	r0, 8004a84 <SystemClock_Config+0x8c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004a4c:	f7fc fe7a 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <SystemClock_Config+0x94>)
 8004a52:	fba3 3000 	umull	r3, r0, r3, r0
 8004a56:	0980      	lsrs	r0, r0, #6
 8004a58:	f7fb fc76 	bl	8000348 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004a5c:	2004      	movs	r0, #4
 8004a5e:	f7fb fc89 	bl	8000374 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004a62:	2200      	movs	r2, #0
 8004a64:	4611      	mov	r1, r2
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6a:	f7fb fc2f 	bl	80002cc <HAL_NVIC_SetPriority>
}
 8004a6e:	b017      	add	sp, #92	; 0x5c
 8004a70:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004a74:	2197      	movs	r1, #151	; 0x97
 8004a76:	4806      	ldr	r0, [pc, #24]	; (8004a90 <SystemClock_Config+0x98>)
 8004a78:	f7ff ffbc 	bl	80049f4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a7c:	21a5      	movs	r1, #165	; 0xa5
 8004a7e:	4804      	ldr	r0, [pc, #16]	; (8004a90 <SystemClock_Config+0x98>)
 8004a80:	f7ff ffb8 	bl	80049f4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004a84:	21ac      	movs	r1, #172	; 0xac
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <SystemClock_Config+0x98>)
 8004a88:	f7ff ffb4 	bl	80049f4 <_Error_Handler>
 8004a8c:	10624dd3 	.word	0x10624dd3
 8004a90:	08005160 	.word	0x08005160

08004a94 <main>:
{
 8004a94:	b508      	push	{r3, lr}
  HAL_Init();
 8004a96:	f7fb fbd9 	bl	800024c <HAL_Init>
  SystemClock_Config();
 8004a9a:	f7ff ffad 	bl	80049f8 <SystemClock_Config>
  MX_GPIO_Init();
 8004a9e:	f7ff ff73 	bl	8004988 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8004aa2:	f7ff ff61 	bl	8004968 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8004aa6:	f7ff ff51 	bl	800494c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8004aaa:	f000 f8dd 	bl	8004c68 <MX_USB_DEVICE_Init>
  HAL_SD_Init(&hsd, &SDCardInfo);
 8004aae:	4c0a      	ldr	r4, [pc, #40]	; (8004ad8 <main+0x44>)
 8004ab0:	490a      	ldr	r1, [pc, #40]	; (8004adc <main+0x48>)
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7fd fd3e 	bl	8002534 <HAL_SD_Init>
  HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B);
 8004ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7fd fd90 	bl	80025e2 <HAL_SD_WideBusOperation_Config>
  HAL_Delay(500);
 8004ac2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ac6:	f7fb fbe1 	bl	800028c <HAL_Delay>
  HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, SET);
 8004aca:	2201      	movs	r2, #1
 8004acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ad0:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <main+0x4c>)
 8004ad2:	f7fb fd63 	bl	800059c <HAL_GPIO_WritePin>
 8004ad6:	e7fe      	b.n	8004ad6 <main+0x42>
 8004ad8:	20000400 	.word	0x20000400
 8004adc:	200003a8 	.word	0x200003a8
 8004ae0:	40010800 	.word	0x40010800

08004ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae4:	b500      	push	{lr}
 8004ae6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_MspInit+0x88>)
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	619a      	str	r2, [r3, #24]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004afc:	2003      	movs	r0, #3
 8004afe:	f7fb fbd3 	bl	80002a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	4611      	mov	r1, r2
 8004b06:	f06f 000b 	mvn.w	r0, #11
 8004b0a:	f7fb fbdf 	bl	80002cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4611      	mov	r1, r2
 8004b12:	f06f 000a 	mvn.w	r0, #10
 8004b16:	f7fb fbd9 	bl	80002cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	f06f 0009 	mvn.w	r0, #9
 8004b22:	f7fb fbd3 	bl	80002cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	4611      	mov	r1, r2
 8004b2a:	f06f 0004 	mvn.w	r0, #4
 8004b2e:	f7fb fbcd 	bl	80002cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	4611      	mov	r1, r2
 8004b36:	f06f 0003 	mvn.w	r0, #3
 8004b3a:	f7fb fbc7 	bl	80002cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4611      	mov	r1, r2
 8004b42:	f06f 0001 	mvn.w	r0, #1
 8004b46:	f7fb fbc1 	bl	80002cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b52:	f7fb fbbb 	bl	80002cc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004b56:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <HAL_MspInit+0x8c>)
 8004b58:	6853      	ldr	r3, [r2, #4]
 8004b5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b62:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b64:	b003      	add	sp, #12
 8004b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40010000 	.word	0x40010000

08004b74 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8004b74:	6802      	ldr	r2, [r0, #0]
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <HAL_SD_MspInit+0x60>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d000      	beq.n	8004b7e <HAL_SD_MspInit+0xa>
 8004b7c:	4770      	bx	lr
{
 8004b7e:	b530      	push	{r4, r5, lr}
 8004b80:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b82:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b8c:	615a      	str	r2, [r3, #20]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	9b01      	ldr	r3, [sp, #4]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004b98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004b9c:	9302      	str	r3, [sp, #8]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9e:	2502      	movs	r5, #2
 8004ba0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba2:	2403      	movs	r4, #3
 8004ba4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ba6:	a902      	add	r1, sp, #8
 8004ba8:	480b      	ldr	r0, [pc, #44]	; (8004bd8 <HAL_SD_MspInit+0x64>)
 8004baa:	f7fb fbf9 	bl	80003a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bb4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb6:	a902      	add	r1, sp, #8
 8004bb8:	4808      	ldr	r0, [pc, #32]	; (8004bdc <HAL_SD_MspInit+0x68>)
 8004bba:	f7fb fbf1 	bl	80003a0 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	2031      	movs	r0, #49	; 0x31
 8004bc4:	f7fb fb82 	bl	80002cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004bc8:	2031      	movs	r0, #49	; 0x31
 8004bca:	f7fb fbb1 	bl	8000330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004bce:	b007      	add	sp, #28
 8004bd0:	bd30      	pop	{r4, r5, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40018000 	.word	0x40018000
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400

08004be0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004be0:	4770      	bx	lr

08004be2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004be2:	e7fe      	b.n	8004be2 <HardFault_Handler>

08004be4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004be4:	e7fe      	b.n	8004be4 <MemManage_Handler>

08004be6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004be6:	e7fe      	b.n	8004be6 <BusFault_Handler>

08004be8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004be8:	e7fe      	b.n	8004be8 <UsageFault_Handler>

08004bea <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004bea:	4770      	bx	lr

08004bec <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004bec:	4770      	bx	lr

08004bee <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004bee:	4770      	bx	lr

08004bf0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bf2:	f7fb fb3d 	bl	8000270 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004bf6:	f7fb fbce 	bl	8000396 <HAL_SYSTICK_IRQHandler>
 8004bfa:	bd08      	pop	{r3, pc}

08004bfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004bfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004bfe:	4802      	ldr	r0, [pc, #8]	; (8004c08 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8004c00:	f7fc f84b 	bl	8000c9a <HAL_PCD_IRQHandler>
 8004c04:	bd08      	pop	{r3, pc}
 8004c06:	bf00      	nop
 8004c08:	20000684 	.word	0x20000684

08004c0c <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 8004c0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004c0e:	4802      	ldr	r0, [pc, #8]	; (8004c18 <SDIO_IRQHandler+0xc>)
 8004c10:	f7fd faee 	bl	80021f0 <HAL_SD_IRQHandler>
 8004c14:	bd08      	pop	{r3, pc}
 8004c16:	bf00      	nop
 8004c18:	20000400 	.word	0x20000400

08004c1c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <SystemInit+0x40>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <SystemInit+0x44>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004c34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c38:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c40:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004c48:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004c4a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004c4e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <SystemInit+0x48>)
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	f8ff0000 	.word	0xf8ff0000
 8004c64:	e000ed00 	.word	0xe000ed00

08004c68 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8004c68:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004c6a:	4c09      	ldr	r4, [pc, #36]	; (8004c90 <MX_USB_DEVICE_Init+0x28>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <MX_USB_DEVICE_Init+0x2c>)
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff f98f 	bl	8003f94 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8004c76:	4908      	ldr	r1, [pc, #32]	; (8004c98 <MX_USB_DEVICE_Init+0x30>)
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff f9a2 	bl	8003fc2 <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8004c7e:	4907      	ldr	r1, [pc, #28]	; (8004c9c <MX_USB_DEVICE_Init+0x34>)
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7fe fd1c 	bl	80036be <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff f9a2 	bl	8003fd0 <USBD_Start>
 8004c8c:	bd10      	pop	{r4, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000460 	.word	0x20000460
 8004c94:	200000ac 	.word	0x200000ac
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	200000e0 	.word	0x200000e0

08004ca0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8004ca0:	6802      	ldr	r2, [r0, #0]
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <HAL_PCD_MspInit+0x3c>)
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d000      	beq.n	8004caa <HAL_PCD_MspInit+0xa>
 8004ca8:	4770      	bx	lr
{
 8004caa:	b500      	push	{lr}
 8004cac:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004cae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004cb8:	61da      	str	r2, [r3, #28]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	2014      	movs	r0, #20
 8004cca:	f7fb faff 	bl	80002cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004cce:	2014      	movs	r0, #20
 8004cd0:	f7fb fb2e 	bl	8000330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004cd4:	b003      	add	sp, #12
 8004cd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cda:	bf00      	nop
 8004cdc:	40005c00 	.word	0x40005c00

08004ce0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004ce0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004ce2:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8004ce6:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004cea:	f7ff f98a 	bl	8004002 <USBD_LL_SetupStage>
 8004cee:	bd08      	pop	{r3, pc}

08004cf0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004cf0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004cf2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004cf6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cfa:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004cfe:	f7ff f9ad 	bl	800405c <USBD_LL_DataOutStage>
 8004d02:	bd08      	pop	{r3, pc}

08004d04 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004d04:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004d06:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004d10:	f7ff f9d9 	bl	80040c6 <USBD_LL_DataInStage>
 8004d14:	bd08      	pop	{r3, pc}

08004d16 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004d16:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004d18:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004d1c:	f7ff fa5d 	bl	80041da <USBD_LL_SOF>
 8004d20:	bd08      	pop	{r3, pc}

08004d22 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004d22:	b510      	push	{r4, lr}
 8004d24:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8004d26:	2101      	movs	r1, #1
 8004d28:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004d2c:	f7ff fa43 	bl	80041b6 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d30:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8004d34:	f7ff fa20 	bl	8004178 <USBD_LL_Reset>
 8004d38:	bd10      	pop	{r4, pc}
	...

08004d3c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004d40:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004d44:	f7ff fa3a 	bl	80041bc <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8004d48:	69a3      	ldr	r3, [r4, #24]
 8004d4a:	b123      	cbz	r3, 8004d56 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d4c:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <HAL_PCD_SuspendCallback+0x1c>)
 8004d4e:	6913      	ldr	r3, [r2, #16]
 8004d50:	f043 0306 	orr.w	r3, r3, #6
 8004d54:	6113      	str	r3, [r2, #16]
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004d5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004d5e:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8004d62:	f7ff fa34 	bl	80041ce <USBD_LL_Resume>
 8004d66:	bd08      	pop	{r3, pc}

08004d68 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4604      	mov	r4, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8004d6c:	481b      	ldr	r0, [pc, #108]	; (8004ddc <USBD_LL_Init+0x74>)
 8004d6e:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;
 8004d72:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8004d76:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <USBD_LL_Init+0x78>)
 8004d78:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004d82:	2303      	movs	r3, #3
 8004d84:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004d8a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004d8c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004d8e:	f7fb fc0b 	bl	80005a8 <HAL_PCD_Init>
 8004d92:	b9e8      	cbnz	r0, 8004dd0 <USBD_LL_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004d94:	2318      	movs	r3, #24
 8004d96:	2200      	movs	r2, #0
 8004d98:	4611      	mov	r1, r2
 8004d9a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004d9e:	f7fc f89a 	bl	8000ed6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004da2:	2358      	movs	r3, #88	; 0x58
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004dac:	f7fc f893 	bl	8000ed6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);  
 8004db0:	2398      	movs	r3, #152	; 0x98
 8004db2:	2200      	movs	r2, #0
 8004db4:	2181      	movs	r1, #129	; 0x81
 8004db6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004dba:	f7fc f88c 	bl	8000ed6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);  
 8004dbe:	23d8      	movs	r3, #216	; 0xd8
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004dc8:	f7fc f885 	bl	8000ed6 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004dd0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8004dd4:	4803      	ldr	r0, [pc, #12]	; (8004de4 <USBD_LL_Init+0x7c>)
 8004dd6:	f7ff fe0d 	bl	80049f4 <_Error_Handler>
 8004dda:	e7db      	b.n	8004d94 <USBD_LL_Init+0x2c>
 8004ddc:	20000684 	.word	0x20000684
 8004de0:	40005c00 	.word	0x40005c00
 8004de4:	08005180 	.word	0x08005180

08004de8 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004de8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004dea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004dee:	f7fb fc46 	bl	800067e <HAL_PCD_Start>
     
  switch (hal_status) {
 8004df2:	b118      	cbz	r0, 8004dfc <USBD_LL_Start+0x14>
 8004df4:	2802      	cmp	r0, #2
 8004df6:	d003      	beq.n	8004e00 <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004df8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004dfa:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004e00:	2001      	movs	r0, #1
    break;
 8004e02:	bd08      	pop	{r3, pc}

08004e04 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8004e04:	b510      	push	{r4, lr}
 8004e06:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8004e08:	4613      	mov	r3, r2
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e10:	f7fb fc60 	bl	80006d4 <HAL_PCD_EP_Open>
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8004e14:	b118      	cbz	r0, 8004e1e <USBD_LL_OpenEP+0x1a>
 8004e16:	2802      	cmp	r0, #2
 8004e18:	d003      	beq.n	8004e22 <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e1a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004e1c:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8004e1e:	2000      	movs	r0, #0
 8004e20:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8004e22:	2001      	movs	r0, #1
    break;
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004e26:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004e28:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e2c:	f7fb fc7b 	bl	8000726 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8004e30:	b118      	cbz	r0, 8004e3a <USBD_LL_CloseEP+0x14>
 8004e32:	2802      	cmp	r0, #2
 8004e34:	d003      	beq.n	8004e3e <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e36:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004e38:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004e3e:	2001      	movs	r0, #1
    break;
 8004e40:	bd08      	pop	{r3, pc}

08004e42 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004e42:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8004e44:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e48:	f7fc f82a 	bl	8000ea0 <HAL_PCD_EP_Flush>
      
  switch (hal_status) {
 8004e4c:	b118      	cbz	r0, 8004e56 <USBD_LL_FlushEP+0x14>
 8004e4e:	2802      	cmp	r0, #2
 8004e50:	d003      	beq.n	8004e5a <USBD_LL_FlushEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e52:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004e54:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004e56:	2000      	movs	r0, #0
 8004e58:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004e5a:	2001      	movs	r0, #1
    break;
 8004e5c:	bd08      	pop	{r3, pc}

08004e5e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004e5e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e60:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e64:	f7fb ffc7 	bl	8000df6 <HAL_PCD_EP_SetStall>
      
  switch (hal_status) {
 8004e68:	b118      	cbz	r0, 8004e72 <USBD_LL_StallEP+0x14>
 8004e6a:	2802      	cmp	r0, #2
 8004e6c:	d003      	beq.n	8004e76 <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e6e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004e70:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004e72:	2000      	movs	r0, #0
 8004e74:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004e76:	2001      	movs	r0, #1
    break;
 8004e78:	bd08      	pop	{r3, pc}

08004e7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8004e7a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004e7c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e80:	f7fb ffe7 	bl	8000e52 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8004e84:	b118      	cbz	r0, 8004e8e <USBD_LL_ClearStallEP+0x14>
 8004e86:	2802      	cmp	r0, #2
 8004e88:	d003      	beq.n	8004e92 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e8a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004e8c:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004e8e:	2000      	movs	r0, #0
 8004e90:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004e92:	2001      	movs	r0, #1
    break;
 8004e94:	bd08      	pop	{r3, pc}

08004e96 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004e96:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8004e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e9e:	d106      	bne.n	8004eae <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004ea0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004ea4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8004ea8:	f891 020a 	ldrb.w	r0, [r1, #522]	; 0x20a
  }
}
 8004eac:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004eae:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004eb2:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 8004eb6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8004eba:	4770      	bx	lr

08004ebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8004ebc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004ebe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ec2:	f7fb fbf3 	bl	80006ac <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8004ec6:	b118      	cbz	r0, 8004ed0 <USBD_LL_SetUSBAddress+0x14>
 8004ec8:	2802      	cmp	r0, #2
 8004eca:	d003      	beq.n	8004ed4 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ecc:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004ece:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004ed4:	2001      	movs	r0, #1
    break;
 8004ed6:	bd08      	pop	{r3, pc}

08004ed8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8004ed8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004eda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ede:	f7fb fc7b 	bl	80007d8 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8004ee2:	b118      	cbz	r0, 8004eec <USBD_LL_Transmit+0x14>
 8004ee4:	2802      	cmp	r0, #2
 8004ee6:	d003      	beq.n	8004ef0 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ee8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004eea:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004eec:	2000      	movs	r0, #0
 8004eee:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004ef0:	2001      	movs	r0, #1
    break;
 8004ef2:	bd08      	pop	{r3, pc}

08004ef4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8004ef4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004ef6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004efa:	f7fb fc3b 	bl	8000774 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8004efe:	b118      	cbz	r0, 8004f08 <USBD_LL_PrepareReceive+0x14>
 8004f00:	2802      	cmp	r0, #2
 8004f02:	d003      	beq.n	8004f0c <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004f04:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004f06:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004f08:	2000      	movs	r0, #0
 8004f0a:	bd08      	pop	{r3, pc}
      usb_status = USBD_BUSY;
 8004f0c:	2001      	movs	r0, #1
    break;
 8004f0e:	bd08      	pop	{r3, pc}

08004f10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8004f10:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004f12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004f16:	f7fb fc58 	bl	80007ca <HAL_PCD_EP_GetRxCount>
}
 8004f1a:	bd08      	pop	{r3, pc}

08004f1c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004f1c:	4800      	ldr	r0, [pc, #0]	; (8004f20 <USBD_static_malloc+0x4>)
 8004f1e:	4770      	bx	lr
 8004f20:	20000130 	.word	0x20000130

08004f24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004f24:	4770      	bx	lr

08004f26 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004f26:	4770      	bx	lr

08004f28 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004f28:	2312      	movs	r3, #18
 8004f2a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004f2c:	4800      	ldr	r0, [pc, #0]	; (8004f30 <USBD_FS_DeviceDescriptor+0x8>)
 8004f2e:	4770      	bx	lr
 8004f30:	200000c8 	.word	0x200000c8

08004f34 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8004f34:	2304      	movs	r3, #4
 8004f36:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004f38:	4800      	ldr	r0, [pc, #0]	; (8004f3c <USBD_FS_LangIDStrDescriptor+0x8>)
 8004f3a:	4770      	bx	lr
 8004f3c:	200000dc 	.word	0x200000dc

08004f40 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004f40:	b508      	push	{r3, lr}
 8004f42:	460a      	mov	r2, r1
  if(speed == 0)
 8004f44:	b128      	cbz	r0, 8004f52 <USBD_FS_ProductStrDescriptor+0x12>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8004f46:	4905      	ldr	r1, [pc, #20]	; (8004f5c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004f48:	4805      	ldr	r0, [pc, #20]	; (8004f60 <USBD_FS_ProductStrDescriptor+0x20>)
 8004f4a:	f7ff fbb5 	bl	80046b8 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004f50:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004f52:	4902      	ldr	r1, [pc, #8]	; (8004f5c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004f54:	4802      	ldr	r0, [pc, #8]	; (8004f60 <USBD_FS_ProductStrDescriptor+0x20>)
 8004f56:	f7ff fbaf 	bl	80046b8 <USBD_GetString>
 8004f5a:	e7f8      	b.n	8004f4e <USBD_FS_ProductStrDescriptor+0xe>
 8004f5c:	20000aa4 	.word	0x20000aa4
 8004f60:	080051d0 	.word	0x080051d0

08004f64 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004f64:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004f66:	4c04      	ldr	r4, [pc, #16]	; (8004f78 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004f68:	460a      	mov	r2, r1
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4803      	ldr	r0, [pc, #12]	; (8004f7c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004f6e:	f7ff fba3 	bl	80046b8 <USBD_GetString>
  return USBD_StrDesc;
}
 8004f72:	4620      	mov	r0, r4
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	20000aa4 	.word	0x20000aa4
 8004f7c:	080051b0 	.word	0x080051b0

08004f80 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004f80:	b508      	push	{r3, lr}
 8004f82:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 8004f84:	b128      	cbz	r0, 8004f92 <USBD_FS_SerialStrDescriptor+0x12>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8004f86:	4905      	ldr	r1, [pc, #20]	; (8004f9c <USBD_FS_SerialStrDescriptor+0x1c>)
 8004f88:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <USBD_FS_SerialStrDescriptor+0x20>)
 8004f8a:	f7ff fb95 	bl	80046b8 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8004f8e:	4803      	ldr	r0, [pc, #12]	; (8004f9c <USBD_FS_SerialStrDescriptor+0x1c>)
 8004f90:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004f92:	4902      	ldr	r1, [pc, #8]	; (8004f9c <USBD_FS_SerialStrDescriptor+0x1c>)
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <USBD_FS_SerialStrDescriptor+0x20>)
 8004f96:	f7ff fb8f 	bl	80046b8 <USBD_GetString>
 8004f9a:	e7f8      	b.n	8004f8e <USBD_FS_SerialStrDescriptor+0xe>
 8004f9c:	20000aa4 	.word	0x20000aa4
 8004fa0:	080051e0 	.word	0x080051e0

08004fa4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004fa4:	b508      	push	{r3, lr}
 8004fa6:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 8004fa8:	b128      	cbz	r0, 8004fb6 <USBD_FS_ConfigStrDescriptor+0x12>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8004faa:	4905      	ldr	r1, [pc, #20]	; (8004fc0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004fac:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004fae:	f7ff fb83 	bl	80046b8 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004fb4:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004fb6:	4902      	ldr	r1, [pc, #8]	; (8004fc0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004fba:	f7ff fb7d 	bl	80046b8 <USBD_GetString>
 8004fbe:	e7f8      	b.n	8004fb2 <USBD_FS_ConfigStrDescriptor+0xe>
 8004fc0:	20000aa4 	.word	0x20000aa4
 8004fc4:	08005194 	.word	0x08005194

08004fc8 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8004fc8:	b508      	push	{r3, lr}
 8004fca:	460a      	mov	r2, r1
  if(speed == 0)
 8004fcc:	b128      	cbz	r0, 8004fda <USBD_FS_InterfaceStrDescriptor+0x12>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004fce:	4905      	ldr	r1, [pc, #20]	; (8004fe4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004fd0:	4805      	ldr	r0, [pc, #20]	; (8004fe8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004fd2:	f7ff fb71 	bl	80046b8 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8004fd6:	4803      	ldr	r0, [pc, #12]	; (8004fe4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004fd8:	bd08      	pop	{r3, pc}
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004fda:	4902      	ldr	r1, [pc, #8]	; (8004fe4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004fdc:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004fde:	f7ff fb6b 	bl	80046b8 <USBD_GetString>
 8004fe2:	e7f8      	b.n	8004fd6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004fe4:	20000aa4 	.word	0x20000aa4
 8004fe8:	080051a0 	.word	0x080051a0

08004fec <STORAGE_Init_FS>:
int8_t STORAGE_Init_FS (uint8_t lun)
{
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
  /* USER CODE END 2 */ 
}
 8004fec:	2000      	movs	r0, #0
 8004fee:	4770      	bx	lr

08004ff0 <STORAGE_IsReady_FS>:
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4770      	bx	lr

08004ff4 <STORAGE_IsWriteProtected_FS>:
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
  /* USER CODE END 5 */ 
}
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	4770      	bx	lr

08004ff8 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS (void)
{
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */ 
}
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4770      	bx	lr

08004ffc <STORAGE_Write_FS>:
{
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	b082      	sub	sp, #8
	HAL_SD_WriteBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
 8005000:	2400      	movs	r4, #0
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	0252      	lsls	r2, r2, #9
 800500c:	4623      	mov	r3, r4
 800500e:	4803      	ldr	r0, [pc, #12]	; (800501c <STORAGE_Write_FS+0x20>)
 8005010:	f7fd fc11 	bl	8002836 <HAL_SD_WriteBlocks>
}
 8005014:	4620      	mov	r0, r4
 8005016:	b002      	add	sp, #8
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop
 800501c:	20000400 	.word	0x20000400

08005020 <STORAGE_Read_FS>:
{
 8005020:	b510      	push	{r4, lr}
 8005022:	b082      	sub	sp, #8
	HAL_SD_ReadBlocks(&hsd, (uint32_t*)buf, (uint64_t)(blk_addr * BLOCK_SIZE), BLOCK_SIZE, blk_len);
 8005024:	2400      	movs	r4, #0
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	0252      	lsls	r2, r2, #9
 8005030:	4623      	mov	r3, r4
 8005032:	4803      	ldr	r0, [pc, #12]	; (8005040 <STORAGE_Read_FS+0x20>)
 8005034:	f7fd fb25 	bl	8002682 <HAL_SD_ReadBlocks>
}
 8005038:	4620      	mov	r0, r4
 800503a:	b002      	add	sp, #8
 800503c:	bd10      	pop	{r4, pc}
 800503e:	bf00      	nop
 8005040:	20000400 	.word	0x20000400

08005044 <STORAGE_GetCapacity_FS>:
{
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	460e      	mov	r6, r1
 8005048:	4615      	mov	r5, r2
	HAL_SD_Get_CardInfo(&hsd, &SDCardInfo);
 800504a:	4c08      	ldr	r4, [pc, #32]	; (800506c <STORAGE_GetCapacity_FS+0x28>)
 800504c:	4621      	mov	r1, r4
 800504e:	4808      	ldr	r0, [pc, #32]	; (8005070 <STORAGE_GetCapacity_FS+0x2c>)
 8005050:	f7fd f91d 	bl	800228e <HAL_SD_Get_CardInfo>
	*block_num  = SDCardInfo.CardCapacity / BLOCK_SIZE;
 8005054:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005056:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005058:	0a5b      	lsrs	r3, r3, #9
 800505a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800505e:	6033      	str	r3, [r6, #0]
	*block_size = BLOCK_SIZE;
 8005060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005064:	802b      	strh	r3, [r5, #0]
}
 8005066:	2000      	movs	r0, #0
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	bf00      	nop
 800506c:	200003a8 	.word	0x200003a8
 8005070:	20000400 	.word	0x20000400

08005074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005076:	e003      	b.n	8005080 <LoopCopyDataInit>

08005078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800507a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800507c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800507e:	3104      	adds	r1, #4

08005080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005080:	480a      	ldr	r0, [pc, #40]	; (80050ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005088:	d3f6      	bcc.n	8005078 <CopyDataInit>
  ldr r2, =_sbss
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800508c:	e002      	b.n	8005094 <LoopFillZerobss>

0800508e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005090:	f842 3b04 	str.w	r3, [r2], #4

08005094 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005098:	d3f9      	bcc.n	800508e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800509a:	f7ff fdbf 	bl	8004c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800509e:	f000 f80f 	bl	80050c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050a2:	f7ff fcf7 	bl	8004a94 <main>
  bx lr
 80050a6:	4770      	bx	lr
  ldr r3, =_sidata
 80050a8:	0800521c 	.word	0x0800521c
  ldr r0, =_sdata
 80050ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80050b0:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 80050b4:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 80050b8:	20000ca4 	.word	0x20000ca4

080050bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050bc:	e7fe      	b.n	80050bc <ADC1_2_IRQHandler>
	...

080050c0 <__libc_init_array>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	2500      	movs	r5, #0
 80050c4:	4e0c      	ldr	r6, [pc, #48]	; (80050f8 <__libc_init_array+0x38>)
 80050c6:	4c0d      	ldr	r4, [pc, #52]	; (80050fc <__libc_init_array+0x3c>)
 80050c8:	1ba4      	subs	r4, r4, r6
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	42a5      	cmp	r5, r4
 80050ce:	d109      	bne.n	80050e4 <__libc_init_array+0x24>
 80050d0:	f000 f81a 	bl	8005108 <_init>
 80050d4:	2500      	movs	r5, #0
 80050d6:	4e0a      	ldr	r6, [pc, #40]	; (8005100 <__libc_init_array+0x40>)
 80050d8:	4c0a      	ldr	r4, [pc, #40]	; (8005104 <__libc_init_array+0x44>)
 80050da:	1ba4      	subs	r4, r4, r6
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	42a5      	cmp	r5, r4
 80050e0:	d105      	bne.n	80050ee <__libc_init_array+0x2e>
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050e8:	4798      	blx	r3
 80050ea:	3501      	adds	r5, #1
 80050ec:	e7ee      	b.n	80050cc <__libc_init_array+0xc>
 80050ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050f2:	4798      	blx	r3
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7f2      	b.n	80050de <__libc_init_array+0x1e>
 80050f8:	08005214 	.word	0x08005214
 80050fc:	08005214 	.word	0x08005214
 8005100:	08005214 	.word	0x08005214
 8005104:	08005218 	.word	0x08005218

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
